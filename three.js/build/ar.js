(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("three"));
	else if(typeof define === 'function' && define.amd)
		define(["three"], factory);
	else if(typeof exports === 'object')
		exports["ARjs"] = factory(require("three"));
	else
		root["ARjs"] = factory(root["THREE"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_three__) {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../AR.js-github-org/artoolkit5-js/dist/ARToolkit.js":
/*!***********************************************************!*\
  !*** ../AR.js-github-org/artoolkit5-js/dist/ARToolkit.js ***!
  \***********************************************************/
/***/ (function(module) {

/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/@babel/runtime/regenerator/index.js?");

/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/axios */ \"./node_modules/axios/lib/axios.js\");\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/index.js?");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"./node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"./node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"./node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"./node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"./node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"./node_modules/axios/lib/core/createError.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/adapters/xhr.js?");

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"./node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"./node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\naxios.VERSION = (__webpack_require__(/*! ./env/data */ \"./node_modules/axios/lib/env/data.js\").version);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"./node_modules/axios/lib/helpers/spread.js\");\n\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ \"./node_modules/axios/lib/helpers/isAxiosError.js\");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports[\"default\"] = axios;\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/axios.js?");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/cancel/Cancel.js?");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/cancel/CancelToken.js?");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/cancel/isCancel.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"./node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"./node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar validator = __webpack_require__(/*! ../helpers/validator */ \"./node_modules/axios/lib/helpers/validator.js\");\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/Axios.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/InterceptorManager.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"./node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"./node_modules/axios/lib/helpers/combineURLs.js\");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/buildFullPath.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/createError.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"./node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/dispatchRequest.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/enhanceError.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/mergeConfig.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"./node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/settle.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar defaults = __webpack_require__(/*! ./../defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/core/transformData.js?");

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \"./node_modules/axios/lib/helpers/normalizeHeaderName.js\");\nvar enhanceError = __webpack_require__(/*! ./core/enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/defaults.js?");

/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((module) => {

eval("module.exports = {\n  \"version\": \"0.24.0\"\n};\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/env/data.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/bind.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/buildURL.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/combineURLs.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/cookies.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/isAbsoluteURL.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/isAxiosError.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/isURLSameOrigin.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/normalizeHeaderName.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/parseHeaders.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/spread.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar VERSION = (__webpack_require__(/*! ../env/data */ \"./node_modules/axios/lib/env/data.js\").version);\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/helpers/validator.js?");

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/axios/lib/utils.js?");

/***/ }),

/***/ "./src/ARController.js":
/*!*****************************!*\
  !*** ./src/ARController.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ARController)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ARToolkit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ARToolkit */ \"./src/ARToolkit.js\");\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\nvar ARController = /*#__PURE__*/function () {\n  function ARController(width, height, cameraParam, options) {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, ARController);\n\n    // read settings\n    this.options = _objectSpread(_objectSpread({}, {\n      canvas: null,\n      orientation: 'landscape'\n    }), options); // no point in initializing a member as \"undefined\"\n    // replaced it with -1\n\n    this.id = -1;\n    this.width = width;\n    this.height = height; // holds an image in case the instance was initialized with an image\n\n    this.image; // default camera orientation\n\n    this.orientation = this.options.orientation; // this is a replacement for ARCameraParam\n\n    this.cameraParam = cameraParam;\n    this.cameraId = -1;\n    this.cameraLoaded = false; // toolkit instance\n\n    this.artoolkit; // to register observers as event listeners\n\n    this.listeners = {};\n    this.defaultMarkerWidth = 1;\n    this.patternMarkers = {};\n    this.barcodeMarkers = {};\n    this.nftMarkers = {};\n    this.transform_mat = new Float32Array(16);\n    this.transformGL_RH = new Float64Array(16);\n    this.videoWidth = width;\n    this.videoHeight = height;\n    this.videoSize = this.videoWidth * this.videoHeight;\n    this.framepointer = null;\n    this.framesize = null;\n    this.dataHeap = null;\n    this.videoLuma = null;\n    this.camera_mat = null;\n    this.marker_transform_mat = null;\n    this.videoLumaPointer = null;\n\n    if (this.options.canvas) {\n      // in case you use Node.js, create a canvas with node-canvas\n      this.canvas = this.options.canvas;\n    } else if (typeof document !== 'undefined') {\n      // try creating a canvas from document\n      this.canvas = document.createElement('canvas');\n    }\n\n    if (this.canvas) {\n      this.canvas.width = width;\n      this.canvas.height = height;\n      this.ctx = this.canvas.getContext('2d');\n    } else {\n      console.warn('No canvas available');\n    } // this is to workaround the introduction of \"self\" variable\n\n\n    this.nftMarkerFound = false;\n    this.nftMarkerFoundTime = false;\n    this.nftMarkerCount = 0;\n    this._bwpointer = false;\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(ARController, [{\n    key: \"dispose\",\n    value: function dispose() {\n      // dispose of the camera\n      // this replaces ARCameraParam.dispose()\n      // Note: \"deleteCamera\" was removed\n      // as this method never existed on ARToolkit in the first place\n      this.cameraId = -1;\n      this.cameraParam = '';\n      this.cameraLoaded = false;\n\n      if (this.id > -1) {\n        this.artoolkit.teardown(this.id);\n      } // Note: only <video> has an srcObject - images don't\n\n\n      if (this.image && this.image.srcObject) {// @TODO: enable\n        //ARController._teardownVideo(this.image);\n      } // @TODO: seriously?\n\n\n      for (var t in this) {\n        this[t] = null;\n      }\n    }\n  }, {\n    key: \"process\",\n    value: // marker detection\n    //----------------------------------------------------------------------------\n\n    /**\n     * Detects markers in the given image. The process method dispatches marker detection events during its run.\n     * The marker detection process proceeds by first dispatching a markerNum event that tells you how many\n     * markers were found in the image. Next, a getMarker event is dispatched for each found marker square.\n     * Then, a getNFTMarker event is dispatched for each found NFT marker.\n     * Finally, getMultiMarker is dispatched for every found multimarker, followed by getMultiMarkerSub events\n     * dispatched for each of the markers in the multimarker.\n     *\n     *   arController.addEventListener('markerNum', function(ev) {\n     *     console.log(\"Detected \" + ev.data + \" markers.\")\n     *   });\n     *\n     *   arController.addEventListener('getMarker', function(ev) {\n     *     console.log(\"Detected marker with ids:\", ev.data.marker.id, ev.data.marker.idPatt, ev.data.marker.idMatrix);\n     *     console.log(\"Marker data\", ev.data.marker);\n     *     console.log(\"Marker transform matrix:\", [].join.call(ev.data.matrix, ', '));\n     *   });\n     *\n     *   arController.addEventListener('getNFTMarker', function(ev) {\n     *     // do stuff\n     *   });\n     *\n     *   arController.addEventListener('getMultiMarker', function(ev) {\n     *     console.log(\"Detected multimarker with id:\", ev.data.multiMarkerId);\n     *   });\n     *\n     *   arController.addEventListener('getMultiMarkerSub', function(ev) {\n     *     console.log(\"Submarker for \" + ev.data.multiMarkerId, ev.data.markerIndex, ev.data.marker);\n     *   });\n     *\n     *   arController.process(image);\n     *\n     * If no image is given, defaults to this.image.\n     * If the debugSetup has been called, draws debug markers on the debug canvas.\n     * @param {ImageElement | VideoElement} image The image to process [optional].\n     */\n    function process(image) {\n      var result = this.detectMarker(image);\n\n      if (result != 0) {\n        console.error('[ARController]', 'detectMarker error:', result);\n      } // get the total marker number\n\n\n      var markerNum = this.getMarkerNum();\n      var k, o; // get markers\n      // - pattern markers\n\n      for (k in this.patternMarkers) {\n        o = this.patternMarkers[k];\n        o.inPrevious = o.inCurrent;\n        o.inCurrent = false;\n      } // - barcode markers\n\n\n      for (k in this.barcodeMarkers) {\n        o = this.barcodeMarkers[k];\n        o.inPrevious = o.inCurrent;\n        o.inCurrent = false;\n      } // - NFT markers\n\n\n      for (k in this.nftMarkers) {\n        o = this.nftMarkers[k];\n        o.inPrevious = o.inCurrent;\n        o.inCurrent = false;\n      } // detect fiducial (aka squared) markers\n\n\n      for (var i = 0; i < markerNum; i++) {\n        var markerInfo = this.getMarker(i);\n        var markerType = _ARToolkit__WEBPACK_IMPORTED_MODULE_5__[\"default\"].UNKNOWN_MARKER;\n        var visible = this.trackPatternMarkerId(-1);\n\n        if (markerInfo.idPatt > -1 && (markerInfo.id === markerInfo.idPatt || markerInfo.idMatrix === -1)) {\n          visible = this.trackPatternMarkerId(markerInfo.idPatt);\n          markerType = _ARToolkit__WEBPACK_IMPORTED_MODULE_5__[\"default\"].PATTERN_MARKER;\n\n          if (markerInfo.dir !== markerInfo.dirPatt) {\n            this.setMarkerInfoDir(i, markerInfo.dirPatt);\n          }\n        } else if (markerInfo.idMatrix > -1) {\n          visible = this.trackBarcodeMarkerId(markerInfo.idMatrix);\n          markerType = _ARToolkit__WEBPACK_IMPORTED_MODULE_5__[\"default\"].BARCODE_MARKER;\n\n          if (markerInfo.dir !== markerInfo.dirMatrix) {\n            this.setMarkerInfoDir(i, markerInfo.dirMatrix);\n          }\n        }\n\n        if (markerType !== _ARToolkit__WEBPACK_IMPORTED_MODULE_5__[\"default\"].UNKNOWN_MARKER && visible.inPrevious) {\n          this.getTransMatSquareCont(i, visible.markerWidth, visible.matrix, visible.matrix);\n        } else {\n          this.getTransMatSquare(i, visible.markerWidth, visible.matrix);\n        }\n\n        visible.inCurrent = true;\n        this.transMatToGLMat(visible.matrix, this.transform_mat);\n        this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);\n        this.dispatchEvent({\n          name: 'getMarker',\n          target: this,\n          data: {\n            index: i,\n            type: markerType,\n            marker: markerInfo,\n            matrix: this.transform_mat,\n            matrixGL_RH: this.transformGL_RH\n          }\n        });\n      } // detect NFT markers\n\n\n      var nftMarkerCount = this.nftMarkerCount;\n      this.detectNFTMarker(); // in ms\n\n      var MARKER_LOST_TIME = 200;\n\n      for (var _i = 0; _i < nftMarkerCount; _i++) {\n        var nftMarkerInfo = this.getNFTMarker(_i);\n        var _markerType = _ARToolkit__WEBPACK_IMPORTED_MODULE_5__[\"default\"].NFT_MARKER;\n\n        if (nftMarkerInfo.found) {\n          this.nftMarkerFound = _i;\n          this.nftMarkerFoundTime = Date.now();\n\n          var _visible = this.trackNFTMarkerId(_i);\n\n          _visible.matrix.set(nftMarkerInfo.pose);\n\n          _visible.inCurrent = true;\n          this.transMatToGLMat(_visible.matrix, this.transform_mat);\n          this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);\n          this.dispatchEvent({\n            name: 'getNFTMarker',\n            target: this,\n            data: {\n              index: _i,\n              type: _markerType,\n              marker: nftMarkerInfo,\n              matrix: this.transform_mat,\n              matrixGL_RH: this.transformGL_RH\n            }\n          });\n        } else if (self.nftMarkerFound === _i) {\n          // for now this marker found/lost events handling is for one marker at a time\n          if (Date.now() - this.nftMarkerFoundTime > MARKER_LOST_TIME) {\n            this.nftMarkerFound = false;\n            this.dispatchEvent({\n              name: 'lostNFTMarker',\n              target: this,\n              data: {\n                index: _i,\n                type: _markerType,\n                marker: nftMarkerInfo,\n                matrix: this.transform_mat,\n                matrixGL_RH: this.transformGL_RH\n              }\n            });\n          }\n\n          ;\n        }\n      } // detect multiple markers\n\n\n      var multiMarkerCount = this.getMultiMarkerCount();\n\n      for (var _i2 = 0; _i2 < multiMarkerCount; _i2++) {\n        var subMarkerCount = this.getMultiMarkerPatternCount(_i2);\n        var _visible2 = false;\n        this.artoolkit.getTransMatMultiSquareRobust(this.id, _i2);\n        this.transMatToGLMat(this.marker_transform_mat, this.transform_mat);\n        this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);\n\n        for (var j = 0; j < subMarkerCount; j++) {\n          var multiEachMarkerInfo = this.getMultiEachMarker(_i2, j);\n\n          if (multiEachMarkerInfo.visible >= 0) {\n            _visible2 = true;\n            this.dispatchEvent({\n              name: 'getMultiMarker',\n              target: this,\n              data: {\n                multiMarkerId: _i2,\n                matrix: this.transform_mat,\n                matrixGL_RH: this.transformGL_RH\n              }\n            });\n            break;\n          }\n        }\n\n        if (_visible2) {\n          for (var _j = 0; _j < subMarkerCount; _j++) {\n            var multiEachMarkerInfo = this.getMultiEachMarker(_i2, _j);\n            this.transMatToGLMat(this.marker_transform_mat, this.transform_mat);\n            this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);\n            this.dispatchEvent({\n              name: 'getMultiMarkerSub',\n              target: this,\n              data: {\n                multiMarkerId: _i2,\n                markerIndex: _j,\n                marker: multiEachMarkerInfo,\n                matrix: this.transform_mat,\n                matrixGL_RH: this.transformGL_RH\n              }\n            });\n          }\n        }\n      }\n\n      if (this._bwpointer) {\n        this.debugDraw();\n      }\n    }\n    /**\n     * Detects the NFT markers in the process() function,\n     * with the given tracked id.\n     */\n\n  }, {\n    key: \"detectNFTMarker\",\n    value: function detectNFTMarker() {\n      this.artoolkit.detectNFTMarker(this.id);\n    }\n    /**\n     * Adds the given pattern marker ID to the index of tracked IDs.\n     * Sets the markerWidth for the pattern marker to markerWidth.\n     * Used by process() to implement continuous tracking,\n     * keeping track of the marker's transformation matrix\n     * and customizable marker widths.\n     * @param {number} id ID of the pattern marker to track.\n     * @param {number} [markerWidth] The width of the marker to track.\n     * @return {Object} The marker tracking object.\n    */\n\n  }, {\n    key: \"trackPatternMarkerId\",\n    value: function trackPatternMarkerId(id, markerWidth) {\n      var obj = this.patternMarkers[id];\n\n      if (!obj) {\n        this.patternMarkers[id] = obj = {\n          inPrevious: false,\n          inCurrent: false,\n          matrix: new Float64Array(12),\n          matrixGL_RH: new Float64Array(12),\n          markerWidth: markerWidth || this.defaultMarkerWidth\n        };\n      }\n\n      if (markerWidth) {\n        obj.markerWidth = markerWidth;\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"trackBarcodeMarkerId\",\n    value:\n    /**\n     * Adds the given barcode marker ID to the index of tracked IDs.\n     * Sets the markerWidth for the pattern marker to markerWidth.\n     * Used by process() to implement continuous tracking,\n     * keeping track of the marker's transformation matrix\n     * and customizable marker widths.\n     * @param {number} id ID of the barcode marker to track.\n     * @param {number} [markerWidth] The width of the marker to track.\n     * @return {Object} The marker tracking object.\n     */\n    function trackBarcodeMarkerId(id, markerWidth) {\n      var obj = this.barcodeMarkers[id];\n\n      if (!obj) {\n        this.barcodeMarkers[id] = obj = {\n          inPrevious: false,\n          inCurrent: false,\n          matrix: new Float64Array(12),\n          matrixGL_RH: new Float64Array(12),\n          markerWidth: markerWidth || this.defaultMarkerWidth\n        };\n      }\n\n      if (markerWidth) {\n        obj.markerWidth = markerWidth;\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"trackNFTMarkerId\",\n    value:\n    /**\n     * Adds the given NFT marker ID to the index of tracked IDs.\n     * Sets the markerWidth for the pattern marker to markerWidth.\n     * Used by process() to implement continuous tracking,\n     * keeping track of the marker's transformation matrix\n     * and customizable marker widths.\n     * @param {number} id ID of the NFT marker to track.\n     * @param {number} markerWidth The width of the marker to track.\n     * @return {Object} The marker tracking object.\n     */\n    function trackNFTMarkerId(id, markerWidth) {\n      var obj = this.nftMarkers[id];\n\n      if (!obj) {\n        this.nftMarkers[id] = obj = {\n          inPrevious: false,\n          inCurrent: false,\n          matrix: new Float64Array(12),\n          matrixGL_RH: new Float64Array(12),\n          markerWidth: markerWidth || this.defaultMarkerWidth\n        };\n      }\n\n      if (markerWidth) {\n        obj.markerWidth = markerWidth;\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"getMultiMarkerCount\",\n    value:\n    /**\n     * Returns the number of multimarkers registered on this ARController.\n     * @return {number} Number of multimarkers registered.\n     */\n    function getMultiMarkerCount() {\n      return this.artoolkit.getMultiMarkerCount(this.id);\n    }\n  }, {\n    key: \"getMultiMarkerPatternCount\",\n    value:\n    /**\n     * Returns the number of markers in the multimarker registered for the given multiMarkerId.\n     * @param {number} multiMarkerId The id number of the multimarker to access. Given by loadMultiMarker.\n     * @return {number} Number of markers in the multimarker. Negative value indicates failure to find the multimarker.\n     */\n    function getMultiMarkerPatternCount(multiMarkerId) {\n      return this.artoolkit.getMultiMarkerNum(this.id, multiMarkerId);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: // event handling\n    //----------------------------------------------------------------------------\n\n    /**\n     * Add an event listener on this ARController for the named event, calling the callback function\n     * whenever that event is dispatched.\n     * Possible events are:\n     * - getMarker - dispatched whenever process() finds a square marker\n     * - getMultiMarker - dispatched whenever process() finds a visible registered multimarker\n     * - getMultiMarkerSub - dispatched by process() for each marker in a visible multimarker\n     * - load - dispatched when the ARController is ready to use (useful if passing in a camera URL in the constructor)\n     * @param {string} name Name of the event to listen to.\n     * @param {function} callback Callback function to call when an event with the given name is dispatched.\n     */\n    function addEventListener(name, callback) {\n      if (!this.listeners[name]) {\n        this.listeners[name] = [];\n      }\n\n      this.listeners[name].push(callback);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value:\n    /**\n     * Remove an event listener from the named event.\n     * @param {string} name Name of the event to stop listening to.\n     * @param {function} callback Callback function to remove from the listeners of the named event.\n     */\n    function removeEventListener(name, callback) {\n      if (this.listeners[name]) {\n        var index = this.listeners[name].indexOf(callback);\n\n        if (index > -1) {\n          this.listeners[name].splice(index, 1);\n        }\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value:\n    /**\n     * Dispatches the given event to all registered listeners on event.name.\n     * @param {Object} event Event to dispatch.\n     */\n    function dispatchEvent(event) {\n      //console.log('Dispatched event');\n      //console.log(event);\n      var listeners = this.listeners[event.name];\n\n      if (listeners) {\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i].call(this, event);\n        }\n      }\n    }\n  }, {\n    key: \"debugSetup\",\n    value: // debug stuff\n    //----------------------------------------------------------------------------\n\n    /**\n     * Sets up a debug canvas for the AR detection.\n     * Draws a red marker on top of each detected square in the image.\n     * The debug canvas is added to document.body.\n     */\n    function debugSetup() {\n      if (typeof document === 'undefined') {\n        console.log('debugSetup() currently only supports Browser environments');\n        return;\n      }\n\n      document.body.appendChild(this.canvas);\n      this.setDebugMode(true);\n      this._bwpointer = this.getProcessingImage();\n    }\n  }, {\n    key: \"debugDraw\",\n    value:\n    /**\n     * Draw the black and white image and debug markers to the ARController canvas.\n     * See setDebugMode.\n     * @return 0 (void)\n     */\n    function debugDraw() {\n      var debugBuffer = new Uint8ClampedArray(this.artoolkit.instance.HEAPU8.buffer, this._bwpointer, this.framesize);\n      var imageData = new ImageData(new Uint8ClampedArray(this.canvas.width * this.canvas.height * 4), this.canvas.width, this.canvas.height);\n\n      for (var i = 0, j = 0; i < debugBuffer.length; i++, j += 4) {\n        var v = debugBuffer[i];\n        imageData.data[j + 0] = v;\n        imageData.data[j + 1] = v;\n        imageData.data[j + 2] = v;\n        imageData.data[j + 3] = 255;\n      }\n\n      this.ctx.putImageData(imageData, 0, 0);\n      var markerNum = this.getMarkerNum();\n\n      for (var _i3 = 0; _i3 < markerNum; _i3++) {\n        this.drawDebugMarker(this.getMarker(_i3));\n      }\n      /*\n          if(this.transform_mat && this.transformGL_RH) {\n            console.log(\"GL 4x4 Matrix: \" + this.transform_mat);\n            console.log(\"GL_RH 4x4 Mat: \" + this.transformGL_RH);\n          }\n      */\n\n    }\n  }, {\n    key: \"drawDebugMarker\",\n    value:\n    /**\n     * Draw a square black border around the detect marker with\n     * red circle in the center. Used for debugging porpouse in debugSetup.\n     * @return {number} 0 (void)\n     */\n    function drawDebugMarker(marker) {\n      var vertex = marker.vertex;\n      var pos = marker.pos;\n      var ctx = this.ctx;\n      ctx.lineWidth = 5;\n      ctx.strokeStyle = 'red';\n      ctx.beginPath();\n      ctx.moveTo(vertex[0][0], vertex[0][1]);\n      ctx.lineTo(vertex[1][0], vertex[1][1]);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(vertex[2][0], vertex[2][1]);\n      ctx.lineTo(vertex[3][0], vertex[3][1]);\n      ctx.stroke();\n      ctx.strokeStyle = 'green';\n      ctx.beginPath();\n      ctx.lineTo(vertex[1][0], vertex[1][1]);\n      ctx.lineTo(vertex[2][0], vertex[2][1]);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(vertex[3][0], vertex[3][1]);\n      ctx.lineTo(vertex[0][0], vertex[0][1]);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.arc(pos[0], pos[1], 8, 0, Math.PI * 2);\n      ctx.fillStyle = 'red';\n      ctx.fill();\n    }\n  }, {\n    key: \"loadMarker\",\n    value: // marker loaders\n    //----------------------------------------------------------------------------\n\n    /**\n     * Loads a pattern marker from the given URL or data string\n     * @param {string} urlOrData - The URL or data of the marker pattern file to load.\n     */\n    function () {\n      var _loadMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee(urlOrData) {\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.artoolkit.addMarker(this.id, urlOrData);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadMarker(_x) {\n        return _loadMarker.apply(this, arguments);\n      }\n\n      return loadMarker;\n    }()\n  }, {\n    key: \"loadMultiMarker\",\n    value:\n    /**\n     * Loads a multimarker from the given URL and calls the onSuccess callback with the UID of the marker.\n     * @param {string} urlOrData - The URL of the multimarker pattern file to load.\n     */\n    function () {\n      var _loadMultiMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData) {\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.artoolkit.addMultiMarker(this.id, urlOrData);\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadMultiMarker(_x2) {\n        return _loadMultiMarker.apply(this, arguments);\n      }\n\n      return loadMultiMarker;\n    }()\n  }, {\n    key: \"loadNFTMarker\",\n    value:\n    /**\n     * Loads an NFT marker from the given URL or data string\n     * @param {string} urlOrData - The URL prefix or data of the NFT markers to load.\n    */\n    function () {\n      var _loadNFTMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3(urlOrData) {\n        var markerId;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.artoolkit.addNFTMarker(this.id, urlOrData);\n\n              case 2:\n                markerId = _context3.sent;\n                this.nftMarkerCount = markerId + 1;\n                return _context3.abrupt(\"return\", markerId);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadNFTMarker(_x3) {\n        return _loadNFTMarker.apply(this, arguments);\n      }\n\n      return loadNFTMarker;\n    }()\n  }, {\n    key: \"getTransMatSquare\",\n    value: // math stuff\n    //----------------------------------------------------------------------------\n\n    /**\n     * Populates the provided float array with the current transformation for the specified marker. After\n     * a call to detectMarker, all marker information will be current. Marker transformations can then be\n     * checked.\n     * @param {number} markerUID  The unique identifier (UID) of the marker to query\n     * @param {number} markerWidth  The width of the marker\n     * @param {Float64Array} dst  The float array to populate with the 3x4 marker transformation matrix\n     * @return  {Float64Array} The dst array.\n     */\n    function getTransMatSquare(markerUID, markerWidth, dst) {\n      this.artoolkit.getTransMatSquare(this.id, markerUID, markerWidth);\n      dst.set(this.marker_transform_mat);\n      return dst;\n    }\n  }, {\n    key: \"getTransMatSquareCont\",\n    value:\n    /**\n     * Populates the provided float array with the current transformation for the specified marker, using\n     * previousMarkerTransform as the previously detected transformation. After\n     * a call to detectMarker, all marker information will be current. Marker transformations can then be\n     * checked.\n     * @param {number} markerUID  The unique identifier (UID) of the marker to query\n     * @param {number} markerWidth  The width of the marker\n     * @param {Float64Array} previousMarkerTransform  The float array to use as the previous 3x4 marker transformation matrix\n     * @param {Float64Array} dst  The float array to populate with the 3x4 marker transformation matrix\n     * @return  {Float64Array} The dst array.\n     */\n    function getTransMatSquareCont(markerUID, markerWidth, previousMarkerTransform, dst) {\n      this.marker_transform_mat.set(previousMarkerTransform);\n      this.artoolkit.getTransMatSquareCont(this.id, markerUID, markerWidth);\n      dst.set(this.marker_transform_mat);\n      return dst;\n    }\n  }, {\n    key: \"getTransMatMultiSquare\",\n    value:\n    /**\n     * Populates the provided float array with the current transformation for the specified multimarker. After\n     * a call to detectMarker, all marker information will be current. Marker transformations can then be\n     * checked.\n     * @param {number} markerUID  The unique identifier (UID) of the marker to query\n     * @param {Float64Array} dst  The float array to populate with the 3x4 marker transformation matrix\n     * @return  {Float64Array} The dst array.\n     */\n    function getTransMatMultiSquare(markerUID, dst) {\n      this.artoolkit.getTransMatMultiSquare(this.id, markerUID);\n      dst.set(this.marker_transform_mat);\n      return dst;\n    }\n  }, {\n    key: \"getTransMatMultiSquareRobust\",\n    value:\n    /**\n     * Populates the provided float array with the current robust transformation for the specified multimarker. After\n     * a call to detectMarker, all marker information will be current. Marker transformations can then be\n     * checked.\n     * @param {number} markerUID  The unique identifier (UID) of the marker to query\n     * @param {Float64Array} dst  The float array to populate with the 3x4 marker transformation matrix\n     * @return  {Float64Array} The dst array.\n     */\n    function getTransMatMultiSquareRobust(markerUID, dst) {\n      this.artoolkit.getTransMatMultiSquare(this.id, markerUID);\n      dst.set(this.marker_transform_mat);\n      return dst;\n    }\n  }, {\n    key: \"transMatToGLMat\",\n    value:\n    /**\n     * Converts the given 3x4 marker transformation matrix in the 12-element transMat array\n     * into a 4x4 WebGL matrix and writes the result into the 16-element glMat array.\n     * If scale parameter is given, scales the transform of the glMat by the scale parameter.\n     * m {Float64Array} transMat The 3x4 marker transformation matrix.\n     * @param {Float64Array} glMat The 4x4 GL transformation matrix.\n     * @param {number} scale The scale for the transform.\n     */\n    function transMatToGLMat(transMat, glMat, scale) {\n      if (glMat == undefined) {\n        glMat = new Float64Array(16);\n      }\n\n      glMat[0 + 0 * 4] = transMat[0]; // R1C1\n\n      glMat[0 + 1 * 4] = transMat[1]; // R1C2\n\n      glMat[0 + 2 * 4] = transMat[2];\n      glMat[0 + 3 * 4] = transMat[3];\n      glMat[1 + 0 * 4] = transMat[4]; // R2\n\n      glMat[1 + 1 * 4] = transMat[5];\n      glMat[1 + 2 * 4] = transMat[6];\n      glMat[1 + 3 * 4] = transMat[7];\n      glMat[2 + 0 * 4] = transMat[8]; // R3\n\n      glMat[2 + 1 * 4] = transMat[9];\n      glMat[2 + 2 * 4] = transMat[10];\n      glMat[2 + 3 * 4] = transMat[11];\n      glMat[3 + 0 * 4] = 0.0;\n      glMat[3 + 1 * 4] = 0.0;\n      glMat[3 + 2 * 4] = 0.0;\n      glMat[3 + 3 * 4] = 1.0;\n\n      if (scale != undefined && scale !== 0.0) {\n        glMat[12] *= scale;\n        glMat[13] *= scale;\n        glMat[14] *= scale;\n      }\n\n      return glMat;\n    }\n  }, {\n    key: \"arglCameraViewRHf\",\n    value:\n    /**\n     * Converts the given 4x4 openGL matrix in the 16-element transMat array\n     * into a 4x4 OpenGL Right-Hand-View matrix and writes the result into the 16-element glMat array.\n     * If scale parameter is given, scales the transform of the glMat by the scale parameter.\n     * @param {Float64Array} glMatrix The 4x4 marker transformation matrix.\n     * @param {Float64Array} [glRhMatrix] The 4x4 GL right hand transformation matrix.\n     * @param {number} [scale] The scale for the transform.\n     */\n    function arglCameraViewRHf(glMatrix, glRhMatrix, scale) {\n      var m_modelview;\n      if (glRhMatrix == undefined) m_modelview = new Float64Array(16);else m_modelview = glRhMatrix; // x\n\n      m_modelview[0] = glMatrix[0];\n      m_modelview[4] = glMatrix[4];\n      m_modelview[8] = glMatrix[8];\n      m_modelview[12] = glMatrix[12]; // y\n\n      m_modelview[1] = -glMatrix[1];\n      m_modelview[5] = -glMatrix[5];\n      m_modelview[9] = -glMatrix[9];\n      m_modelview[13] = -glMatrix[13]; // z\n\n      m_modelview[2] = -glMatrix[2];\n      m_modelview[6] = -glMatrix[6];\n      m_modelview[10] = -glMatrix[10];\n      m_modelview[14] = -glMatrix[14]; // 0 0 0 1\n\n      m_modelview[3] = 0;\n      m_modelview[7] = 0;\n      m_modelview[11] = 0;\n      m_modelview[15] = 1;\n\n      if (scale != undefined && scale !== 0.0) {\n        m_modelview[12] *= scale;\n        m_modelview[13] *= scale;\n        m_modelview[14] *= scale;\n      }\n\n      glRhMatrix = m_modelview;\n      return glRhMatrix;\n    } // marker detection routines\n    //----------------------------------------------------------------------------\n\n    /**\n     * This is the core ARToolKit marker detection function. It calls through to a set of\n     * internal functions to perform the key marker detection steps of binarization and\n     * labelling, contour extraction, and template matching and/or matrix code extraction.\n     * Typically, the resulting set of detected markers is retrieved by calling arGetMarkerNum\n     * to get the number of markers detected and arGetMarker to get an array of ARMarkerInfo\n     * structures with information on each detected marker, followed by a step in which\n     * detected markers are possibly examined for some measure of goodness of match (e.g. by\n     * examining the match confidence value) and pose extraction.\n     * @param {image} Image to be processed to detect markers.\n     * @return {number} 0 if the function proceeded without error, or a value less than 0 in case of error.\n     * A result of 0 does not however, imply any markers were detected.\n     */\n\n  }, {\n    key: \"detectMarker\",\n    value: function detectMarker(image) {\n      if (this._copyImageToHeap(image)) {\n        return this.artoolkit.detectMarker(this.id);\n      }\n\n      return -99;\n    }\n  }, {\n    key: \"getMarkerNum\",\n    value:\n    /**\n     * Get the number of markers detected in a video frame.\n     * @return {number} The number of detected markers in the most recent image passed to arDetectMarker.\n     * Note that this is actually a count, not an index. A better name for this function would be\n     * arGetDetectedMarkerCount, but the current name lives on for historical reasons.\n     */\n    function getMarkerNum() {\n      return this.artoolkit.getMarkerNum(this.id);\n    }\n  }, {\n    key: \"getMarker\",\n    value:\n    /**\n     * Get the marker info struct for the given marker index in detected markers.\n     * Call this.detectMarker first, then use this.getMarkerNum to get the detected marker count.\n     * The returned object is the global artoolkit.markerInfo object and will be overwritten\n     * by subsequent calls. If you need to hang on to it, create a copy using this.cloneMarkerInfo();\n     * Returns undefined if no marker was found.\n     * A markerIndex of -1 is used to access the global custom marker.\n     * The fields of the markerInfo struct are:\n     * @field      area Area in pixels of the largest connected region, comprising the marker border and regions connected to it. Note that this is\n     *             not the same as the actual onscreen area inside the marker border.\n     * @field      id If pattern detection mode is either pattern mode OR matrix but not both, will be marker ID (>= 0) if marker is valid, or -1 if invalid.\n     * @field      idPatt If pattern detection mode includes a pattern mode, will be marker ID (>= 0) if marker is valid, or -1 if invalid.\n     * @field      idMatrix If pattern detection mode includes a matrix mode, will be marker ID (>= 0) if marker is valid, or -1 if invalid.\n     * @field      dir If pattern detection mode is either pattern mode OR matrix but not both, and id != -1, will be marker direction (range 0 to 3, inclusive).\n     * @field      dirPatt If pattern detection mode includes a pattern mode, and id != -1, will be marker direction (range 0 to 3, inclusive).\n     * @field      dirMatrix If pattern detection mode includes a matrix mode, and id != -1, will be marker direction (range 0 to 3, inclusive).\n     * @field      cf If pattern detection mode is either pattern mode OR matrix but not both, will be marker matching confidence (range 0.0 to 1.0 inclusive) if marker is valid, or -1.0 if marker is invalid.\n     * @field      cfPatt If pattern detection mode includes a pattern mode, will be marker matching confidence (range 0.0 to 1.0 inclusive) if marker is valid, or -1.0 if marker is invalid.\n     * @field      cfMatrix If pattern detection mode includes a matrix mode, will be marker matching confidence (range 0.0 to 1.0 inclusive) if marker is valid, or -1.0 if marker is invalid.\n     * @field      pos 2D position (in camera image coordinates, origin at top-left) of the centre of the marker.\n     * @field      line Line equations for the 4 sides of the marker.\n     * @field      vertex 2D positions (in camera image coordinates, origin at top-left) of the corners of the marker. vertex[(4 - dir)%4][] is the top-left corner of the marker. Other vertices proceed clockwise from this. These are idealised coordinates (i.e. the onscreen position aligns correctly with the undistorted camera image.)\n     * @param {number} markerIndex The index of the marker to query.\n     * @returns {Object} The markerInfo struct.\n     */\n    function getMarker(markerIndex) {\n      if (0 === this.artoolkit.getMarker(this.id, markerIndex)) {\n        return this.artoolkit.markerInfo;\n      }\n    }\n  }, {\n    key: \"getNFTMarker\",\n    value:\n    /**\n     * Get the NFT marker info struct for the given NFT marker index in detected markers.\n     * The returned object is the global artoolkit.NFTMarkerInfo object and will be overwritten\n     * by subsequent calls.\n     * Returns undefined if no marker was found.\n     * A markerIndex of -1 is used to access the global custom marker.\n     * @param {number} markerIndex The index of the NFT marker to query.\n     * @returns {Object} The NFTmarkerInfo struct.\n     */\n    function getNFTMarker(markerIndex) {\n      if (0 === this.artoolkit.getNFTMarker(this.id, markerIndex)) {\n        return this.artoolkit.NFTMarkerInfo;\n      }\n    }\n  }, {\n    key: \"setMarkerInfoVertex\",\n    value:\n    /**\n     * Set marker vertices to the given vertexData[4][2] array.\n     * Sets the marker pos to the center of the vertices.\n     * Useful for building custom markers for getTransMatSquare.\n     * A markerIndex of -1 is used to access the global custom marker.\n     * @param {number} markerIndex The index of the marker to edit.\n     * @param {*} vertexData\n     */\n    function setMarkerInfoVertex(markerIndex, vertexData) {\n      for (var i = 0; i < vertexData.length; i++) {\n        this.marker_transform_mat[i * 2 + 0] = vertexData[i][0];\n        this.marker_transform_mat[i * 2 + 1] = vertexData[i][1];\n      }\n\n      return this.artoolkit.setMarkerInfoVertex(this.id, markerIndex);\n    }\n  }, {\n    key: \"cloneMarkerInfo\",\n    value:\n    /**\n     * Makes a deep copy of the given marker info.\n     * @param {Object} markerInfo The marker info object to copy.\n     * @return {Object} The new copy of the marker info.\n     */\n    function cloneMarkerInfo(markerInfo) {\n      return JSON.parse(JSON.stringify(markerInfo));\n    }\n  }, {\n    key: \"getMultiEachMarker\",\n    value:\n    /**\n     * Get the marker info struct for the given marker index in detected markers.\n     * Call this.detectMarker first, then use this.getMarkerNum to get the detected marker count.\n     * The returned object is the global artoolkit.markerInfo object and will be overwritten\n     * by subsequent calls. If you need to hang on to it, create a copy using this.cloneMarkerInfo();\n     * Returns undefined if no marker was found.\n     * @field {number} pattId The index of the marker.\n     * @field {number} pattType The type of the marker. Either AR_MULTI_PATTERN_TYPE_TEMPLATE or AR_MULTI_PATTERN_TYPE_MATRIX.\n     * @field {number} visible 0 or larger if the marker is visible\n     * @field {number} width The width of the marker.\n     * @param {number} multiMarkerId The multimarker to query.\n     * @param {number} markerIndex The index of the marker to query.\n     * @returns {Object} The markerInfo struct.\n     */\n    function getMultiEachMarker(multiMarkerId, markerIndex) {\n      if (0 === this.artoolkit.getMultiEachMarker(this.id, multiMarkerId, markerIndex)) {\n        return this.artoolkit.multiEachMarkerInfo;\n      }\n    }\n  }, {\n    key: \"getTransformationMatrix\",\n    value:\n    /**\n     * Returns the 16-element WebGL transformation matrix used by ARController.process to\n     * pass marker WebGL matrices to event listeners.\n     * Unique to each ARController.\n     * @return {Float64Array} The 16-element WebGL transformation matrix used by the ARController.\n     */\n    function getTransformationMatrix() {\n      return this.transform_mat;\n    }\n  }, {\n    key: \"getCameraMatrix\",\n    value:\n    /**\n     * Returns the projection matrix computed from camera parameters for the ARController.\n     * @return {Float64Array} The 16-element WebGL camera matrix for the ARController camera parameters.\n     */\n    function getCameraMatrix() {\n      return this.camera_mat;\n    }\n  }, {\n    key: \"getMarkerTransformationMatrix\",\n    value:\n    /**\n     * Returns the shared ARToolKit 3x4 marker transformation matrix, used for passing and receiving\n     * marker transforms to/from the Emscripten side.\n     * @return {Float64Array} The 12-element 3x4 row-major marker transformation matrix used by ARToolKit.\n     */\n    function getMarkerTransformationMatrix() {\n      return this.marker_transform_mat;\n    }\n  }, {\n    key: \"setDebugMode\",\n    value: // Setter / Getter Proxies\n    //----------------------------------------------------------------------------\n\n    /**\n     * Enables or disables debug mode in the tracker. When enabled, a black and white debug\n     * image is generated during marker detection. The debug image is useful for visualising\n     * the binarization process and choosing a threshold value.\n     * @param {boolean} mode true to enable debug mode, false to disable debug mode\n     * @see getDebugMode()\n     */\n    function setDebugMode(mode) {\n      return this.artoolkit.setDebugMode(this.id, mode);\n    }\n  }, {\n    key: \"getDebugMode\",\n    value:\n    /**\n     * Returns whether debug mode is currently enabled.\n     * @return {boolean} true when debug mode is enabled, false when debug mode is disabled\n     * @see  setDebugMode()\n     */\n    function getDebugMode() {\n      return this.artoolkit.getDebugMode(this.id);\n    }\n  }, {\n    key: \"getProcessingImage\",\n    value:\n    /**\n     * Returns the Emscripten HEAP offset to the debug processing image used by ARToolKit.\n     * @return {number} HEAP offset to the debug processing image.\n     */\n    function getProcessingImage() {\n      return this.artoolkit.getProcessingImage(this.id);\n    }\n  }, {\n    key: \"setLogLevel\",\n    value:\n    /**\n     * Sets the logging level to use by ARToolKit.\n     * @param {number} mode type for the log level.\n     */\n    function setLogLevel(mode) {\n      return this.artoolkit.setLogLevel(mode);\n    }\n  }, {\n    key: \"getLogLevel\",\n    value:\n    /**\n     * Gets the logging level used by ARToolKit.\n     * @return {number} return the log level in use.\n     */\n    function getLogLevel() {\n      return this.artoolkit.getLogLevel();\n    }\n  }, {\n    key: \"setMarkerInfoDir\",\n    value:\n    /**\n     * Sets the dir (direction) of the marker. Direction that tells about the rotation\n     * about the marker (possible values are 0, 1, 2 or 3).\n     * This parameter makes it possible to tell about the line order of the detected marker\n     * (so which line is the first one) and so find the first vertex.\n     * This is important to compute the transformation matrix in arGetTransMat().\n     * @param {number} markerIndex the index of the marker\n     * @param {number} dir direction of the marker (possible values are 0, 1, 2 or 3).\n     * @return {number} 0 (void)\n     */\n    function setMarkerInfoDir(markerIndex, dir) {\n      return this.artoolkit.setMarkerInfoDir(this.id, markerIndex, dir);\n    }\n  }, {\n    key: \"setProjectionNearPlane\",\n    value:\n    /**\n     * Sets the value of the near plane of the camera.\n     * @param {number} value the value of the near plane\n     * @return {number} 0 (void)\n     */\n    function setProjectionNearPlane(value) {\n      return this.artoolkit.setProjectionNearPlane(this.id, value);\n    }\n  }, {\n    key: \"getProjectionNearPlane\",\n    value:\n    /**\n     * Gets the value of the near plane of the camera with the give id.\n     * @return {number} the value of the near plane.\n     */\n    function getProjectionNearPlane() {\n      return this.artoolkit.getProjectionNearPlane(this.id);\n    }\n  }, {\n    key: \"setProjectionFarPlane\",\n    value:\n    /**\n     * Sets the value of the far plane of the camera.\n     * @param {number} value the value of the far plane\n     * @return {number} 0 (void)\n     */\n    function setProjectionFarPlane(value) {\n      return this.artoolkit.setProjectionFarPlane(this.id, value);\n    }\n  }, {\n    key: \"getProjectionFarPlane\",\n    value:\n    /**\n     * Gets the value of the far plane of the camera with the give id.\n     * @return {number} the value of the far plane.\n     */\n    function getProjectionFarPlane() {\n      return this.artoolkit.getProjectionFarPlane(this.id);\n    }\n  }, {\n    key: \"setThresholdMode\",\n    value:\n    /**\n     * Set the labeling threshold mode (auto/manual).\n     * @param {number} mode An integer specifying the mode. One of:\n     * AR_LABELING_THRESH_MODE_MANUAL,\n     * AR_LABELING_THRESH_MODE_AUTO_MEDIAN,\n     * AR_LABELING_THRESH_MODE_AUTO_OTSU,\n     * AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE,\n     * AR_LABELING_THRESH_MODE_AUTO_BRACKETING\n     */\n    function setThresholdMode(mode) {\n      return this.artoolkit.setThresholdMode(this.id, mode);\n    }\n  }, {\n    key: \"getThresholdMode\",\n    value:\n    /**\n     * Gets the current threshold mode used for image binarization.\n     * @return {number} The current threshold mode\n     * @see getVideoThresholdMode()\n     */\n    function getThresholdMode() {\n      return this.artoolkit.getThresholdMode(this.id);\n    }\n  }, {\n    key: \"setThreshold\",\n    value:\n    /**\n     * Set the labeling threshold.\n     * This function forces sets the threshold value.\n     * The default value is AR_DEFAULT_LABELING_THRESH which is 100.\n     * The current threshold mode is not affected by this call.\n     * Typically, this function is used when labeling threshold mode\n     * is AR_LABELING_THRESH_MODE_MANUAL.\n     * The threshold value is not relevant if threshold mode is\n     * AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE.\n     * Background: The labeling threshold is the value which\n     * the AR library uses to differentiate between black and white\n     * portions of an ARToolKit marker. Since the actual brightness,\n     * contrast, and gamma of incoming images can vary signficantly\n     * between different cameras and lighting conditions, this\n     * value typically needs to be adjusted dynamically to a\n     * suitable midpoint between the observed values for black\n     * and white portions of the markers in the image.\n     * @param {number} threshold An integer in the range [0,255] (inclusive).\n     */\n    function setThreshold(threshold) {\n      return this.artoolkit.setThreshold(this.id, threshold);\n    }\n  }, {\n    key: \"getThreshold\",\n    value:\n    /**\n     * Get the current labeling threshold.\n     * This function queries the current labeling threshold. For,\n     * AR_LABELING_THRESH_MODE_AUTO_MEDIAN, AR_LABELING_THRESH_MODE_AUTO_OTSU,\n     * and AR_LABELING_THRESH_MODE_AUTO_BRACKETING\n     * the threshold value is only valid until the next auto-update.\n     * The current threshold mode is not affected by this call.\n     * The threshold value is not relevant if threshold mode is\n     * AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE.\n     * @return {number} The current threshold value.\n     */\n    function getThreshold() {\n      return this.artoolkit.getThreshold(this.id);\n    }\n  }, {\n    key: \"setPatternDetectionMode\",\n    value:\n    /**\n     * Set the pattern detection mode\n     * The pattern detection determines the method by which ARToolKit\n     * matches detected squares in the video image to marker templates\n     * and/or IDs. ARToolKit v4.x can match against pictorial \"template\" markers,\n     * whose pattern files are created with the mk_patt utility, in either colour\n     * or mono, and additionally can match against 2D-barcode-type \"matrix\"\n     * markers, which have an embedded marker ID. Two different two-pass modes\n     * are also available, in which a matrix-detection pass is made first,\n     * followed by a template-matching pass.\n     * @param {number} mode\n     * Options for this field are:\n     * AR_TEMPLATE_MATCHING_COLOR\n     * AR_TEMPLATE_MATCHING_MONO\n     * AR_MATRIX_CODE_DETECTION\n     * AR_TEMPLATE_MATCHING_COLOR_AND_MATRIX\n     * AR_TEMPLATE_MATCHING_MONO_AND_MATRIX\n     * The default mode is AR_TEMPLATE_MATCHING_COLOR.\n     */\n    function setPatternDetectionMode(mode) {\n      return this.artoolkit.setPatternDetectionMode(this.id, mode);\n    }\n  }, {\n    key: \"getPatternDetectionMode\",\n    value:\n    /**\n     * Returns the current pattern detection mode.\n     * @return {number} The current pattern detection mode.\n     */\n    function getPatternDetectionMode() {\n      return this.artoolkit.getPatternDetectionMode(this.id);\n    }\n  }, {\n    key: \"setMatrixCodeType\",\n    value:\n    /**\n     * Set the size and ECC algorithm to be used for matrix code (2D barcode) marker detection.\n     * When matrix-code (2D barcode) marker detection is enabled (see arSetPatternDetectionMode)\n     * then the size of the barcode pattern and the type of error checking and correction (ECC)\n     * with which the markers were produced can be set via this function.\n     * This setting is global to a given ARHandle; It is not possible to have two different matrix\n     * code types in use at once.\n     * @param type The type of matrix code (2D barcode) in use. Options include:\n     * AR_MATRIX_CODE_3x3\n     * AR_MATRIX_CODE_3x3_HAMMING63\n     * AR_MATRIX_CODE_3x3_PARITY65\n     * AR_MATRIX_CODE_4x4\n     * AR_MATRIX_CODE_4x4_BCH_13_9_3\n     * AR_MATRIX_CODE_4x4_BCH_13_5_5\n     * The default mode is AR_MATRIX_CODE_3x3.\n     */\n    function setMatrixCodeType(type) {\n      return this.artoolkit.setMatrixCodeType(this.id, type);\n    }\n  }, {\n    key: \"getMatrixCodeType\",\n    value:\n    /**\n     * Returns the current matrix code (2D barcode) marker detection type.\n     * @return {number} The current matrix code type.\n     */\n    function getMatrixCodeType() {\n      return this.artoolkit.getMatrixCodeType(this.id);\n    }\n  }, {\n    key: \"setLabelingMode\",\n    value:\n    /**\n     * Select between detection of black markers and white markers.\n     * ARToolKit's labelling algorithm can work with both black-bordered\n     * markers on a white background (AR_LABELING_BLACK_REGION) or\n     * white-bordered markers on a black background (AR_LABELING_WHITE_REGION).\n     * This function allows you to specify the type of markers to look for.\n     * Note that this does not affect the pattern-detection algorith\n     * which works on the interior of the marker.\n     * @param {number} mode\n     * Options for this field are:\n     * AR_LABELING_WHITE_REGION\n     * AR_LABELING_BLACK_REGION\n     * The default mode is AR_LABELING_BLACK_REGION.\n     */\n    function setLabelingMode(mode) {\n      return this.artoolkit.setLabelingMode(this.id, mode);\n    }\n  }, {\n    key: \"getLabelingMode\",\n    value:\n    /**\n     * Enquire whether detection is looking for black markers or white markers.\n     * See discussion for setLabelingMode.\n     * @result {number} The current labeling mode.\n     */\n    function getLabelingMode() {\n      return this.artoolkit.getLabelingMode(this.id);\n    }\n  }, {\n    key: \"setPattRatio\",\n    value:\n    /**\n     * Set the width/height of the marker pattern space, as a proportion of marker width/height.\n     * @param {number} pattRatio The the width/height of the marker pattern space, as a proportion of marker\n     * width/height. To set the default, pass AR_PATT_RATIO.\n     * If compatibility with ARToolKit verions 1.0 through 4.4 is required, this value\n     * must be 0.5.\n     */\n    function setPattRatio(pattRatio) {\n      return this.artoolkit.setPattRatio(this.id, pattRatio);\n    }\n  }, {\n    key: \"getPattRatio\",\n    value:\n    /**\n     * Returns the current ratio of the marker pattern to the total marker size.\n     * @return {number} The current pattern ratio.\n     */\n    function getPattRatio() {\n      return this.artoolkit.getPattRatio(this.id);\n    }\n  }, {\n    key: \"setImageProcMode\",\n    value:\n    /**\n     * Set the image processing mode.\n     * When the image processing mode is AR_IMAGE_PROC_FRAME_IMAGE,\n     * ARToolKit processes all pixels in each incoming image\n     * to locate markers. When the mode is AR_IMAGE_PROC_FIELD_IMAGE,\n     * ARToolKit processes pixels in only every second pixel row and\n     * column. This is useful both for handling images from interlaced\n     * video sources (where alternate lines are assembled from alternate\n     * fields and thus have one field time-difference, resulting in a\n     * \"comb\" effect) such as Digital Video cameras.\n     * The effective reduction by 75% in the pixels processed also\n     * has utility in accelerating tracking by effectively reducing\n     * the image size to one quarter size, at the cost of pose accuraccy.\n     * @param {number} mode\n     * Options for this field are:\n     * AR_IMAGE_PROC_FRAME_IMAGE\n     * AR_IMAGE_PROC_FIELD_IMAGE\n     * The default mode is AR_IMAGE_PROC_FRAME_IMAGE.\n     */\n    function setImageProcMode(mode) {\n      return this.artoolkit.setImageProcMode(this.id, mode);\n    }\n  }, {\n    key: \"getImageProcMode\",\n    value:\n    /**\n     * Get the image processing mode.\n     * See arSetImageProcMode() for a complete description.\n     * @return {number} The current image processing mode.\n     */\n    function getImageProcMode() {\n      return this.artoolkit.getImageProcMode(this.id);\n    }\n  }, {\n    key: \"_initialize\",\n    value: // private accessors\n    //----------------------------------------------------------------------------\n\n    /**\n     * This function init the ArController with the necessary parmeters and variables.\n     * Don't call directly this but instead instantiate a new ArController.\n     * @return {ARController} The initialized ARController instance\n     */\n    function () {\n      var _initialize2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4() {\n        var _this = this;\n\n        var params;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return new _ARToolkit__WEBPACK_IMPORTED_MODULE_5__[\"default\"]().init();\n\n              case 2:\n                this.artoolkit = _context4.sent;\n                console.log('[ARController]', 'ARToolkit initialized'); // load the camera\n\n                _context4.next = 6;\n                return this.artoolkit.loadCamera(this.cameraParam);\n\n              case 6:\n                this.cameraId = _context4.sent;\n                console.log('[ARController]', 'Camera params loaded with ID', this.cameraId); // setup\n\n                this.id = this.artoolkit.setup(this.width, this.height, this.cameraId);\n                console.log('[ARController]', 'Got ID from setup', this.id);\n\n                this._initNFT();\n\n                params = artoolkit.frameMalloc;\n                this.framepointer = params.framepointer;\n                this.framesize = params.framesize;\n                this.videoLumaPointer = params.videoLumaPointer;\n                this.dataHeap = new Uint8Array(this.artoolkit.instance.HEAPU8.buffer, this.framepointer, this.framesize);\n                this.videoLuma = new Uint8Array(this.artoolkit.instance.HEAPU8.buffer, this.videoLumaPointer, this.framesize / 4);\n                this.camera_mat = new Float64Array(this.artoolkit.instance.HEAPU8.buffer, params.camera, 16);\n                this.marker_transform_mat = new Float64Array(this.artoolkit.instance.HEAPU8.buffer, params.transform, 12);\n                this.setProjectionNearPlane(0.1);\n                this.setProjectionFarPlane(1000);\n                setTimeout(function () {\n                  _this.dispatchEvent({\n                    name: 'load',\n                    target: _this\n                  });\n                }, 1);\n                return _context4.abrupt(\"return\", this);\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _initialize() {\n        return _initialize2.apply(this, arguments);\n      }\n\n      return _initialize;\n    }()\n    /**\n     * Init the necessary kpm handle for NFT and the settings for the CPU.\n     * @return {number} 0 (void)\n     */\n\n  }, {\n    key: \"_initNFT\",\n    value: function _initNFT() {\n      this.artoolkit.setupAR2(this.id);\n    }\n  }, {\n    key: \"_copyImageToHeap\",\n    value:\n    /**\n     * Copy the Image data to the HEAP for the debugSetup function.\n     * @return {number} 0 (void)\n     */\n    function _copyImageToHeap(sourceImage) {\n      if (!sourceImage) {\n        // default to preloaded image\n        sourceImage = this.image;\n      } // this is of type Uint8ClampedArray:\n      // The Uint8ClampedArray typed array represents an array of 8-bit unsigned\n      // integers clamped to 0-255\n      // @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\n\n\n      var data;\n\n      if (sourceImage.data) {\n        // directly use source image\n        data = sourceImage.data;\n      } else {\n        this.ctx.save();\n\n        if (this.orientation === 'portrait') {\n          // console.log('Using orientation: ', this.orientation);\n          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); //portrait\n\n          var scale = this.canvas.height / this.canvas.width;\n          var scaledHeight = this.canvas.width * scale;\n          var scaledWidth = this.canvas.height * scale;\n          var marginLeft = (this.canvas.width - scaledWidth) / 2;\n          this.ctx.drawImage(image, marginLeft, 0, scaledWidth, scaledHeight); // draw video\n        } else {\n          // console.log('Using orientation: ', this.orientation);\n          this.ctx.drawImage(sourceImage, 0, 0, this.canvas.width, this.canvas.height); // draw video\n        }\n\n        this.ctx.restore();\n        var imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n        data = imageData.data;\n      } // Here we have access to the unmodified video image. We now need to add the videoLuma chanel to be able to serve the underlying ARTK API\n\n\n      if (this.videoLuma) {\n        var q = 0; // Create luma from video data assuming Pixelformat AR_PIXEL_FORMAT_RGBA\n        // see (ARToolKitJS.cpp L: 43)\n\n        for (var p = 0; p < this.videoSize; p++) {\n          var r = data[q + 0],\n              g = data[q + 1],\n              b = data[q + 2]; // @see https://stackoverflow.com/a/596241/5843642\n\n          this.videoLuma[p] = r + r + r + b + g + g + g + g >> 3;\n          q += 4;\n        }\n      }\n\n      if (this.dataHeap) {\n        this.dataHeap.set(data);\n        return true;\n      }\n\n      return false;\n    }\n  }], [{\n    key: \"initWithDimensions\",\n    value: // static initializers\n    //----------------------------------------------------------------------------\n    function () {\n      var _initWithDimensions = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee5(width, height, cameraParam, options) {\n        var controller;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // directly init with given width / height\n                controller = new ARController(width, height, cameraParam, options);\n                _context5.next = 3;\n                return controller._initialize();\n\n              case 3:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function initWithDimensions(_x4, _x5, _x6, _x7) {\n        return _initWithDimensions.apply(this, arguments);\n      }\n\n      return initWithDimensions;\n    }()\n  }, {\n    key: \"initWithImage\",\n    value: function () {\n      var _initWithImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee6(image, cameraParam, options) {\n        var width, height, controller;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // get width / height from image / video\n                width = image.videoWidth || image.width;\n                height = image.videoHeight || image.height;\n                _context6.next = 4;\n                return ARController.initWithDimensions(width, height, cameraParam, options);\n\n              case 4:\n                controller = _context6.sent;\n                controller.image = image;\n                return _context6.abrupt(\"return\", controller);\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function initWithImage(_x8, _x9, _x10) {\n        return _initWithImage.apply(this, arguments);\n      }\n\n      return initWithImage;\n    }()\n  }]);\n\n  return ARController;\n}();\n\n\n\n//# sourceURL=webpack://ARToolkit/./src/ARController.js?");

/***/ }),

/***/ "./src/ARToolkit.js":
/*!**************************!*\
  !*** ./src/ARToolkit.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ARToolkit)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ModuleLoader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ModuleLoader */ \"./src/ModuleLoader.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utils */ \"./src/Utils.js\");\n\n\n\n\n\n\nvar UNKNOWN_MARKER = -1;\nvar PATTERN_MARKER = 0;\nvar BARCODE_MARKER = 1;\nvar NFT_MARKER = 2;\n\nvar ARToolkit = /*#__PURE__*/function () {\n  // construction\n  function ARToolkit() {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, ARToolkit);\n\n    // reference to WASM module\n    this.instance;\n    this.markerCount = 0;\n    this.multiMarkerCount = 0;\n    this.cameraCount = 0;\n    this.version = '0.1.2';\n    console.info('ARToolkit ', this.version);\n  } //----------------------------------------------------------------------------\n  // initialization\n\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ARToolkit, [{\n    key: \"init\",\n    value: function () {\n      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee() {\n        var runtime, scope;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _ModuleLoader__WEBPACK_IMPORTED_MODULE_4__[\"default\"].init();\n\n              case 2:\n                runtime = _context.sent;\n                this.instance = runtime.instance;\n\n                this._decorate(); // we're committing a cardinal sin here by exporting the instance into\n                // the global namespace. all blame goes to the person who created that CPP\n                // wrapper ARToolKitJS.cpp and introduced a global \"artoolkit\" variable.\n\n\n                scope = typeof window !== 'undefined' ? window : __webpack_require__.g;\n                scope['artoolkit'] = this;\n                return _context.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"_decorate\",\n    value: function _decorate() {\n      var _this = this;\n\n      // add delegate methods\n      ['setup', 'teardown', 'setupAR2', 'setLogLevel', 'getLogLevel', 'setDebugMode', 'getDebugMode', 'getProcessingImage', 'setMarkerInfoDir', 'setMarkerInfoVertex', 'getTransMatSquare', 'getTransMatSquareCont', 'getTransMatMultiSquare', 'getTransMatMultiSquareRobust', 'getMultiMarkerNum', 'getMultiMarkerCount', 'detectMarker', 'getMarkerNum', 'detectNFTMarker', 'getNFTMarker', 'getMarker', 'getMultiEachMarker', 'setProjectionNearPlane', 'getProjectionNearPlane', 'setProjectionFarPlane', 'getProjectionFarPlane', 'setThresholdMode', 'getThresholdMode', 'setThreshold', 'getThreshold', 'setPatternDetectionMode', 'getPatternDetectionMode', 'setMatrixCodeType', 'getMatrixCodeType', 'setLabelingMode', 'getLabelingMode', 'setPattRatio', 'getPattRatio', 'setImageProcMode', 'getImageProcMode'].forEach(function (method) {\n        _this[method] = _this.instance[method];\n      }); // expose constants\n\n      for (var co in this.instance) {\n        if (co.match(/^AR/)) {\n          this[co] = this.instance[co];\n        }\n      }\n    } //----------------------------------------------------------------------------\n    // public accessors\n\n  }, {\n    key: \"loadCamera\",\n    value: function () {\n      var _loadCamera = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee2(urlOrData) {\n        var target, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                target = '/camera_param_' + this.cameraCount++;\n\n                if (!(urlOrData instanceof Uint8Array)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                // assume preloaded camera params\n                data = urlOrData;\n                _context2.next = 14;\n                break;\n\n              case 5:\n                _context2.prev = 5;\n                _context2.next = 8;\n                return _Utils__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fetchRemoteData(urlOrData);\n\n              case 8:\n                data = _context2.sent;\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](5);\n                throw _context2.t0;\n\n              case 14:\n                this._storeDataFile(data, target); // return the internal marker ID\n\n\n                return _context2.abrupt(\"return\", this.instance._loadCamera(target));\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 11]]);\n      }));\n\n      function loadCamera(_x) {\n        return _loadCamera.apply(this, arguments);\n      }\n\n      return loadCamera;\n    }()\n  }, {\n    key: \"addMarker\",\n    value: function () {\n      var _addMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee3(arId, urlOrData) {\n        var target, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                target = '/marker_' + this.markerCount++;\n\n                if (!(urlOrData.indexOf(\"\\n\") !== -1)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                // assume text from a .patt file\n                data = _Utils__WEBPACK_IMPORTED_MODULE_5__[\"default\"].string2Uint8Data(urlOrData);\n                _context3.next = 14;\n                break;\n\n              case 5:\n                _context3.prev = 5;\n                _context3.next = 8;\n                return _Utils__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fetchRemoteData(urlOrData);\n\n              case 8:\n                data = _context3.sent;\n                _context3.next = 14;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](5);\n                throw _context3.t0;\n\n              case 14:\n                this._storeDataFile(data, target); // return the internal marker ID\n\n\n                return _context3.abrupt(\"return\", this.instance._addMarker(arId, target));\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 11]]);\n      }));\n\n      function addMarker(_x2, _x3) {\n        return _addMarker.apply(this, arguments);\n      }\n\n      return addMarker;\n    }()\n  }, {\n    key: \"addMultiMarker\",\n    value: function () {\n      var _addMultiMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee5(arId, url) {\n        var target, data, files, storeMarker, promises, markerId, markerNum;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                target = '/multi_marker_' + this.multiMarkerCount++;\n                _context5.next = 3;\n                return _Utils__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fetchRemoteData(url);\n\n              case 3:\n                data = _context5.sent;\n                files = _Utils__WEBPACK_IMPORTED_MODULE_5__[\"default\"].parseMultiFile(data);\n\n                storeMarker = /*#__PURE__*/function () {\n                  var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee4(file) {\n                    var markerUrl, data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            markerUrl = new URL(file, url).toString();\n                            _context4.next = 3;\n                            return _Utils__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fetchRemoteData(markerUrl);\n\n                          case 3:\n                            data = _context4.sent;\n\n                            this._storeDataFile(data, file);\n\n                          case 5:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, this);\n                  }));\n\n                  return function storeMarker(_x6) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                promises = files.map(storeMarker, this);\n                _context5.next = 9;\n                return Promise.all(promises);\n\n              case 9:\n                markerId = this.instance._addMultiMarker(arId, target);\n                markerNum = this.instance.getMultiMarkerNum(arId, markerId);\n                return _context5.abrupt(\"return\", [markerId, markerNum]);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function addMultiMarker(_x4, _x5) {\n        return _addMultiMarker.apply(this, arguments);\n      }\n\n      return addMultiMarker;\n    }()\n  }, {\n    key: \"addNFTMarker\",\n    value: function () {\n      var _addNFTMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee7(arId, url) {\n        var targetPrefix, extensions, storeMarker, promises;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                // url doesn't need to be a valid url. Extensions to make it valid will be added here\n                targetPrefix = '/markerNFT_' + this.markerCount++;\n                extensions = ['fset', 'iset', 'fset3'];\n\n                storeMarker = /*#__PURE__*/function () {\n                  var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee6(ext) {\n                    var fullUrl, target, data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            fullUrl = url + '.' + ext;\n                            target = targetPrefix + '.' + ext;\n                            _context6.next = 4;\n                            return _Utils__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fetchRemoteData(fullUrl);\n\n                          case 4:\n                            data = _context6.sent;\n\n                            this._storeDataFile(data, target);\n\n                          case 6:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6, this);\n                  }));\n\n                  return function storeMarker(_x9) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n\n                promises = extensions.map(storeMarker, this);\n                _context7.next = 6;\n                return Promise.all(promises);\n\n              case 6:\n                return _context7.abrupt(\"return\", this.instance._addNFTMarker(arId, targetPrefix));\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function addNFTMarker(_x7, _x8) {\n        return _addNFTMarker.apply(this, arguments);\n      }\n\n      return addNFTMarker;\n    }() //----------------------------------------------------------------------------\n    // implementation\n\n  }, {\n    key: \"_storeDataFile\",\n    value: function _storeDataFile(data, target) {\n      // FS is provided by emscripten\n      // Note: valid data must be in binary format encoded as Uint8Array\n      this.instance.FS.writeFile(target, data, {\n        encoding: 'binary'\n      });\n    } //----------------------------------------------------------------------------\n\n  }], [{\n    key: \"UNKNOWN_MARKER\",\n    get: function get() {\n      return UNKNOWN_MARKER;\n    }\n  }, {\n    key: \"PATTERN_MARKER\",\n    get: function get() {\n      return PATTERN_MARKER;\n    }\n  }, {\n    key: \"BARCODE_MARKER\",\n    get: function get() {\n      return BARCODE_MARKER;\n    }\n  }, {\n    key: \"NFT_MARKER\",\n    get: function get() {\n      return NFT_MARKER;\n    }\n  }]);\n\n  return ARToolkit;\n}();\n\n\n\n//# sourceURL=webpack://ARToolkit/./src/ARToolkit.js?");

/***/ }),

/***/ "./src/ModuleLoader.js":
/*!*****************************!*\
  !*** ./src/ModuleLoader.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _artoolkit5_artoolkit_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./artoolkit5/artoolkit_wasm */ \"./src/artoolkit5/artoolkit_wasm.js\");\n\nvar ModuleLoader = {\n  init: function init() {\n    return new Promise(function (resolve) {\n      (0,_artoolkit5_artoolkit_wasm__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        onRuntimeInitialized: function onRuntimeInitialized() {\n          // need to wrap this in an object\n          // otherwise it will cause Chrome to crash\n          resolve({\n            instance: this\n          });\n        }\n      });\n    });\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModuleLoader);\n\n//# sourceURL=webpack://ARToolkit/./src/ModuleLoader.js?");

/***/ }),

/***/ "./src/Utils.js":
/*!**********************!*\
  !*** ./src/Utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Utils)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Utils);\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Utils, null, [{\n    key: \"fetchRemoteData\",\n    value: function () {\n      var _fetchRemoteData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee(url) {\n        var response;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {\n                  responseType: 'arraybuffer'\n                });\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", new Uint8Array(response.data));\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                throw _context.t0;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      function fetchRemoteData(_x) {\n        return _fetchRemoteData.apply(this, arguments);\n      }\n\n      return fetchRemoteData;\n    }()\n  }, {\n    key: \"string2Uint8Data\",\n    value: function string2Uint8Data(string) {\n      var data = new Uint8Array(string.length);\n\n      for (var i = 0; i < data.length; i++) {\n        data[i] = string.charCodeAt(i) & 0xff;\n      }\n\n      return data;\n    }\n  }, {\n    key: \"uint8Data2String\",\n    value: function uint8Data2String(uint8Data) {\n      return String.fromCharCode.apply(String, uint8Data);\n    }\n  }, {\n    key: \"parseMultiFile\",\n    value: function parseMultiFile(bytes) {\n      // Parse a multi-marker file to an array of file-paths\n      var str = Utils.uint8Data2String(bytes);\n      var lines = str.split('\\n');\n      var files = [];\n      var state = 0; // 0 - read,\n\n      var markers = 0;\n      lines.forEach(function (line) {\n        line = line.trim();\n        if (!line || line.startsWith('#')) return; // FIXME: Should probably be `if (line.indexOf('#') === 0) { return; }`\n\n        switch (state) {\n          case 0:\n            markers = +line;\n            state = 1;\n            return;\n\n          case 1:\n            // filename or barcode\n            if (!line.match(/^\\d+$/)) {\n              files.push(line);\n            }\n\n          case 2: // width\n\n          case 3: // matrices\n\n          case 4:\n            state++;\n            return;\n\n          case 5:\n            state = 1;\n            return;\n        }\n      });\n      return files;\n    }\n  }]);\n\n  return Utils;\n}();\n\n\n\n//# sourceURL=webpack://ARToolkit/./src/Utils.js?");

/***/ }),

/***/ "./src/artoolkit5/artoolkit_wasm.js":
/*!******************************************!*\
  !*** ./src/artoolkit5/artoolkit_wasm.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("var __filename = \"/index.js\";\nvar __dirname = \"/\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/esm/typeof.js\");\nvar Module=function(){var _scriptDir=typeof document!=='undefined'&&document.currentScript?document.currentScript.src:undefined;if(true)_scriptDir=_scriptDir||__filename;return function(Module){Module=Module||{};var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject;});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key];}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function quit_(status,toThrow){throw toThrow;};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=(typeof window===\"undefined\"?\"undefined\":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(window))===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=(typeof process===\"undefined\"?\"undefined\":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(process))===\"object\"&&(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(process.versions)===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory);}return scriptDirectory+path;}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=(__webpack_require__(/*! path */ \"?8c11\").dirname)(scriptDirectory)+\"/\";}else{scriptDirectory=__dirname+\"/\";}read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString();}if(!nodeFS)nodeFS=__webpack_require__(/*! fs */ \"?8f32\");if(!nodePath)nodePath=__webpack_require__(/*! path */ \"?8c11\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\");};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret);}assert(ret.buffer);return ret;};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\");}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex;}});process[\"on\"](\"unhandledRejection\",abort);quit_=function quit_(status){process[\"exit\"](status);};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\";};}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data);}return read(f);};}readBinary=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data;}if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f));}data=read(f,\"binary\");assert((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data)===\"object\");return data;};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs;}else if(typeof arguments!=\"undefined\"){arguments_=arguments;}if(typeof quit===\"function\"){quit_=function quit_(status){quit(status);};}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print;}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href;}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src;}if(_scriptDir){scriptDirectory=_scriptDir;}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1);}else{scriptDirectory=\"\";}{read_=function read_(url){try{var xhr=new XMLHttpRequest();xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText;}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data);}throw err;}};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){try{var xhr=new XMLHttpRequest();xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response);}catch(err){var data=tryParseAsDataURI(url);if(data){return data;}throw err;}};}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest();xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return;}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return;}onerror();};xhr.onerror=onerror;xhr.send(null);};}setWindowTitle=function setWindowTitle(title){document.title=title;};}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key];}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var STACK_ALIGN=16;function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;return Math.ceil(size/factor)*factor;}var tempRet0=0;var setTempRet0=function setTempRet0(value){tempRet0=value;};var getTempRet0=function getTempRet0(){return tempRet0;};var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if((typeof WebAssembly===\"undefined\"?\"undefined\":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(WebAssembly))!==\"object\"){abort(\"no native wasm support detected\");}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text);}}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx)){++endPtr;}if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr));}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue;}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue;}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2;}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63;}if(u0<65536){str+=String.fromCharCode(u0);}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}}}return str;}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\";}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023;}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u;}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63;}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}}heap[outIdx]=0;return outIdx-startIdx;}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite);}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4;}return len;}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx]){++idx;}endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr));}else{var str=\"\";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit);}return str;}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647;}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2;}HEAP16[outPtr>>1]=0;return outPtr-startPtr;}function lengthBytesUTF16(str){return str.length*2;}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str=\"\";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}else{str+=String.fromCharCode(utf32);}}return str;}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647;}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023;}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break;}HEAP32[outPtr>>2]=0;return outPtr-startPtr;}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4;}return len;}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret;}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer);}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i);}if(!dontAddNull)HEAP8[buffer>>0]=0;}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple;}return x;}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf);}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||268435456;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift());}}callRuntimeCallbacks(__ATPRERUN__);}function initRuntime(){runtimeInitialized=true;if(!Module[\"noFSInit\"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__);}function exitRuntime(){runtimeExited=true;}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift());}}callRuntimeCallbacks(__ATPOSTRUN__);}function addOnPreRun(cb){__ATPRERUN__.unshift(cb);}function addOnInit(cb){__ATINIT__.unshift(cb);}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb);}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id;}function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies);}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies);}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null;}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback();}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what);}what+=\"\";err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e;}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix);}function isFileURI(filename){return filename.startsWith(\"file://\");}var wasmBinaryFile=\"data:application/octet-stream;base64,AGFzbQEAAAAB4gVbYAF/AX9gAX8AYAJ/fwBgAn9/AX9gA39/fwF/YAV/f39/fwBgBH9/f38AYAN/f38AYAZ/f39/f38Bf2AFf39/f38Bf2AEf39/fwF/YAZ/f39/f38AYAd/f39/f39/AGAIf39/f39/f38Bf2AAAX9gB39/f39/f38Bf2AAAGABfQF9YAV/fn5+fgBgA39+fwF+YAJ/fABgBX9/f39+AX9gAn19AX1gCn9/f39/f39/f38Bf2AEf39/fwF+YAN/f38BfWABfwF8YAh/f39/f39/fwBgA39/fQBgBH9+fn8AYAd/f39/f35+AX9gBn9/f39+fgF/YAp/f39/f39/f39/AGAPf39/f39/f39/f39/f39/AGAFf39+f38AYAV/f319fwBgA39/fABgAn99AGAJf39/f39/f39/AX9gC39/f39/f39/f39/AX9gDH9/f39/f39/f39/fwF/YAV/f39/fAF/YAZ/f319f38Bf2AFf319f38Bf2AGf3x/f39/AX9gAX8BfWABfAF9YAJ/fwF9YAJ/fwF8YAZ/f39/f38BfGACfH8BfGAGf39/f399AGAEf39/fQBgBX9/f319AGADf39+AGAEf39+fgBgAn9+AGADf35/AGADf35+AGAGf3x8f39/AGABfQF/YAx/f39/f39/f39/fH8Bf2AOf39/f39/f39/f3x/f38Bf2AHf39/f3x/fwF/YAN/f30Bf2AFf399fX8Bf2AEf35/fwF/YAZ/fX19fX8Bf2ACfn8Bf2ADfn5+AX9gBH5+fn4Bf2ACfX8Bf2ACfH8Bf2ABfwF+YAJ/fwF+YAR/f39+AX5gB39/f39/f38BfWAHf39/f39/fQF9YAN/f30BfWADf319AX1gBX99fX9/AX1gAn5+AX1gA319fQF9YAR9fX19AX1gA39/fwF8YAR/f3x/AXxgAn5+AXxgAnx8AXxgA3x8fwF8YAN8fHwBfGAGfHx8fHx8AXwC9wEpAWEBYQAQAWEBYgABAWEBYwABAWEBZAAOAWEBZQAHAWEBZgALAWEBZwAFAWEBaAAHAWEBaQAAAWEBagACAWEBawAEAWEBbAACAWEBbQAFAWEBbgAHAWEBbwAKAWEBcAAEAWEBcQAAAWEBcgAHAWEBcwACAWEBdAAkAWEBdQADAWEBdgAAAWEBdwADAWEBeAAEAWEB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IAAoAgwhBwJAAkACQAJAAkACQAJAAkACQAJAAkACfyABi0MAAABPXQRAIAGoDAELQYCAgIB4CwJ/IAGOIgmLQwAAAE9dBEAgCagMAQtBgICAgHgLIgBGBEACfyACi0MAAABPXQRAIAKoDAELQYCAgIB4CyEGIAYCfyACjiIJi0MAAABPXQRAIAmoDAELQYCAgIB4CyIDRw0BIANBAEggAyAET3INAiAEIANBAWoiBk0NAyAAQQBIIAAgBU9yDQQgBSAAQQFqIgRNDQUgBLIgAZMiCiAGsiACkyILlCIJQwAAAABgRSAJu0RxrIvbaADwP2VFcg0GIAEgALKTIgwgC5QiAUMAAAAAYEUgAbtEcayL22gA8D9lRXINByAKIAIgA7KTIgqUIgJDAAAAAGBFIAK7RHGsi9toAPA/ZUVyDQggDCAKlCIKQwAAAABgRSAKu0RxrIvbaADwP2VFcg0JIAogAiAJIAGSkpK7RHGsi9toAPA/ZUUNCiAJIAggAyAHbGoiAyAAQQJ0IgBqKgIAlCABIAMgBEECdCIFaioCAJSSIAIgACADIAdqIgBqKgIAlJIgCiAAIAVqKgIAlJIMDAtB4KkEQeTfARApQavgARApQaImEClBxQAQLEG6KxApQb/hARApEC0MCgtB4KkEQf7hARApQavgARApQaImEClBxgAQLEG6KxApQb/hARApEC0MCQtB4KkEQbLiARApQavgARApQaImEClBzwAQLEG6KxApQeDiARApEC0MCAtB4KkEQfHiARApQavgARApQaImEClB0AAQLEG6KxApQa3jARApEC0MBwtB4KkEQcXjARApQavgARApQaImEClB0QAQLEG6KxApQfLjARApEC0MBgtB4KkEQYPkARApQavgARApQaImEClB0gAQLEG6KxApQb7kARApEC0MBQtB4KkEQdbkARApQavgARApQaImEClB3gAQLEG6KxApQYXlARApEC0MBAtB4KkEQZLlARApQavgARApQaImEClB3wAQLEG6KxApQYXlARApEC0MAwtB4KkEQcHlARApQavgARApQaImEClB4AAQLEG6KxApQYXlARApEC0MAgtB4KkEQfDlARApQavgARApQaImEClB4QAQLEG6KxApQYXlARApEC0MAQtB4KkEQZ/mARApQavgARApQaImEClB4gAQLEG6KxApQYXlARApEC0LEAAACwsHACAAQQRqCw0AIAAoAgAgAUEDdGoLDQAgACgCACABQQV0agspAQF/IwBBEGsiAiQAIAJBCGogACABEPkFEHQoAgAhACACQRBqJAAgAAtFACABIAAoAghPBEBB4KkEQZDdARApQa3eARApQaImEClB/AAQLEG6KxApQbXfARApEC0QAAALIAAoAhggACgCDCABbGoLNQEBfyMAQRBrIgIkACACIAAoAgA2AgwgACABKAIANgIAIAEgAkEMaigCADYCACACQRBqJAALCQAgACABEMEBC5kGAgp/AX0jAEEgayIEJAAgBCAAENMCNgIQIARBGGohCSMAQSBrIgEkAEGckgQQNBogACgCACEFQZySBBCBASEDIAFBADoAHwJAAkAgA0UNAEGckgQgBSADEFQiBhAzKAIAIgJFDQADQCACKAIAIgJFDQEgBSACKAIERwRAIAIoAgQgAxBUIAZHDQILQZySBBBVIAJBCGogABDIAUUNAAsMAQsjAEEQayIIJABBnJIEECshACABQRBqQfADEEsgCEEIaiAAQQAQqgIQqQIiAigCAEEIaiEAIAQoAhAhCiMAQRBrIgckACAHIAo2AgggACAHKAIIKAIANgIAIABBCGpBAEHgAxAyIgBCADcCzAEgAEIANwPAASAAQv7///8PNwPwASAAQgA3AtQBIABCADcC3AEgAEGgAmoQiAIaIABCgICAgICA0MfAADcDwAIgAEKthvHYrtyNjT83A7gCIABByAJqEE8aIABBAjYC2AMgAEEANgLUAiAHQRBqJAAgAhBCQQE6AAQgAigCACAFNgIEIAIoAgBBADYCACAIQRBqJAACQEGckgQCf0GckgQQNCgCAEEBarNBnJIEEFUqAgAgA7OUXkEBIAMbBEAgASADENwBQQFzIANBAXRyNgIMIAECf0GckgQQNCgCAEEBarNBnJIEEFUqAgCVjSILQwAAgE9dIAtDAAAAAGBxBEAgC6kMAQtBAAs2AghBnJIEIAFBDGogAUEIahB1KAIAELEFIAVBnJIEEIEBIgMQVCEGCyAGCxAzKAIAIgBFBEAgASgCEEGkkgQoAgA2AgBBpJIEIAEoAhA2AgBBnJIEIAYQM0GkkgQ2AgAgASgCECgCAEUNASABKAIQIQBBnJIEIAEoAhAoAgAoAgQgAxBUEDMgADYCAAwBCyABKAIQIAAoAgA2AgAgACABKAIQNgIACyABQRBqELQBIQJBnJIEEDQiACAAKAIAQQFqNgIAIAFBAToAHyABQRBqELAFCyAJIAFBEGogAhB0IAFBH2oQqwIgAUEgaiQAIARBGGoQZiEAIARBIGokACAAQQhqC68BAgF+A38CQAJAIAApA3AiAVBFBEAgACkDeCABWQ0BCyAAEIADIgRBf0oNAQsgAEEANgJoQX8PCyAAAn8gACgCCCICIAApA3AiAVANABogAiABIAApA3hCf4V8IgEgAiAAKAIEIgNrrFkNABogAyABp2oLNgJoIAAoAgQhAyACBEAgACAAKQN4IAIgA2tBAWqsfDcDeAsgA0EBayIALQAAIARHBEAgACAEOgAACyAECzMBAX8gAEEBIAAbIQACQANAIAAQMCIBDQFBrL8EKAIAIgEEQCABERAADAELCxAAAAsgAQvZAQEGfyABEMMEIQMjAEEQayIFJAACQCADIAAQpgQiAk0EQCAAEDgiBiECIAMEfwJAIAIgASIEa0ECdSADIgFJBEADQCACIAFBAWsiAUECdCIHaiAEIAdqKAIANgIAIAENAAwCCwALIAFFDQADQCACIAQoAgA2AgAgAkEEaiECIARBBGohBCABQQFrIgENAAsLQQAFIAILGiAFQQA2AgwgBiADQQJ0aiAFQQxqEHggACADEJECDAELIAAgAiADIAJrIAAQLiIAQQAgACADIAEQ3QYLIAVBEGokAAt2AQR/IAEQfSECIwBBEGsiBCQAAkAgAiAAEE4iA00EQCAAEDgiAyEFIAIEQCAFIAEgAhDjAgsgBEEAOgAPIAIgA2ogBEEPahCMASAAIAIQkQIMAQsgACADIAIgA2sgABAuIgBBACAAIAIgARDgBgsgBEEQaiQACxsBAX9BCiEBIAAQjQEEfyAAEJICQQFrBUEKCwsJACAAEJ4CIAALpwIBBH8CQEHQsAQtAABBAXENAEHQsAQQaUUNACMAQSBrIgIkAAJAQQAQxgQEQANAQf////8HIAF2QQFxBEAgAUECdCABQdW+AxDHBDYCAAsgAUEBaiIBQQZHDQALDAELA0AgAkEIaiABQQJ0agJ/QQEgAXRB/////wdxIgBBAXJFBEAgAUECdCgCAAwBCyABQdW+A0GbngMgABsQxwQLIgA2AgAgAyAAQQBHaiEDIAFBAWoiAUEGRw0AC0GAnQMhAAJAAkAgAw4CAgABCyACKAIIQeScA0cNAEGYnQMhAAwBC0EYEDAiAEUNACAAIAIpAwg3AgAgACACKQMYNwIQIAAgAikDEDcCCAsgAkEgaiQAQcywBCAANgIAQdCwBBBoC0HMsAQoAgALYAEBfyMAQRBrIgUkACAAIAMgBBDsASEAIAVBDGogBUEIaiABIAIgAxCFBCAFKgIIIQEgACAFKgIMIAAoAgRBAmuzEOACIAEgACgCCEECa7MQ4AIQQSEBIAVBEGokACABCwkAIAAgABDIBQtGACAAIAEqAgggASoCACACKgIAlCABKgIEIAIqAgSUkpI4AgAgACABKgIUIAEqAgwgAioCAJQgASoCECACKgIElJKSOAIECygBAX8gASABQQFrIgJxRQRAIAAgAnEPCyAAIAFPBH8gACABcAUgAAsLBwAgAEEQagueCwIFfw9+IwBB4ABrIgUkACACQiCGIAFCIIiEIQ8gBEIvhiADQhGIhCEMIARC////////P4MiDUIPhiADQjGIhCEQIAIgBIVCgICAgICAgICAf4MhCiACQv///////z+DIgtCIIghESANQhGIIRIgBEIwiKdB//8BcSEHAkACfyACQjCIp0H//wFxIglBAWtB/f8BTQRAQQAgB0EBa0H+/wFJDQEaCyABUCACQv///////////wCDIg5CgICAgICAwP//AFQgDkKAgICAgIDA//8AURtFBEAgAkKAgICAgIAghCEKDAILIANQIARC////////////AIMiAkKAgICAgIDA//8AVCACQoCAgICAgMD//wBRG0UEQCAEQoCAgICAgCCEIQogAyEBDAILIAEgDkKAgICAgIDA//8AhYRQBEAgAiADhFAEQEKAgICAgIDg//8AIQpCACEBDAMLIApCgICAgICAwP//AIQhCkIAIQEMAgsgAyACQoCAgICAgMD//wCFhFAEQCABIA6EIQJCACEBIAJQBEBCgICAgICA4P//ACEKDAMLIApCgICAgICAwP//AIQhCgwCCyABIA6EUARAQgAhAQwCCyACIAOEUARAQgAhAQwCCyAOQv///////z9YBEAgBUHQAGogASALIAEgCyALUCIGG3kgBkEGdK18pyIGQQ9rEIgBIAUpA1giC0IghiAFKQNQIgFCIIiEIQ8gC0IgiCERQRAgBmshBgsgBiACQv///////z9WDQAaIAVBQGsgAyANIAMgDSANUCIIG3kgCEEGdK18pyIIQQ9rEIgBIAUpA0giAkIPhiAFKQNAIgNCMYiEIRAgAkIvhiADQhGIhCEMIAJCEYghEiAGIAhrQRBqCyEGIAxC/////w+DIgIgAUL/////D4MiAX4iEyADQg+GQoCA/v8PgyIDIA9C/////w+DIg5+fCIEQiCGIg0gASADfnwiDCANVK0gAiAOfiIVIAMgC0L/////D4MiC358IhQgEEL/////D4MiDSABfnwiECAEIBNUrUIghiAEQiCIhHwiEyACIAt+IhYgAyARQoCABIQiD358IgMgDSAOfnwiESABIBJC/////weDQoCAgIAIhCIBfnwiEkIghnwiF3whBCAHIAlqIAZqQf//AGshBgJAIAsgDX4iGCACIA9+fCICIBhUrSACIAIgASAOfnwiAlatfCACIAIgFCAVVK0gECAUVK18fCICVq18IAEgD358IAEgC34iCyANIA9+fCIBIAtUrUIghiABQiCIhHwgAiABQiCGfCIBIAJUrXwgASABIBEgElatIAMgFlStIAMgEVatfHxCIIYgEkIgiIR8IgFWrXwgASAQIBNWrSATIBdWrXx8IgIgAVStfCIBQoCAgICAgMAAg1BFBEAgBkEBaiEGDAELIAxCP4ghAyABQgGGIAJCP4iEIQEgAkIBhiAEQj+IhCECIAxCAYYhDCADIARCAYaEIQQLIAZB//8BTgRAIApCgICAgICAwP//AIQhCkIAIQEMAQsCfiAGQQBMBEBBASAGayIHQYABTwRAQgAhAQwDCyAFQTBqIAwgBCAGQf8AaiIGEIgBIAVBIGogAiABIAYQiAEgBUEQaiAMIAQgBxCbAiAFIAIgASAHEJsCIAUpAzAgBSkDOIRCAFKtIAUpAyAgBSkDEISEIQwgBSkDKCAFKQMYhCEEIAUpAwAhAiAFKQMIDAELIAFC////////P4MgBq1CMIaECyAKhCEKIAxQIARCf1UgBEKAgICAgICAgIB/URtFBEAgCiACQgF8IgEgAlStfCEKDAELIAwgBEKAgICAgICAgIB/hYRQRQRAIAIhAQwBCyAKIAIgAkIBg3wiASACVK18IQoLIAAgATcDACAAIAo3AwggBUHgAGokAAu9BAEHfyAAKALU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IABBCGoiAigCADYCACAAIAMoAhA2AgggACAGEDMgAjYCACADKAIQKAIARQ0BIAMoAhAhAiAAIAMoAhAoAgAoAgQgARBUEDMgAjYCAAwBCyADKAIQIAIoAgA2AgAgAiADKAIQNgIACyADQRBqELQBIQIgABA0IgAgACgCAEEBajYCACADQQE6AB8gA0EQaiIBKAIAIQAgAUEANgIAIAAEQCABEEIiAS0ABARAIAEoAgAaCyAABEAgASgCABogABAqCwsLIAogA0EQaiACEHQgA0EfahCrAiADQSBqJAAgBCAHKAIIEHQaIAQgBy0ADDoABCAHQRBqJAAMAQsgBEEQahBmIgAgACgCBEEBajYCBAsgBEEgaiQADwtB4KkEQauTARApQb+QARApQdMmEClBogIQLEHaKxApQb+VARApEC0QAAALkQQBA38CQAJAAkACQAJAAkACQAJAAkAgAUF/SgRAIAAoAjQiBSABTA0BIAJBf0wNAiAAKAI4IgYgAkwNAyADQX9MDQQgACgCPCIHIANMDQUgBEF/TA0GIAAoAkAgBEwNByACIAVsIAFqIgEgACgCVCADbGogACgCWCAEbGoiACAEIAdsIANqIAUgBmxsIAFqSg0IIAAPC0HgqQRBqpoBEClBv5ABEClB0yYQKUGlARAsQdorEClBpJwBECkQLQwIC0HgqQRB2J0BEClBv5ABEClB0yYQKUGmARAsQdorEClBpJwBECkQLQwHC0HgqQRBv58BEClBv5ABEClB0yYQKUGnARAsQdorEClBi6IBECkQLQwGC0HgqQRB6aQBEClBv5ABEClB0yYQKUGoARAsQdorEClBi6IBECkQLQwFC0HgqQRB4qYBEClBv5ABEClB0yYQKUGpARAsQdorEClBlKkBECkQLQwEC0HgqQRByqsBEClBv5ABEClB0yYQKUGqARAsQdorEClBlKkBECkQLQwDC0HgqQRBhq4BEClBv5ABEClB0yYQKUGrARAsQdorEClB1q8BECkQLQwCC0HgqQRBwbIBEClBv5ABEClB0yYQKUGsARAsQdorEClB1q8BECkQLQwBC0HgqQRBqLQBEClBv5ABEClB0yYQKUGwARAsQdorEClBv5UBECkQLQsQAAALIQEBfyMAQRBrIgIkACAAIAEgARB9EKQEIAJBEGokACAACwsAIABB+LAEELwBCwkAIAAgATYCBAsJACAAIAE2AgALEQAgACABIAEoAgAoAhQRAgALDwAgACAAKAIAKAIQEQAACxEAIAAgASAAKAIAKAIsEQMAC9IJAgR/BH4jAEHwAGsiBSQAIARC////////////AIMhCgJAAkAgAUIBfSILQn9RIAJC////////////AIMiCSABIAtWrXxCAX0iC0L///////+///8AViALQv///////7///wBRG0UEQCADQgF9IgtCf1IgCiADIAtWrXxCAX0iC0L///////+///8AVCALQv///////7///wBRGw0BCyABUCAJQoCAgICAgMD//wBUIAlCgICAgICAwP//AFEbRQRAIAJCgICAgICAIIQhBCABIQMMAgsgA1AgCkKAgICAgIDA//8AVCAKQoCAgICAgMD//wBRG0UEQCAEQoCAgICAgCCEIQQMAgsgASAJQoCAgICAgMD//wCFhFAEQEKAgICAgIDg//8AIAIgASADhSACIASFQoCAgICAgICAgH+FhFAiBhshBEIAIAEgBhshAwwCCyADIApCgICAgICAwP//AIWEUA0BIAEgCYRQBEAgAyAKhEIAUg0CIAEgA4MhAyACIASDIQQMAgsgAyAKhFBFDQAgASEDIAIhBAwBCyADIAEgASADVCAJIApUIAkgClEbIgcbIQogBCACIAcbIgtC////////P4MhCSACIAQgBxsiAkIwiKdB//8BcSEIIAtCMIinQf//AXEiBkUEQCAFQeAAaiAKIAkgCiAJIAlQIgYbeSAGQQZ0rXynIgZBD2sQiAEgBSkDaCEJIAUpA2AhCkEQIAZrIQYLIAEgAyAHGyEDIAJC////////P4MhBCAIRQRAIAVB0ABqIAMgBCADIAQgBFAiBxt5IAdBBnStfKciB0EPaxCIAUEQIAdrIQggBSkDWCEEIAUpA1AhAwsgBEIDhiADQj2IhEKAgICAgICABIQhBCAJQgOGIApCPYiEIQkgAiALhSEMAn4gA0IDhiIBIAYgCGsiB0UNABogB0H/AEsEQEIAIQRCAQwBCyAFQUBrIAEgBEGAASAHaxCIASAFQTBqIAEgBCAHEJsCIAUpAzghBCAFKQMwIAUpA0AgBSkDSIRCAFKthAshAiAJQoCAgICAgIAEhCEJIApCA4YhAwJAIAxCf1cEQCADIAJ9IgEgCSAEfSACIANWrX0iBIRQBEBCACEDQgAhBAwDCyAEQv////////8DVg0BIAVBIGogASAEIAEgBCAEUCIHG3kgB0EGdK18p0EMayIHEIgBIAYgB2shBiAFKQMoIQQgBSkDICEBDAELIAIgA3wiASACVK0gBCAJfHwiBEKAgICAgICACINQDQAgAUIBgyAEQj+GIAFCAYiEhCEBIAZBAWohBiAEQgGIIQQLIAtCgICAgICAgICAf4MhAiAGQf//AU4EQCACQoCAgICAgMD//wCEIQRCACEDDAELIAZBAU4EfiAGrQUgBUEQaiABIAQgBkH/AGoQiAEgBSABIARBASAGaxCbAiAFKQMAIAUpAxAgBSkDGIRCAFKthCEBIAUpAwghBEIACyEKIAGnQQdxIgZBBEutIARCPYYgAUIDiIQiAXwiAyABVK0gBEIDiEL///////8/gyAKQjCGhCAChHwhBAJAIAZBBEYEQCAEIANCAYMiASADfCIDIAFUrXwhBAwBCyAGRQ0BCwsgACADNwMAIAAgBDcDCCAFQfAAaiQACwQAQQALEQAgACAAKAIAQQhqNgIAIAALDQAgACADlCABIAKUkwsNACAAKAIAIAFBJGxqCxAAIAAoAgQgACgCAGtBBXULLQAgAkUEQCAAKAIEIAEoAgRGDwsgACABRgRAQQEPCyAAENADIAEQ0AMQ/QFFC38CAn8BfiMAQRBrIgMkACAAAn4gAUUEQEIADAELIAMgASABQR91IgJqIAJzIgKtQgAgAmciAkHRAGoQiAEgAykDCEKAgICAgIDAAIVBnoABIAJrrUIwhnwgAUGAgICAeHGtQiCGhCEEIAMpAwALNwMAIAAgBDcDCCADQRBqJAALKAEBfyMAQRBrIgMkACADIAI2AgwgACABIAIQ9gQhACADQRBqJAAgAAsnAQF/IwBBEGsiAiQAIABBAkGoiwJBsIsCQdIAIAEQBSACQRBqJAALMQECfSABKgIAIAAqAgAiA5MgAioCBCAAKgIEIgSTlCABKgIEIASTIAIqAgAgA5OUkwsJACAAIAE6AAsLYwAgAigCBEGwAXEiAkEgRgRAIAEPCwJAIAJBEEcNAAJAAkAgAC0AACICQStrDgMAAQABCyAAQQFqDwsgAkEwRyABIABrQQJIcg0AIAAtAAFBIHJB+ABHDQAgAEECaiEACyAACyYBAX8jAEEQayIBJAAgAUEIaiAAEDgQdCgCACEAIAFBEGokACAACwoAIABBMGtBCkkLEQAgAEUEQA8LIAAgATkDgAEL3AEBAX0gACoCACECIAAgASoCADgCACABIAI4AgAgACoCBCECIAAgASoCBDgCBCABIAI4AgQgACoCCCECIAAgASoCCDgCCCABIAI4AgggACoCDCECIAAgASoCDDgCDCABIAI4AgwgACoCECECIAAgASoCEDgCECABIAI4AhAgACoCFCECIAAgASoCFDgCFCABIAI4AhQgACoCGCECIAAgASoCGDgCGCABIAI4AhggACoCHCECIAAgASoCHDgCHCABIAI4AhwgACoCICECIAAgASoCIDgCICABIAI4AiALPgECf0EMEDAiAgR/IAIgACABbEEDdBAwIgM2AgAgA0UEQCACECpBAA8LIAIgATYCCCACIAA2AgQgAgVBAAsLEwAgACABEP4CIABBBGogAhCVAQsNACAAKAIAIAFBDGxqCxEAIAAgASABKAIAKAIcEQIACxEAIAAgASABKAIAKAIYEQIACxMAIAAgASACIAAoAgAoAgwRBAALJwEBfyACQQBOBH8gACgCCCACQf8BcUEBdGovAQAgAXFBAEcFQQALCwcAIAAQLkULQQECfwJAIAJFDQADQCABIANBA3RqKAIAIgRFDQEgACAERgRAIAEgA0EDdGooAgQPCyADQQFqIgMgAkcNAAsLQQALaQEDfiAAIAJCIIgiAyABQiCIIgR+IAJC/////w+DIgIgAUL/////D4MiAX4iBUIgiCACIAR+fCICQiCIfCABIAN+IAJC/////w+DfCIBQiCIfDcDCCAAIAVC/////w+DIAFCIIaENwMACxQBAX8gACgCACEBIABBADYCACABCw8AIAAoAgggACgCADYCAAsHACAAED0aCw8AIAAgACgCACgCDBEAAAsHACAAIAFGC4sCAgd/AXwjAEEgayIGJAAgBiAEQQR0EDAiCjYCECAKBEACQCAGIARBGGwQMCILNgIUIAtFDQAgBEEAIARBAEobIQwDQCAJIAxGRQRAIAogCUEEdCIHaiIIIAIgB2oiBysDADkDACAIIAcrAwg5AwggCyAJQRhsIghqIgcgAyAIaiIIKwMAOQMAIAcgCCsDCDkDCCAHIAgrAxA5AxAgCUEBaiEJDAELCyAGIAQ2AhggACgCACAGQRBqIAEgBSAGQQhqELgFQX9MBEAgBkKAgICAwPD1y8EANwMICyAGKAIQECogBigCFBAqIAYrAwghDSAGQSBqJAAgDQ8LC0EAQQNBtAtBABAvQQEQAQALEgAgACgCACIABEAgABDABBoLCxEAIAAgASgCABDABDYCACAAC0kBAn8CfyAAKAIAIgMhAiABEFoiASEAIAJBEGoiAhA8IABLBH8gAiAAEDMoAgBBAEcFQQALRQsEQBBxAAsgA0EQaiABEDMoAgALPwICfwF+IAAgATcDcCAAIAAoAggiAiAAKAIEIgNrrCIENwN4IAAgAyABp2ogAiABIARTGyACIAFCAFIbNgJoC08BAXwgACAAoiIARIFeDP3//9+/okQAAAAAAADwP6AgACAAoiIBREI6BeFTVaU/oqAgACABoiAARGlQ7uBCk/k+okQnHg/oh8BWv6CioLYLSwECfCAAIACiIgEgAKIiAiABIAGioiABRKdGO4yHzcY+okR058ri+QAqv6CiIAIgAUSy+26JEBGBP6JEd6zLVFVVxb+goiAAoKC2CxUAIAAgARCbBiAAQQRqIAFBBGoQRwsNACAAKAIAIAEoAgBGCyQBAn8jAEEQayICJAAgASAAEO0BIQMgAkEQaiQAIAEgACADGwsSACAAECsoAgAgACgCAGtBDG0LCAAgAEH/AXELLgACQCAAKAIEQcoAcSIABEAgAEHAAEYEQEEIDwsgAEEIRw0BQRAPC0EADwtBCgv6AQIDfgJ/IwBBEGsiBSQAAn4gAb0iA0L///////////8AgyICQoCAgICAgIAIfUL/////////7/8AWARAIAJCPIYhBCACQgSIQoCAgICAgICAPHwMAQsgAkKAgICAgICA+P8AWgRAIANCPIYhBCADQgSIQoCAgICAgMD//wCEDAELIAJQBEBCAAwBCyAFIAJCACADp2dBIGogAkIgiKdnIAJCgICAgBBUGyIGQTFqEIgBIAUpAwAhBCAFKQMIQoCAgICAgMAAhUGM+AAgBmutQjCGhAshAiAAIAQ3AwAgACACIANCgICAgICAgICAf4OENwMIIAVBEGokAAt3ACAAIAEqAgAgApQ4AgAgACABKgIEIAKUOAIEIAAgASoCCCAClDgCCCAAIAEqAgwgApQ4AgwgACABKgIQIAKUOAIQIAAgASoCFCAClDgCFCAAIAEqAhggApQ4AhggACABKgIcIAKUOAIcIAAgASoCICAClDgCIAsJACABIAIQwQELPQEBfyAAKAIEIgAEQCAAENECBEACQCAAQQhqIgEoAgAEQCABEOgDQX9HDQELIAAgACgCACgCEBEBAAsLCwsRACAAIAAoAgBBCGs2AgAgAAsSACAAECsoAgAgACgCAGtBA3ULLgEBfyAAEN0CIAAoAgAEQCAAELsGIAAQKxogACgCACEBIAAQywEaIAEQKgsgAAtCAQF/IAEgAmwhBCAEAn8gAygCTEF/TARAIAAgBCADEJsEDAELIAAgBCADEJsECyIARgRAIAJBACABGw8LIAAgAW4LEAAgACABQYCAgIB4cjYCCAsKAEHY7AMQiwEAC6ABAQR/IwBBEGsiByQAAkAgAEUNACAEKAIMIQYgAiABayIIQQFOBEAgACABIAgQtQIgCEcNAQsgBiADIAFrIgFrQQAgASAGSBsiAUEBTgRAIAAgByABIAUQ7AYiBRA4IAEQtQIhBiAFEDEaIAEgBkcNAQsgAyACayIBQQFOBEAgACACIAEQtQIgAUcNAQsgBBDpBiAAIQkLIAdBEGokACAJC1gBAn8jAEEQayICJAAgABCNAQRAIAAoAgAhAyAAEJICGiADECoLIAAgASgCCDYCCCAAIAEpAgA3AgAgAUEAEKQBIAJBADYCDCABIAJBDGoQeCACQRBqJAALvwEBA38jAEEQayIFJAAgBSABNgIIQQAhAUEGIQYCQAJAIAAgBUEIahBvDQBBBCEGIANBgBAgABBgIgcQrwFFDQAgAyAHELkCIQEDQAJAIAAQbBogAUEwayEBIAAgBUEIahCEAUUgBEECSHINACADQYAQIAAQYCIGEK8BRQ0DIARBAWshBCADIAYQuQIgAUEKbGohAQwBCwtBAiEGIAAgBUEIahBvRQ0BCyACIAIoAgAgBnI2AgALIAVBEGokACABC78BAQN/IwBBEGsiBSQAIAUgATYCCEEAIQFBBiEGAkACQCAAIAVBCGoQcA0AQQQhBiADQYAQIAAQYSIHELABRQ0AIAMgBxC6AiEBA0ACQCAAEG0aIAFBMGshASAAIAVBCGoQhQFFIARBAkhyDQAgA0GAECAAEGEiBhCwAUUNAyAEQQFrIQQgAyAGELoCIAFBCmxqIQEMAQsLQQIhBiAAIAVBCGoQcEUNAQsgAiACKAIAIAZyNgIACyAFQRBqJAAgAQucAQEDfyMAQRBrIgQkACAEIAE2AgwgBCADNgIIIAQgBEEMahC7ASEGIAQoAgghAyMAQRBrIgEkACABIAM2AgwgASADNgIIQX8hBQJAQQBBACACIAMQ+gEiA0EASA0AIAAgA0EBaiIDEDAiADYCACAARQ0AIAAgAyACIAEoAgwQ+gEhBQsgAUEQaiQAIAUhACAGELoBIARBEGokACAACzYAIAIEfyACBEADQCAAIAEoAgA2AgAgAEEEaiEAIAFBBGohASACQQFrIgINAAsLQQAFIAALGgsQACACBEAgACABIAIQNxoLCw8AIAAQKygCACAAKAIAawsSACAAECsoAgAgACgCAGtBFG0L9AEBAn8gAiAESARAIAAgASACIAQQYkUEQEF/DwsgACgCDCECIAAoAgghAQsgBEECdCIGQfDMAmooAgAgASACIARrIgJ1cSIFIAMgBmooAgBKBEADQCACQQBMBEAgACABIAJBARBiRQRAQX8PCyAAKAIMIQIgACgCCCEBCyABIAJBAWsiAnZBAXEgBUEBdHIiBSADIARBAWoiBEECdGooAgBKDQALCyAAIAI2AgwgACABNgIIIARBEU4EQCAAKAIQIgAoAgAiAUH5ADYCFCAAQX8gASgCBBECAEEADwsgAygCjAEgAyAEQQJ0aigCSCAFamotABELzwECAX8CfSAAIAEgASACQQJ0IgNqIgIqAgCMEMcBIAAgA2oiAyADKgIAQwAAgD+SOAIAIAAgAUEkaiACKgIkjBCBAiAAIAFByABqIAIqAkiMEIECIAAgAUHsAGogAioCbIwQgQIgACABQZABaiACKgKQAYwQgQIgACABQbQBaiACKgK0AYwQgQIgACABQdgBaiACKgLYAYwQgQIgACABQfwBaiACKgL8AYwQgQIgABBSIgRDAAAAAFwEQCAAIABDAACAPyAEkSIFlRDHAQsgBQuyAQEFfwJ/IAJDAAAAP5IiAotDAAAAT10EQCACqAwBC0GAgICAeAshBSAAKAIUIQhBfyEGAkACfyABQwAAAD+SIgGLQwAAAE9dBEAgAagMAQtBgICAgHgLIAAoAhBqIgdBAEgNACAHIAAoAggiCU4NACAFIAhqIgVBAEgNACAFIAAoAgxODQAgAyAAKAIEIAUgCWwg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CGogABA4IAAQLmoQdCgCACEAIAFBEGokACAACykAIABBCHRBgID8B3EgAEEYdHIgAEEIdkGA/gNxIABBGHZyciAAIAEbC9sBAgF/An5BASEEAkAgAEIAUiABQv///////////wCDIgVCgICAgICAwP//AFYgBUKAgICAgIDA//8AURsNACACQgBSIANC////////////AIMiBkKAgICAgIDA//8AViAGQoCAgICAgMD//wBRGw0AIAAgAoQgBSAGhIRQBEBBAA8LIAEgA4NCAFkEQEF/IQQgACACVCABIANTIAEgA1EbDQEgACAChSABIAOFhEIAUg8LQX8hBCAAIAJWIAEgA1UgASADURsNACAAIAKFIAEgA4WEQgBSIQQLIAQLiwIAAkAgAAR/IAFB/wBNDQECQEGc9wMoAgAoAgBFBEAgAUGAf3FBgL8DRg0DDAELIAFB/w9NBEAgACABQT9xQYABcjoAASAAIAFBBnZBwAFyOgAAQQIPCyABQYCwA09BACABQYBAcUGAwANHG0UEQCAAIAFBP3FBgAFyOgACIAAgAUEMdkHgAXI6AAAgACABQQZ2QT9xQYABcjoAAUEDDwsgAUGAgARrQf//P00EQCAAIAFBP3FBgAFyOgADIAAgAUESdkHwAXI6AAAgACABQQZ2QT9xQYABcjoAAiAAIAFBDHZBP3FBgAFyOgABQQQPCwtBuJUEQRk2AgBBfwVBAQsPCyAAIAE6AABBAQvAAQECfyMAQaABayIEJAAgBEEIakHIhANBkAEQNxoCQAJAIAFBAWtB/////wdPBEAgAQ0BQQEhASAEQZ8BaiEACyAEIAA2AjQgBCAANgIcIARBfiAAayIFIAEgASAFSxsiATYCOCAEIAAgAWoiADYCJCAEIAA2AhggBEEIaiACIANB6QFB6gEQgAUhACABRQ0BIAQoAhwiASABIAQoAhhGa0EAOgAADAELQbiVBEE9NgIAQX8hAAsgBEGgAWokACAAC9AEAQR/IwBBEGsiBCQAAkACQEHEhAMgASwAABD8AUUEQEG4lQRBHDYCAAwBC0ECIQICfyABQSsQ/AFFBEAgAS0AAEHyAEchAgsgAkGAAXILIAIgAUH4ABD8ARsiAkGAgCByIAIgAUHlABD8ARsiAiACQcAAciABLQAAIgJB8gBGGyIFQYAEciAFIAJB9wBGGyIFQYAIciAFIAJB4QBGGyECIARBtgM2AgAgACACQYCAAnIgBBAjIgBBgWBPBEBBuJUEQQAgAGs2AgBBfyEACyAAQQBIDQEjAEEgayIDJAACfwJAAkBBwIQDIAEsAAAQ/AFFBEBBuJUEQRw2AgAMAQtBmAkQMCICDQELQQAMAQsgAkEAQZABEDIaIAFBKxD8AUUEQCACQQhBBCABLQAAQfIARhs2AgALAkAgAS0AAEHhAEcEQCACKAIAIQEMAQsgAEEDQQAQDyIBQYAIcUUEQCADIAFBgAhyNgIQIABBBCADQRBqEA8aCyACIAIoAgBBgAFyIgE2AgALIAJB/wE6AEsgAkGACDYCMCACIAA2AjwgAiACQZgBajYCLAJAIAFBCHENACADIANBGGo2AgAgAEGTqAEgAxAiDQAgAkEKOgBLCyACQeQBNgIoIAJB5QE2AiQgAkHmATYCICACQecBNgIMQcyVBCgCAEUEQCACQX82AkwLIAJBrJ4EKAIANgI4QayeBCgCACIBBEAgASACNgI0C0GsngQgAjYCACACCyEBIANBIGokACABIgMNASAAEBAaC0EAIQMLIARBEGokACADCxoAIAAgARCOBSIAQQAgAC0AACABQf8BcUYbC0oBAn8CQCAALQAAIgJFIAIgAS0AACIDR3INAANAIAEtAAEhAyAALQABIgJFDQEgAUEBaiEBIABBAWohACACIANGDQALCyACIANrC/kCAQZ/IAAoAgQhBiACQfGT69wDTwRAIAAoAgBCuICAgBA3AhQgACAAKAIAKAIAEQEAC0EIIAJBB3EiA2tBACADGyEDIAFBAk8EQCAAKAIAIgUgATYCGCAFQQ82AhQgACAAKAIAKAIAEQEACyACIANqIQMCQCAGIAFBAnRqIggoAjQiAgRAA0AgAyACIgQoAghNBEAgBCEBDAMLIAQoAgAiAg0ACwtB8JPr3AMgA2siAiABQQJ0QeTNAkHczQIgBBtqKAIAIgEgASACSxsiAiADaiIFQRBqIgcQMCIBRQRAA0AgAkHjAE0EQCAAKAIAQriAgIAgNwIUIAAgACgCACgCABEBAAsgAkEBdiIBIQIgASADaiIFQRBqIgcQMCIBRQ0ACwsgBiAGKAJMIAdqNgJMIAEgBTYCCCABQgA3AwAgBEUEQCAIIAE2AjQMAQsgBCABNgIACyABIAEoAgQiACADajYCBCABIAEoAgggA2s2AgggACABakEQagsnAQF/IwBBEGsiAiQAIABBA0HQjAJByIwCQdQAIAEQBSACQRBqJAALpgMCAn8BfSABAn8gAxC+Bo4iBotDAAAAT10EQCAGqAwBC0GAgICAeAsiBDYCACACAn8gA0EBIAR0spUQoAIgACoCHJQQvQYiA4tDAAAAT10EQCADqAwBC0GAgICAeAsiBDYCACAEIAAoAhRBAWtGBEAgASABKAIAQQFqNgIAIAJBADYCAEEAIQQLAkAgAgJ/IAEoAgAiAkF/TARAIAFBADYCAEEADAELIAIgACgCECIFSA0BIAEgBUEBazYCACAAKAIUQQFrCyIENgIACwJAAkACQCABKAIAIgFBf0oEQCABIAAoAhBODQEgBEF/TA0CIAQgACgCFE4NAw8LQeCpBEHN2AAQKUHR3QAQKUHdKxApQYwCECxB3DAQKUGc5AAQKRAtEAAAC0HgqQRBtugAEClB0d0AEClB3SsQKUGNAhAsQdwwEClB3uwAECkQLRAAAAtB4KkEQYL+ABApQdHdABApQd0rEClBjgIQLEHcMBApQemBARApEC0QAAALQeCpBEHphQEQKUHR3QAQKUHdKxApQY8CECxB3DAQKUGXiQEQKRAtEAAAC60BACAAIAAqAgAgASoCACAClJI4AgAgACAAKgIEIAEqAgQgApSSOAIEIAAgACoCCCABKgIIIAKUkjgCCCAAIAAqAgwgASoCDCAClJI4AgwgACAAKgIQIAEqAhAgApSSOAIQIAAgACoCFCABKgIUIAKUkjgCFCAAIAAqAhggASoCGCAClJI4AhggACAAKgIcIAEqAhwgApSSOAIcIAAgACoCICABKgIgIAKUkjgCIAsPACAAIAAoAgBBBGo2AgALCwAgAEEQaiABEGMLEgAgAEEEaiAAKAIAIAFsEJgFCwwAIAEgAigCADYCAAsOACAAIAEoAgA2AgAgAAuTAQECfyABIAAQPCICSwRAIwBBIGsiAyQAAkAgASACayIBIAAQKygCACAAKAIEa0ECdU0EQCAAIAEQnAMMAQsgABArIQIgA0EIaiAAIAAQPCABahDcAiAAEDwgAhDSAiICIAEQrQYgACACENsCIAIQsgILIANBIGokAA8LIAEgAkkEQCAAIAAoAgAgAUECdGoQjQQLC50BAQN/IwBB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QQAgBUEBaiIAIABBMEYiABshBSAAIAdqIgdB0gFsIQMMAQsLIAQgADYCDAwBCyAEIAA2AgwgACAGIAIbIQALIARBEGokACAAC2QCAX8BfiMAQRBrIgIkACAAAn4gAUUEQEIADAELIAIgAa1CACABZyIBQdEAahCIASACKQMIQoCAgICAgMAAhUGegAEgAWutQjCGfCEDIAIpAwALNwMAIAAgAzcDCCACQRBqJAALUAEBfgJAIANBwABxBEAgAiADQUBqrYghAUIAIQIMAQsgA0UNACACQcAAIANrrYYgASADrSIEiIQhASACIASIIQILIAAgATcDACAAIAI3AwgLgwECA38BfgJAIABCgICAgBBUBEAgACEFDAELA0AgAUEBayIBIAAgAEIKgCIFQgp+fadBMHI6AAAgAEL/////nwFWIQIgBSEAIAINAAsLIAWnIgIEQANAIAFBAWsiASACIAJBCm4iA0EKbGtBMHI6AAAgAkEJSyEEIAMhAiAEDQALCyABC6EBAQN/IwBBEGsiBSQAIAUgAjYCDCMAQaABayIDJAAgA0EIakHIhANBkAEQNxogAyAANgI0IAMgADYCHCADQX4gAGsiBEH/////ByAEQf////8HSRsiBDYCOCADIAAgBGoiADYCJCADIAA2AhggA0EIaiABIAIQ/AQgBARAIAMoAhwiACAAIAMoAhhGa0EAOgAACyADQaABaiQAIAVBEGokAAsvAQF/IwBBEGsiASQAIABCADcCACABQQA2AgwgAEEIaiABQQxqEP4CIAFBEGokAAulAQIBfQJ/An8gALwiAkEXdkH/AXEiA0GVAU0EQCADQf0ATQR9IABDAAAAAJQFAn0gACAAjCACQX9KGyIAQwAAAEuSQwAAAMuSIACTIgFDAAAAP14EQCAAIAGSQwAAgL+SDAELIAAgAZIiACABQwAAAL9fRQ0AGiAAQwAAgD+SCyIAIACMIAJBf0obCyEACyAAi0MAAABPXQsEQCAAqA8LQYCAgIB4C5ACAgJ/An0CQAJAIAC8IgFBgICABE9BACABQX9KG0UEQCABQf////8HcUUEQEMAAIC/IAAgAJSVDwsgAUF/TARAIAAgAJNDAAAAAJUPCyAAQwAAAEyUvCEBQeh+IQIMAQsgAUH////7B0sNAUGBfyECQwAAAAAhACABQYCAgPwDRg0BCyACIAFBjfarAmoiAUEXdmqyIgNDgHExP5QgAUH///8DcUHzidT5A2q+QwAAgL+SIgAgA0PR9xc3lCAAIABDAAAAQJKVIgMgACAAQwAAAD+UlCIEIAMgA5QiACAAIACUIgBD7umRPpRDqqoqP5KUIAAgAEMmnng+lEMTzsw+kpSSkpSSIASTkpIhAAsgAAvVAwENfyAAIQZBnPcDKAIAIQJBACEAAkACQANAIAYgAEGg3gJqLQAARwRAQdcAIQQgAEEBaiIAQdcARw0BDAILCyAAIgQNAEGA3wIhBgwBC0GA3wIhAANAIAAtAAAhAyAAQQFqIgYhACADDQAgBiEAIARBAWsiBA0ACwsgAigCFCIABH8gACgCBCEEIAAoAgAiACgCCCAAKAIAQaLa79cGaiICEPcBIQMgACgCDCACEPcBIQUgACgCECACEPcBIQECQCADIARBAnZPDQAgASAFckEDcSAFIAQgA0ECdGsiB08gASAHT3JyDQAgAUECdiEKIAVBAnYhC0EAIQUDQCAAIAUgA0EBdiIHaiIMQQF0Ig0gC2pBAnRqIgEoAgAgAhD3ASEJIAQgASgCBCACEPcBIgFNIAkgBCABa09yDQEgACABIAlqai0AAA0BIAYgACABahD9ASIBRQRAIAAgCiANakECdGoiBSgCACACEPcBIQMgBCAFKAIEIAIQ9wEiAk0gAyAEIAJrT3INAkEAIAAgAmogACACIANqai0AABshCAwCCyADQQFGDQEgByADIAdrIAFBAEgiARshAyAFIAwgARshBQwACwALIAgFQQALIgAgBiAAGwsnAQF/IwBBEGsiAiQAIABBA0GYjQJBpI0CQdoAIAEQBSACQRBqJAALDQAgACgCBCABKAIESwshACAAKAIEIAAQKygCAEkEQCAAIAEQ3gIPCyAAIAEQ0wULDQAgACgCABAqIAAQKgsIACAAQfQAagsKACAAIAEQeCAACyABAX8gACgCACECIAAgATYCACACBEAgABBCIAIQiAYLCzABAX8jAEEQayIDJAAgAyABNgIMIAAgA0EMahB4IAAgAikCADcCBCADQRBqJAAgAAsSACAAIAI6AAQgACABNgIAIAALFgAgACABKAIANgIAIAAgAi0AADoABAsgAQF/IAAoAgAhASAAQQA2AgAgAQRAIAAQQiABEIgGCwsoAQF/IwBBEGsi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IANBIGokAAsJACAAIAE6AGQLagECfyMAQRBrIgQkACAEQQA2AgwgAEEMaiAEQQxqIAMQqwEgAQRAIAAoAhAaIAEQ/AUhBQsgACAFNgIAIAAgBSACQQN0aiICNgIIIAAgAjYCBCAAEDQgBSABQQN0ajYCACAEQRBqJAAgAAsIACAAIAEQeAsMACAAIAEgACABSBsLIAEBf0F/IQIgAEUgAUEES3IEf0F/BSAAIAE2AhhBAAsLEAAgACgCACABKAIAa0EDdQssACAAKAIAGiAAKAIAIAAQywFBA3RqGiAAKAIAIAAQywFBA3RqGiAAKAIAGgsHACAAEE8aCysAIAAoAgAaIAAoAgAgABDDAUEMbGoaIAAoAgAaIAAoAgAgABBlQQxsahoLCQAgAEEANgIACywAIAAoAgAaIAAoAgAgABDpAUECdGoaIAAoAgAgABDpAUECdGoaIAAoAgAaCysBAX8gACABKAIANgIAIAEoAgAhAyAAIAE2AgggACADIAJBAnRqNgIEIAALVAECfyMAQRBrIgIkACACIAAgARCxAiIBKAIEIQMDQCABKAIIIANHBEAgABArGiABKAIEEJkDIAEgASgCBEEEaiIDNgIEDAELCyABEHYgAkEQaiQACysBAX8gACgCBCECA0AgASACRwRAIAAQKxogAkEIayECDAELCyAAIAE2AgQLKAAgACABEEcgAEEEaiABQQRqEEcgABArIAEQKxBHIAAQKxogARArGgudAQIEfwN9A0AgBEEDRwRAIAAgBEEFdGoiBisDELYhByAGKwMItiEIIAYrAwC2IQlBACEDA0AgA0EERwRAIANBAnQiBSACIARBBHRqaiABIAVqIgUqAgAgCZQgBSoCECAIlJIgBSoCICAHlJI4AgAgA0EBaiEDDAELCyACIARBBHRqIgMgAyoCDCAGKwMYtpI4AgwgBEEBaiEEDAELCwuCAQACQCACQwAAAABgBEAgACgCFLIgAl5FDQEgACoCGCACELwGQQEgAXSylA8LQeCpBEGvxgEQKUHJwAEQKUGiJhApQegBECxBuisQKUGNxwEQKRAtEAAAC0HgqQRBkcIBEClBycABEClBoiYQKUHpARAsQborEClBxscBECkQLRAAAAvzawMOfwR9CXwjAEHgAWsiDCQAIAxCgICAgICA4K3AADcD2AEgDEKAgICAgIDgrcAANwPIASAMQoCAgICAgMCswAA3A7gBIAxCgICAgICAwKzAADcD0AEgDEKAgICAgIDgrcAANwPAASAMQoCAgICAgOCtwAA3A7ABIAxCgICAgICAwKzAADcDqAEgDEKAgICAgIDArMAANwOgAQNAIA1BBEcEQCANQQR0Ig4gDEHgAGpqIhEgCSAOaiIOKwMAOQMAIBEgDisDCDkDCCANQQFqIQ0MAQsLIAxBoAFqIRcgDEHgAGohGCAMQRBqIRNBACERQQhBCBCqASEPQQhBARCqASEQQQhBARCqASEUIBAoAgAhFiAPKAIAIQkDQCARQQRHBEAgCSARQQd0Ig5qIBcgEUEEdCIVaiINKwMAOQMAIAkgDkEIcmogDSsDCDkDACAJIA5BEHJqQoCAgICAgID4PzcDACAJIA5BGHJqQgA3AwAgCSAOQSByakIANwMAIAkgDkEocmpCADcDACAJIA5BMHJqIBUgGGoiEisDACANKwMAmqI5AwAgCSAOQThyaiASKwMAIA0rAwiaojkDACAJIBVBCHIiGUEDdGpCADcDACAJIA5ByAByakIANwMAIAkgDkHQAHJqQgA3AwAgCSAOQdgAcmogDSsDADkDACAJIA5B4AByaiANKwMIOQMAIAkgDkHoAHJqQoCAgICAgID4PzcDACAJIA5B8AByaiASKwMIIA0rAwCaojkDACAJIA5B+AByaiASKwMIIA0rAwiaojkDACAVIBZqIBIrAwA5AwAgFiAZaiASKwMIOQMAIBFBAWohEQwBCwsgDxDUAhogFCAPIBAQ+gMaIBQoAgAhDkEAIQkDQCAJQQJHBEAgEyAJQRhsIhFqIg0gDiARaiIRKwMAOQMAIA0gESsDCDkDCCANIBErAxA5AxAgCUEBaiEJDAELCyATIA4rAzA5AzAgDisDOCEhIBNBQGtCgICAgICAgPg/NwMAIBMgITkDOCAPEDsgEBA7IBQQOwJ/IAwrA3AiISAMKwOAASIfoSIeIB6iIAwrA3giHiAMKwOIASIgoSIiICKioCIimUQAAAAAAADgQWMEQCAiqgwBC0GAgICAeAshCQJ/An8gDCsDkAEiIiAMKwNgIiOhIiUgJaIgDCsDmAEiJSAMKwNoIiahIiQgJKKgIiSZRAAAAAAAAOBBYwRAICSqDAELQYCAgIB4CyIOIAkgCSAOSBu3IAqiIAqiIiSZRAAAAAAAAOBBYwRAICSqDAELQYCAgIB4CyERAn8gIyAhoSIhICGiICYgHqEiISAhoqAiIZlEAAAAAAAA4EFjBEAgIaoMAQtBgICAgHgLIQkCfwJ/IB8gIqEiISAhoiAgICWhIiEgIaKgIiGZRAAAAAAAAOBBYwRAICGqDAELQYCAgIB4CyIOIAkgCSAOSBu3IAqiIAqiIiGZRAAAAAAAAOBBYwRAICGqDAELQYCAgIB4CyEOAkAgAEUEQCACIQkDQCAOIAkgCSINbEoEQCANQQF0IQkgAyANSg0BCwsgAiEOA0AgDiIJIAlsIBFODQIgCUEBdCEOIAMgCUoNAAsMAQsgAiEJA0AgDiAJIAkiDWxBAnRKBEAgDUEBdCEJIAMgDUoNAQsLIAIhDgNAIA4iCSAJbEECdCARTg0BIAlBAXQhDiADIAlKDQALCyAKRAAAAAAAACRAoiEhRAAAAAAAAPA/IAqhRAAAAAAAAOA/okQAAAAAAAAkQKIhCiADIAkgAyAJSBsiCSACbSERIAMgDSADIA1IGyIDIAJtIRIgAiACbCETAkACQAJAAkAgAUUEQCATQQNsIhNBBBCnAyIORQ0EAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgBw4PAAECAwQFBgcICQoLBQUFDgsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHyADtyEiIAm3ISNBACEBA0AgASAPRg0MIB8gISABt0QAAAAAAADgP6CiICOjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIB8gISANt0QAAAAAAADgP6CiICKjoCIeIAwrA0CiIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0RIAwgDCsDICAeIAwrAxCiIAogDCsDGKKgoCAgo7YiGjgCDCAMIAwrAzggHiAMKwMooiAKIAwrAzCioKAgIKO2Ihs4AgggCCAaIBsgDEEMaiAMQQhqEGsaIAwqAgwhGgJ/IABBAUYEQAJ/IAwqAghDAACAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBpDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLIQMgGkMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyIJQQBIIAUgCUxyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakEMbGoiByAHKAIAIAQgAyAFbCAJakEDbGoiAy0AAmo2AgAgByAHKAIEIAMtAAFqNgIEIAcgBygCCCADLQAAajYCCAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEfIAO3ISIgCbchI0EAIQEDQCABIA9GDQsgHyAhIAG3RAAAAAAAAOA/oKIgI6OgIQpBACENA0AgDSAQRwRAIAwrA1AgHyAhIA23RAAAAAAAAOA/oKIgIqOgIh4gDCsDQKIgCiAMKwNIoqCgIiBEAAAAAAAAAABhDRAgDCAMKwMgIB4gDCsDEKIgCiAMKwMYoqCgICCjtiIaOAIMIAwgDCsDOCAeIAwrAyiiIAogDCsDMKKgoCAgo7YiGzgCCCAIIBogGyAMQQxqIAxBCGoQaxogDCoCDCEaAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4C0ECbUEBdCEDAn8gGkMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAshAyAaQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIglBAEggBSAJTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQxsaiIHIAcoAgAgBCADIAVsIAlqQQNsaiIDLQAAajYCACAHIAcoAgQgAy0AAWo2AgQgByAHKAIIIAMtAAJqNgIICyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR8gA7chIiAJtyEjQQAhAQNAIAEgD0YNCiAfICEgAbdEAAAAAAAA4D+goiAjo6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAfICEgDbdEAAAAAAAA4D+goiAio6AiHiAMKwNAoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENDyAMIAwrAyAgHiAMKwMQoiAKIAwrAxiioKAgIKO2Iho4AgwgDCAMKwM4IB4gDCsDKKIgCiAMKwMwoqCgICCjtiIbOAIIIAggGiAbIAxBDGogDEEIahBrGiAMKgIMIRoCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLQQJtQQF0IQMCfyAaQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4CyEDIBpDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAsiCUEASCAFIAlMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBDGxqIgcgBygCACAEIAMgBWwgCWpBAnQiA0ECcmotAABqNgIAIAcgBygCBCAEIANBAXJqLQAAajYCBCAHIAcoAgggAyAEai0AAGo2AggLIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHyADtyEiIAm3ISNBACEBA0AgASAPRg0JIB8gISABt0QAAAAAAADgP6CiICOjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIB8gISANt0QAAAAAAADgP6CiICKjoCIeIAwrA0CiIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0OIAwgDCsDICAeIAwrAxCiIAogDCsDGKKgoCAgo7YiGjgCDCAMIAwrAzggHiAMKwMooiAKIAwrAzCioKAgIKO2Ihs4AgggCCAaIBsgDEEMaiAMQQhqEGsaIAwqAgwhGgJ/IABBAUYEQAJ/IAwqAghDAACAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBpDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLIQMgGkMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyIJQQBIIAUgCUxyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakEMbGoiByAHKAIAIAQgAyAFbCAJakECdCIDai0AAGo2AgAgByAHKAIEIAQgA0EBcmotAABqNgIEIAcgBygCCCAEIANBAnJqLQAAajYCCAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEfIAO3ISIgCbchI0EAIQEDQCABIA9GDQggHyAhIAG3RAAAAAAAAOA/oKIgI6OgIQpBACENA0AgDSAQRwRAIAwrA1AgHyAhIA23RAAAAAAAAOA/oKIgIqOgIh4gDCsDQKIgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQ0gDCAMKwMgIB4gDCsDEKIgCiAMKwMYoqCgICCjtiIaOAIMIAwgDCsDOCAeIAwrAyiiIAogDCsDMKKgoCAgo7YiGzgCCCAIIBogGyAMQQxqIAxBCGoQaxogDCoCDCEaAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4C0ECbUEBdCEDAn8gGkMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAshAyAaQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIglBAEggBSAJTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQxsaiIHIAcoAgAgBCADIAVsIAlqQQJ0IgNBAXJqLQAAajYCACAHIAcoAgQgBCADQQJyai0AAGo2AgQgByAHKAIIIAQgA0EDcmotAABqNgIICyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR8gA7chIiAJtyEjQQAhAQNAIAEgD0YNByAfICEgAbdEAAAAAAAA4D+goiAjo6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAfICEgDbdEAAAAAAAA4D+goiAio6AiHiAMKwNAoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENDCAMIAwrAyAgHiAMKwMQoiAKIAwrAxiioKAgIKO2Iho4AgwgDCAMKwM4IB4gDCsDKKIgCiAMKwMwoqCgICCjtiIbOAIIIAggGiAbIAxBDGogDEEIahBrGiAMKgIMIRoCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLQQJtQQF0IQMCfyAaQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4CyEDIBpDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAsiCUEASCAFIAlMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBDGxqIgcgBCADIAVsIAlqai0AACIDIAcoAgBqNgIAIAcgAyAHKAIEajYCBCAHIAMgBygCCGo2AggLIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHyADtyEiIAm3ISNBACEBA0AgASAPRg0GIB8gISABt0QAAAAAAADgP6CiICOjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIB8gISANt0QAAAAAAADgP6CiICKjoCIeIAwrA0CiIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0LIAwgDCsDICAeIAwrAxCiIAogDCsDGKKgoCAgo7YiGjgCDCAMIAwrAzggHiAMKwMooiAKIAwrAzCioKAgIKO2Ihs4AgggCCAaIBsgDEEMaiAMQQhqEGsaIAwqAgwhGgJ/IABBAUYEQAJ/IAwqAghDAACAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBpDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLIQMgGkMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyIJQQBIIAUgCUxyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakEMbGoiByAHKAIAIAQgAyAFbCAJakECdCIDQQNyai0AAGo2AgAgByAHKAIEIAQgA0ECcmotAABqNgIEIAcgBygCCCAEIANBAXJqLQAAajYCCAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEfIAO3ISIgCbchI0EAIQEDQCABIA9GDQUgHyAhIAG3RAAAAAAAAOA/oKIgI6OgIQpBACENA0AgDSAQRwRAIAwrA1AgHyAhIA23RAAAAAAAAOA/oKIgIqOgIh4gDCsDQKIgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQogDCAMKwMgIB4gDCsDEKIgCiAMKwMYoqCgICCjtiIaOAIMIAwgDCsDOCAeIAwrAyiiIAogDCsDMKKgoCAgo7YiGzgCCCAIIBogGyAMQQxqIAxBCGoQaxogDCoCDCEaAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4C0ECbUEBdCEDAn8gGkMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAshAyAaQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIgdBAEggBSAHTHIgA0EASCADIAZOcnJFBEACfyAEIAMgBWwiAyAHQf7/A3FqQQF0aiIJLQAAQYABa7IiG0NOGgFElCAEIAMgB2pBAXRBAXJqLQAAQRBrskN/CpVDlCIakiIci0MAAABPXQRAIByoDAELQYCAgIB4CyEHIAktAAIhCSAOIAEgEW0gAmwgDSASbWpBDGxqIgMgAygCACAHQQh1IgdBACAHQQBKGyIHQf8BIAdB/wFIG2o2AgAgAyADKAIIAn8gGiAJQYABa7IiHEOgSsxDlJIiHYtDAAAAT10EQCAdqAwBC0GAgICAeAtBCHUiB0EAIAdBAEobIgdB/wEgB0H/AUgbajYCCCADIAMoAgQCfyAaIBtD/pTIwpSSIBxDuB5Qw5SSIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQh1IgNBACADQQBKGyIDQf8BIANB/wFIG2o2AgQLIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHyADtyEiIAm3ISNBACEBA0AgASAPRg0EIB8gISABt0QAAAAAAADgP6CiICOjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIB8gISANt0QAAAAAAADgP6CiICKjoCIeIAwrA0CiIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0JIAwgDCsDICAeIAwrAxCiIAogDCsDGKKgoCAgo7YiGjgCDCAMIAwrAzggHiAMKwMooiAKIAwrAzCioKAgIKO2Ihs4AgggCCAaIBsgDEEMaiAMQQhqEGsaIAwqAgwhGgJ/IABBAUYEQAJ/IAwqAghDAACAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBpDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLIQMgGkMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyIHQQBIIAUgB0xyIANBAEggAyAGTnJyRQRAAn8gBCADIAVsIgMgB2pBAXRqLQAAQRBrskN/CpVDlCIaIAQgB0H+/wNxIANqQQF0IgNBAXJqLQAAQYABa7IiG0NOGgFElJIiHItDAAAAT10EQCAcqAwBC0GAgICAeAshByADIARqLQADIQkgDiABIBFtIAJsIA0gEm1qQQxsaiIDIAMoAgAgB0EIdSIHQQAgB0EAShsiB0H/ASAHQf8BSBtqNgIAIAMgAygCCAJ/IBogCUGAAWuyIhxDoErMQ5SSIh2LQwAAAE9dBEAgHagMAQtBgICAgHgLQQh1IgdBACAHQQBKGyIHQf8BIAdB/wFIG2o2AgggAyADKAIEAn8gGiAbQ/6UyMKUkiAcQ7geUMOUkiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0EIdSIDQQAgA0EAShsiA0H/ASADQf8BSBtqNgIECyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR8gA7chIiAJtyEjQQAhAQNAIAEgD0YNAyAfICEgAbdEAAAAAAAA4D+goiAjo6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAfICEgDbdEAAAAAAAA4D+goiAio6AiHiAMKwNAoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENCCAMIAwrAyAgHiAMKwMQoiAKIAwrAxiioKAgIKO2Iho4AgwgDCAMKwM4IB4gDCsDKKIgCiAMKwMwoqCgICCjtiIbOAIIIAggGiAbIAxBDGogDEEIahBrGiAMKgIMIRoCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLQQJtQQF0IQMCfyAaQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4CyEDIBpDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAsiCUEASCAFIAlMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBDGxqIgcgBygCACAEIAMgBWwgCWpBAXQiA0EBcmotAAAiCUEDdEEEckH8AXFqNgIAIAcgBygCCCADIARqLQAAIgNBBHJB/AFxajYCCCAHIAcoAgQgA0EFdCAJQQN2ckECckH+AXFqNgIECyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR8gA7chIiAJtyEjQQAhAQNAIAEgD0YNAiAfICEgAbdEAAAAAAAA4D+goiAjo6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAfICEgDbdEAAAAAAAA4D+goiAio6AiHiAMKwNAoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENByAMIAwrAyAgHiAMKwMQoiAKIAwrAxiioKAgIKO2Iho4AgwgDCAMKwM4IB4gDCsDKKIgCiAMKwMwoqCgICCjtiIbOAIIIAggGiAbIAxBDGogDEEIahBrGiAMKgIMIRoCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLQQJtQQF0IQMCfyAaQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4CyEDIBpDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAsiCUEASCAFIAlMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBDGxqIgcgBygCACAEIAMgBWwgCWpBAXQiA0EBcmotAAAiCUECdEEEckH8AXFqNgIAIAcgBygCCCADIARqLQAAIgNBBHJB/AFxajYCCCAHIAcoAgQgA0EFdCAJQQN2ckEEckH8AXFqNgIECyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR8gA7chIiAJtyEjQQAhAQNAIAEgD0YNASAfICEgAbdEAAAAAAAA4D+goiAjo6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAfICEgDbdEAAAAAAAA4D+goiAio6AiHiAMKwNAoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENBiAMIAwrAyAgHiAMKwMQoiAKIAwrAxiioKAgIKO2Iho4AgwgDCAMKwM4IB4gDCsDKKIgCiAMKwMwoqCgICCjtiIbOAIIIAggGiAbIAxBDGogDEEIahBrGiAMKgIMIRoCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLQQJtQQF0IQMCfyAaQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4CyEDIBpDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAsiCUEASCAFIAlMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBDGxqIgcgBygCACAEIAMgBWwgCWpBAXQiA0EBcmotAABB8AFxQQhyajYCACAHIAcoAgggAyAEai0AACIDQQhyQfgBcWo2AgggByAHKAIEIANBBHRBCHJB+AFxajYCBAsgDUEBaiENDAELCyABQQFqIQEMAAsACyARIBJsIQBBACEJQQAhDQNAIA0gE0YNBCALIA1qIA4gDUECdGooAgAgAG46AAAgDUEBaiENDAALAAsgE0EEEKcDIg5FDQMCQCAHQQFNBEAgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHyADtyEiIAm3ISNBACEBA0AgASAPRg0CIB8gISABt0QAAAAAAADgP6CiICOjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIB8gISANt0QAAAAAAADgP6CiICKjoCIeIAwrA0CiIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0GIAwgDCsDICAeIAwrAxCiIAogDCsDGKKgoCAgo7YiGjgCDCAMIAwrAzggHiAMKwMooiAKIAwrAzCioKAgIKO2Ihs4AgggCCAaIBsgDEEMaiAMQQhqEGsaIAwqAgwhGgJ/IABBAUYEQAJ/IAwqAghDAACAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBpDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLIQMgGkMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyIHQQBIIAUgB0xyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakECdGoiCSAJKAIAIAQgAyAFbCAHakEDbGoiAy0AASADLQAAaiADLQACakEDbmo2AgALIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgB0F+cUECRgRAIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR8gA7chIiAJtyEjQQAhAQNAIAEgD0YNAiAfICEgAbdEAAAAAAAA4D+goiAjo6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAfICEgDbdEAAAAAAAA4D+goiAio6AiHiAMKwNAoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENBiAMIAwrAyAgHiAMKwMQoiAKIAwrAxiioKAgIKO2Iho4AgwgDCAMKwM4IB4gDCsDKKIgCiAMKwMwoqCgICCjtiIbOAIIIAggGiAbIAxBDGogDEEIahBrGiAMKgIMIRoCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLQQJtQQF0IQMCfyAaQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4CyEDIBpDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAsiB0EASCAFIAdMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBAnRqIgkgCSgCACAEIAMgBWwgB2pBAnQiA0EBcmotAAAgAyAEai0AAGogBCADQQJyai0AAGpBA25qNgIACyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAdBfXFBBEYEQCAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEfIAO3ISIgCbchI0EAIQEDQCABIA9GDQIgHyAhIAG3RAAAAAAAAOA/oKIgI6OgIQpBACENA0AgDSAQRwRAIAwrA1AgHyAhIA23RAAAAAAAAOA/oKIgIqOgIh4gDCsDQKIgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQYgDCAMKwMgIB4gDCsDEKIgCiAMKwMYoqCgICCjtiIaOAIMIAwgDCsDOCAeIAwrAyiiIAogDCsDMKKgoCAgo7YiGzgCCCAIIBogGyAMQQxqIAxBCGoQaxogDCoCDCEaAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4C0ECbUEBdCEDAn8gGkMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAshAyAaQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIgdBAEggBSAHTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQJ0aiIJIAkoAgAgBCADIAVsIAdqQQJ0IgNBAnJqLQAAIAQgA0EBcmotAABqIAQgA0EDcmotAABqQQNuajYCAAsgDUEBaiENDAELCyABQQFqIQEMAAsACwJAAkACQAJAAkACQCAHQQVrDgoABwECAwQFAAAABwsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHyADtyEiIAm3ISNBACEBA0AgASAPRg0GIB8gISABt0QAAAAAAADgP6CiICOjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIB8gISANt0QAAAAAAADgP6CiICKjoCIeIAwrA0CiIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0KIAwgDCsDICAeIAwrAxCiIAogDCsDGKKgoCAgo7YiGjgCDCAMIAwrAzggHiAMKwMooiAKIAwrAzCioKAgIKO2Ihs4AgggCCAaIBsgDEEMaiAMQQhqEGsaIAwqAgwhGgJ/IABBAUYEQAJ/IAwqAghDAACAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBpDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLIQMgGkMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyIHQQBIIAUgB0xyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakECdGoiCSAJKAIAIAQgAyAFbCAHamotAABqNgIACyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR8gA7chIiAJtyEjQQAhAQNAIAEgD0YNBSAfICEgAbdEAAAAAAAA4D+goiAjo6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAfICEgDbdEAAAAAAAA4D+goiAio6AiHiAMKwNAoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENCSAMIAwrAyAgHiAMKwMQoiAKIAwrAxiioKAgIKO2Iho4AgwgDCAMKwM4IB4gDCsDKKIgCiAMKwMwoqCgICCjtiIbOAIIIAggGiAbIAxBDGogDEEIahBrGiAMKgIMIRoCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLQQJtQQF0IQMCfyAaQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4CyEDIBpDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAsiB0EASCAFIAdMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBAnRqIgkgCSgCACAEIAMgBWwgB2pBAXRBAXJqLQAAajYCAAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEfIAO3ISIgCbchI0EAIQEDQCABIA9GDQQgHyAhIAG3RAAAAAAAAOA/oKIgI6OgIQpBACENA0AgDSAQRwRAIAwrA1AgHyAhIA23RAAAAAAAAOA/oKIgIqOgIh4gDCsDQKIgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQggDCAMKwMgIB4gDCsDEKIgCiAMKwMYoqCgICCjtiIaOAIMIAwgDCsDOCAeIAwrAyiiIAogDCsDMKKgoCAgo7YiGzgCCCAIIBogGyAMQQxqIAxBCGoQaxogDCoCDCEaAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4C0ECbUEBdCEDAn8gGkMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAshAyAaQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIgdBAEggBSAHTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQJ0aiIJIAkoAgAgBCADIAVsIAdqQQF0ai0AAGo2AgALIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHyADtyEiIAm3ISNBACEBA0AgASAPRg0DIB8gISABt0QAAAAAAADgP6CiICOjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIB8gISANt0QAAAAAAADgP6CiICKjoCIeIAwrA0CiIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0HIAwgDCsDICAeIAwrAxCiIAogDCsDGKKgoCAgo7YiGjgCDCAMIAwrAzggHiAMKwMooiAKIAwrAzCioKAgIKO2Ihs4AgggCCAaIBsgDEEMaiAMQQhqEGsaIAwqAgwhGgJ/IABBAUYEQAJ/IAwqAghDAACAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBpDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLIQMgGkMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyIHQQBIIAUgB0xyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakECdGoiCSAJKAIAIAQgAyAFbCAHakEBdCIDai0AACIHQfgBcSAEIANBAXJqLQAAIgNBA3RB+AFxaiAHQQV0IANBA3ZyQfwBcWpBCmpBA25qNgIACyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR8gA7chIiAJtyEjQQAhAQNAIAEgD0YNAiAfICEgAbdEAAAAAAAA4D+goiAjo6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAfICEgDbdEAAAAAAAA4D+goiAio6AiHiAMKwNAoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENBiAMIAwrAyAgHiAMKwMQoiAKIAwrAxiioKAgIKO2Iho4AgwgDCAMKwM4IB4gDCsDKKIgCiAMKwMwoqCgICCjtiIbOAIIIAggGiAbIAxBDGogDEEIahBrGiAMKgIMIRoCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLQQJtQQF0IQMCfyAaQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4CyEDIBpDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAsiB0EASCAFIAdMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBAnRqIgkgCSgCACAEIAMgBWwgB2pBAXQiA2otAAAiB0H4AXEgBCADQQFyai0AACIDQQJ0QfgBcWogB0EFdCADQQN2ckH4AXFqQQxqQQNuajYCAAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEfIAO3ISIgCbchI0EAIQEDQCABIA9GDQEgHyAhIAG3RAAAAAAAAOA/oKIgI6OgIQpBACENA0AgDSAQRwRAIAwrA1AgHyAhIA23RAAAAAAAAOA/oKIgIqOgIh4gDCsDQKIgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQUgDCAMKwMgIB4gDCsDEKIgCiAMKwMYoqCgICCjtiIaOAIMIAwgDCsDOCAeIAwrAyiiIAogDCsDMKKgoCAgo7YiGzgCCCAIIBogGyAMQQxqIAxBCGoQaxogDCoCDCEaAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIbi0MAAABPXQRAIBuoDAELQYCAgIB4C0ECbUEBdCEDAn8gGkMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiG4tDAAAAT10EQCAbqAwBC0GAgICAeAshAyAaQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIgdBAEggBSAHTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQJ0aiIJIAkoAgAgBCADIAVsIAdqQQF0IgNqLQAAIgdB8AFxIAdBBHRB8AFxaiAEIANBAXJqLQAAQQhyQfgBcWpBEGpBA25qNgIACyANQQFqIQ0MAQsLIAFBAWohAQwACwALIBEgEmwhAEEAIQlBACENA0AgDSATRg0DIAsgDWogDiANQQJ0aigCACAAbjoAACANQQFqIQ0MAAsAC0EAQQNBnxZBABAvC0F/IQkLIA4QKiAMQeABaiQAIAkPC0EAQQNB5wtBABAvQQEQAQALWgECfyMAQRBrIgIkACACIAE2AgwgASAAEMYGIgNNBEAgABDXASIAIANBAXZJBEAgAiAAQQF0NgIIIAJBCGogAkEMahB1KAIAIQMLIAJBEGokACADDwsQhwEACwwAIAEgAi0AADoAAAshACAAIAE2AgAgACABKAIEIgE2AgQgACABIAJqNgIIIAALWgECfyMAQRBrIgIkACACIAE2AgwgASAAEMgGIgNNBEAgABDDASIAIANBAXZJBEAgAiAAQQF0NgIIIAJBCGogAkEMahB1KAIAIQMLIAJBEGokACADDwsQhwEACyAAIAEgAikCADcCACABIAIoAhA2AhAgASACKQIINwIIC1oCAX8BfgJAAn9BACAARQ0AGiAArSABrX4iA6ciAiAAIAFyQYCABEkNABpBfyACIANCIIinGwsiAhAwIgBFDQAgAEEEay0AAEEDcUUNACAAQQAgAhAyGgsgAAtJAQJ/IAAoAgQiBUEIdSEGIAAoAgAiACABIAVBAXEEfyACKAIAIAZqKAIABSAGCyACaiADQQIgBUECcRsgBCAAKAIAKAIYEQUAC0UBAX8jAEEQayICJAACQCABEI0BRQRAIAAgASgCCDYCCCAAIAEpAgA3AgAMAQsgACABKAIAIAEoAgQQpAQLIAJBEGokAAtNACAAQQA2AhQgACABNgIYIABBADYCDCAAQoKggIDgADcCBCAAIAFFNgIQIABBIGpBAEEoEDIaIABBHGoQqwQgAEEANgJIIABBfzYCTAsRACAAIAEgASgCACgCKBECAAsIAEH/////BwsFAEH/AAsrAAJAIAAgAUYNAANAIAAgAUEEayIBTw0BIAAgARBHIABBBGohAAwACwALC94DAQh/IwBBEGsiCiQAIAYQjgEhCyAKIAYQlAIiBhCWAQJAIAoQsQEEQCALIAAgAiADEOEBIAUgAyACIABrQQJ0aiIGNgIADAELIAUgAzYCAAJAAkAgACIILQAAIgdBK2sOAwABAAELIAsgB0EYdEEYdRCYASEIIAUgBSgCACIHQQRqNgIAIAcgCDYCACAAQQFqIQgLAkAgAiAIa0ECSA0AIAgtAABBMEcNACAILQABQSByQfgARw0AIAtBMBCYASEHIAUgBSgCACIJQQRqNgIAIAkgBzYCACALIAgsAAEQmAEhByAFIAUoAgAiCUEEajYCACAJIAc2AgAgCEECaiEICyAIIAIQkwJBACEJIAYQlwEhDEEAIQcgCCEGA38gAiAGTQR/IAMgCCAAa0ECdGogBSgCABCuAyAFKAIABQJAIAogBxA2LQAARQ0AIAkgCiAHEDYsAABHDQAgBSAFKAIAIglBBGo2AgAgCSAMNgIAIAcgByAKEC5BAWtJaiEHQQAhCQsgCyAGLAAAEJgBIQ0gBSAFKAIAIg5BBGo2AgAgDiANNgIAIAZBAWohBiAJQQFqIQkMAQsLIQYLIAQgBiADIAEgAGtBAnRqIAEgAkYbNgIAIAoQMRogCkEQaiQAC9ABAQJ/IAJBgBBxBEAgAEErOgAAIABBAWohAAsgAkGACHEEQCAAQSM6AAAgAEEBaiEACyACQYQCcSIDQYQCRwRAIABBrtQAOwAAIABBAmohAAsgAkGAgAFxIQIDQCABLQAAIgQEQCAAIAQ6AAAgAEEBaiEAIAFBAWohAQwBCwsgAAJ/AkAgA0GAAkcEQCADQQRHDQFBxgBB5gAgAhsMAgtBxQBB5QAgAhsMAQtBwQBB4QAgAhsgA0GEAkYNABpBxwBB5wAgAhsLOgAAIANBhAJHC9EDAQh/IwBBEGsiCiQAIAYQkwEhCyAKIAYQlgIiBhCWAQJAIAoQsQEEQCALIAAgAiADEOIBIAUgAyACIABraiIGNgIADAELIAUgAzYCAAJAAkAgACIILQAAIgdBK2sOAwABAAELIAsgB0EYdEEYdRB8IQggBSAFKAIAIgdBAWo2AgAgByAIOgAAIABBAWohCAsCQCACIAhrQQJIDQAgCC0AAEEwRw0AIAgtAAFBIHJB+ABHDQAgC0EwEHwhByAFIAUoAgAiCUEBajYCACAJIAc6AAAgCyAILAABEHwhByAFIAUoAgAiCUEBajYCACAJIAc6AAAgCEECaiEICyAIIAIQkwJBACEJIAYQlwEhDEEAIQcgCCEGA38gAiAGTQR/IAMgCCAAa2ogBSgCABCTAiAFKAIABQJAIAogBxA2LQAARQ0AIAkgCiAHEDYsAABHDQAgBSAFKAIAIglBAWo2AgAgCSAMOgAAIAcgByAKEC5BAWtJaiEHQQAhCQsgCyAGLAAAEHwhDSAFIAUoAgAiDkEBajYCACAOIA06AAAgBkEBaiEGIAlBAWohCQwBCwshBgsgBCAGIAMgASAAa2ogASACRhs2AgAgChAxGiAKQRBqJAALMQAgAi0AACECA0ACQCAAIAFHBH8gAC0AACACRw0BIAAFIAELDwsgAEEBaiEADAALAAvrAwEBfyMAQRBrIgwkACAMIAA6AA8CQAJAIAAgBUYEQCABLQAARQ0BQQAhACABQQA6AAAgBCAEKAIAIgFBAWo2AgAgAUEuOgAAIAcQLkUNAiAJKAIAIgEgCGtBnwFKDQIgCigCACECIAkgAUEEajYCACABIAI2AgAMAgsCQCAAIAZHDQAgBxAuRQ0AIAEtAABFDQFBACEAIAkoAgAiASAIa0GfAUoNAiAKKAIAIQAgCSABQQRqNgIAIAEgADYCAEEAIQAgCkEANgIADAILQX8hACALIAtBIGogDEEPahCyAyALayIFQR9KDQEgBUHAvANqLQAAIQYCQAJAAkACQCAFQRZrDgQBAQAAAgsgAyAEKAIAIgFHBEAgAUEBay0AAEHfAHEgAi0AAEH/AHFHDQULIAQgAUEBajYCACABIAY6AABBACEADAQLIAJB0AA6AAAMAQsgAiwAACIAIAZB3wBxRw0AIAIgAEGAAXI6AAAgAS0AAEUNACABQQA6AAAgBxAuRQ0AIAkoAgAiACAIa0GfAUoNACAKKAIAIQEgCSAAQQRqNgIAIAAgATYCAAsgBCAEKAIAIgBBAWo2AgAgACAGOgAAQQAhACAFQRVKDQEgCiAKKAIAQQFqNgIADAELQX8hAAsgDEEQaiQAIAALXAEBfyMAQRBrIgUkACAFQQhqIAEQPyAFQQhqEJMBQcC8A0HgvAMgAhDiASADIAVBCGoQlgIiARC3AToAACAEIAEQlwE6AAAgACABEJYBIAVBCGoQOiAFQRBqJAALngECAX8DfiMAQaABayIEJAAgBEEQakEAQZABEDIaIARBfzYCXCAEIAE2AjwgBEF/NgIYIAQgATYCFCAEQRBqQgAQvQEgBCAEQRBqIANBARD5BCAEKQMIIQUgBCkDACEGIAIEQCACIAEgASAEKQOIASAEKAIUIAQoAhhrrHwiB6dqIAdQGzYCAAsgACAGNwMAIAAgBTcDCCAEQaABaiQACw0AIAAgASACQn8QvwQLXQECfwJAIAAoAgAiAkUNAAJ/IAIoAhgiAyACKAIcRgRAIAIgARDEASACKAIAKAI0EQMADAELIAIgA0EBajYCGCADIAE6AAAgARDEAQtBfxC4AUUNACAAQQA2AgALCwkAIAAQ7gIQKgu6AQECfyMAQRBrIgIkACAAIAAoAgBBDGsoAgBqKAIYBEAgAkEIaiIBIAA2AgQgAUEAOgAAIAAgACgCAEEMaygCAGoQuwMEQCAAIAAoAgBBDGsoAgBqKAJIBEAgACAAKAIAQQxrKAIAaigCSBC5AwsgAUEBOgAACwJAIAEtAABFDQAgACAAKAIAQQxrKAIAaigCGBDCAkF/Rw0AIAAgACgCAEEMaygCAGpBARC3AgsgARDAAgsgAkEQaiQAC4sCAgd/AXwjAEEgayIGJAAgBiAEQQR0EDAiCjYCECAKBEACQCAGIARBGGwQMCILNgIUIAtFDQAgBEEAIARBAEobIQwDQCAJIAxGRQRAIAogCUEEdCIHaiIIIAIgB2oiBysDADkDACAIIAcrAwg5AwggCyAJQRhsIghqIgcgAyAIaiIIKwMAOQMAIAcgCCsDCDkDCCAHIAgrAxA5AxAgCUEBaiEJDAELCyAGIAQ2AhggACgCACAGQRBqIAEgBSAGQQhqEM0CQX9MBEAgBkKAgICAwPD1y8EANwMICyAGKAIQECogBigCFBAqIAYrAwghDSAGQSBqJAAgDQ8LC0EAQQNBtAtBABAvQQEQAQALCAAgACgCEEULCQAgABDyAhAqCxQAIABB9JUDNgIAIABBBGoQOiAACxQAIABBtJUDNgIAIABBBGoQOiAAC2oBAn8gAEH0lwM2AgAgACgCKCEBA0AgAQRAQQAgACABQQFrIgFBAnQiAiAAKAIkaigCACAAKAIgIAJqKAIAEQcADAELCyAAQRxqEDogACgCIBAqIAAoAiQQKiAAKAIwECogACgCPBAqIAALCwAgAEGIsQQQvAELCwAgAEGAsQQQvAELLwEBfyAAQQRqEOgEIQIgAEHIlwM2AgAgAkHclwM2AgAgAEG8lwMoAgBqIAEQqgMLLwEBfyAAQQRqENAEIQIgAEGYlwM2AgAgAkGslwM2AgAgAEGMlwMoAgBqIAEQqgMLCQAgACABEOwEC9kDAgJ+An8jAEEgayIEJAACQCABQv///////////wCDIgNCgICAgICAwIA8fSADQoCAgICAgMD/wwB9VARAIAFCBIYgAEI8iIQhAyAAQv//////////D4MiAEKBgICAgICAgAhaBEAgA0KBgICAgICAgMAAfCECDAILIANCgICAgICAgIBAfSECIABCgICAgICAgIAIhUIAUg0BIAIgA0IBg3whAgwBCyAAUCADQoCAgICAgMD//wBUIANCgICAgICAwP//AFEbRQRAIAFCBIYgAEI8iIRC/////////wODQoCAgICAgID8/wCEIQIMAQtCgICAgICAgPj/ACECIANC////////v//DAFYNAEIAIQIgA0IwiKciBUGR9wBJDQAgBEEQaiAAIAFC////////P4NCgICAgICAwACEIgIgBUGB9wBrEIgBIAQgACACQYH4ACAFaxCbAiAEKQMIQgSGIAQpAwAiAEI8iIQhAiAEKQMQIAQpAxiEQgBSrSAAQv//////////D4OEIgBCgYCAgICAgIAIWgRAIAJCAXwhAgwBCyAAQoCAgICAgICACIVCAFINACACQgGDIAJ8IQILIARBIGokACACIAFCgICAgICAgICAf4OEvwtBAQF/IwBBEGsiBSQAIAUgASACIAMgBEKAgICAgICAgIB/hRCZASAAIAUpAwA3AwAgACAFKQMINwMIIAVBEGokAAvEAQIBfwJ+QX8hAwJAIABCAFIgAUL///////////8AgyIEQoCAgICAgMD//wBWIARCgICAgICAwP//AFEbDQBBACACQv///////////wCDIgVCgICAgICAwP//AFYgBUKAgICAgIDA//8AURsNACAAIAQgBYSEUARAQQAPCyABIAKDQgBZBEBBACABIAJTIAEgAlEbDQEgACABIAKFhEIAUg8LIABCAFIgASACVSABIAJRGw0AIAAgASAChYRCAFIhAwsgAwuvAQEGfyMAQfABayIGJAAg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AigCACEEIAIQngYaIAQQKgsgDUEgaiQACyABELMCIQcgARDfAiENIwBBIGsiBCQAIAQgDTYCECAEIAc2AhggBEEQaiAEQRhqEJUDIQ8jAEEgayICJAAgAiANNgIQIAIgBzYCGAJAIA9BAkgNACACIAJBGGogD0ECa0EBdiIHEOsBNgIIIAIoAgggAkEQahDKASgCABCjAkUNACACIAIoAhApAgA3AwADQAJAIAIoAhAgAigCCCkCADcCACACIAIoAgg2AhAgB0UNACACIAJBGGogB0EBa0ECbSIHEOsBNgIIIAIoAgggAhCjAg0BCwsgAigCECACKQIANwIACyACQSBqJAAgBEEgaiQACyAFQQFqIQUMAAsACwUgCiAFEDMoAgBBBGogAxCOAyECIAlBCGogCiAFEDMoAgAgAhDnARogBiAFEEMgCSkDCDcCACACIAQgAiAESSICGyEEIAUgCCACGyEIIAVBAWohBQwBCwtB4KkEQZfJARApQYSOARApQbPSABApQZsBECxBt9gAEClBmsoBECkQLRAAAAsgBhDwBSAJQSBqJABBACECA0AgDBA8IAJNBEACQCAAKAJkIAAoAmhODQAgARDSBQ0AIAEoAgAoAgAhAiABENUFIAAgACgCZEEBajYCZCAAIAEgAiADEN4DCyAMEHkFIAAgASAMIAIQMygCACADEN4DIAJBAWohAgwBCwsLIAtBIGokAAtZAQF9IAAgAioCCCACKgIAIAOUIAIqAgQgBJSSkiACKgIgIAIqAhggA5QgAioCHCAElJKSIgWVOAIAIAEgAioCFCACKgIMIAOUIAIqAhAgBJSSkiAFlTgCAAtUAQF/IAAQngIgAQRAIAAQ/QMgAUkEQBCHAQALIAAQKxogACABEKoGIgI2AgAgACACNgIEIAAQKyACIAFBAnRqNgIAIABBABCaAyAAIAEQnAMLIAALCwAgACABQSQQNxoLCgAgASAAa0EMbQtgAgN/AXwgACgCBCICIAEoAgRGBEAgAkEAIAJBAEobIQIDQCACIANGRQRAIAUgA0EDdCIEIAAoAgBqKwMAIAEoAgAgBGorAwCioCEFIANBAWohAwwBCwsgBQ8LQQAQAQALWwECfyACQQAgAkEAShshAgNAIAIgBEcEQCAAIARBAnRqAn8gAyADKAIAQf2HDWxBw72aAWoiBTYCACAA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gNAAaiAKNgIAIAAhBQwECyACQQA7AQAMAwsgAkEEaiECIApBAWohCiAIIAxqQQRqIQwMBQsgByADQRB0QRB1QRxsaiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAwBCyAHIANBEHRBEHVBHGxqIgBBjIDQAGogCjYCACAAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAsgAkECaiECIAxBAmohDCAEQQFqIQQMAAsACwsgBUEAIAVBAEobIgNBAWohBUEBIQBBASECA0AgACAFRwRAAkAgACABKAIAIgRGBEAgAiIEQQFqIQIMAQsgBEECdCAHakGMgMgAaigCACEECyABIAQ2AgAgAUEEaiEBIABBAWohAAwBCwsgByACQQFrIgA2AghBACAARQ0BGkEAIQQgB0EMakEAIABBAnQQMhogB0GQgChqQQAgAEEEdBAyGiAAQQAgAEEAShshBSAHQYyACGohAUEAIQADQCAAIAVGBEAgB0GQgChqIQEDQCADIARGBEBBACEDIAcoAggiAEEAIABBAEobIQIgB0GQgChqIQFBACEAA0AgACACRg0FIAEgAEEEdCIEaiIFIAUrAwAgByAAQQJ0aigCDLciFqM5AwAgASAEQQhyaiIEIAQrAwAgFqM5AwAgAEEBaiEADAALAAsgByAHIARBAnRqQZCAyABqKAIAQQFrIgJBAnQiBWoiACAAKAIMIAcgBEEHbEECdGoiAEGQgNAAaigCAGo2AgwgASACQQR0IgJqIgYgBisDACAAQZSA0ABqKAIAt6A5AwAgASACQQhyaiIGIAYrAwAgAEGYgNAAaigCALegOQMAIABBnIDQAGooAgAiBiACIAdqQYyACGoiAigCAEgEQCACIAY2AgALIABBoIDQAGooAgAiBiAHIAVBAnQiAkEEcmpBjIAIaiIFKAIASgRAIAUgBjYCAAsgAEGkgNAAaigCACIFIAcgAkEIcmpBjIAIaiIGKAIASARAIAYgBTYCAAsgAEGogNAAaigCACIAIAcgAkEMcmpBjIAIaiICKAIASgRAIAIgADYCAAsgBEEBaiEEDAALAAUgASAAQQR0IgJqIAs2AgAgASACQQRyakEANgIAIAEgAkEIcmogDTYCACABIAJBDHJqQQA2AgAgAEEBaiEADAELAAsACyADCw8LIAgEQAJ/IAAhBUEAIQAgASIGQQAgAUEAShshCiAHKAIAIgMgASACIg9BAWsiAWxBAXRqIQQgAyECA0AgACAKRwRAIARBADsBACACQQA7AQAgAEEBaiEAIAJBAmohAiAEQQJqIQQMAQsLIA9BACAPQQBKGyEJIAMgBkEBayIKQQF0aiEEQQAhACADIQIDQCAAIAlHBEAgBEEAOwEAIAJBADsBACAAQQFqIQAgBCAGQQF0IgtqIQQgAiALaiECDAELCyABQQEgAUEBShshEiAHQZCAyABqIQEgCCAGQQFqIgBqIQwgACAFaiELIApBASAKQQFKGyITQQFrIQ0gAyAAQQF0aiECQQAgBmtBAXQhFEEAIQVBASEKAkADQCAKIBJHBEAgCyANaiEQIAwgDWohDkEBIQQDQAJAAkACQCAEIBNHBEAgCy0AACAMLQAASwRAIAIgFGoiAC8BACIDQRB0QRB1IghBAU4EQCACIAg7AQAgByADQRxsaiIAQYyA0ABqIAo2AgAgAEH0/88AaiIDIAMoAgBBAWo2AgAgAEH4/88AaiIDIAMoAgAgBGo2AgAgAEH8/88AaiIAIAAoAgAgCmo2AgAMBQsgAEECay8BACIIQRB0QRB1IQMgAC4BAiIAQQFOBEAgA0EBTgRAIAdBkIDIAGoiCSAAQQJ0akEEaygCACIDIAhBAnQgCWpBBGsoAgAiCEoEQCACIAg7AQBBACEJIAVBACAFQQBKGyERIAEhAANAIAkgEUYEQCAIIQMMCAsgAyAAKAIARgRAIAAgCDYCAAsgCUEBaiEJIABBBGohAAwACwALIAIgAzsBACADIAhODQVBACEJIAVBACAFQQBKGyERIAEhAANAIAkgEUYNBiAIIAAoAgBGBEAgACADNgIACyAJQQFqIQkgAEEEaiEADAALAAsgAkECay4BACIIQQFOBEAgB0GQgMgAaiIJIABBAnRqQQRrKAIAIgMgCEH//wNxQQJ0IAlqQQRrKAIAIghKBEAgAiAIOwEAQQAhCSAFQQAgBUEAShshESABIQADQCAJIBFGBEAgCCEDDAcLIAMgACgCAEYEQCAAIAg2AgALIAlBAWohCSAAQQRqIQAMAAsACyACIAM7AQAgAyAITg0EQQAhCSAFQQAgBUEAShshESABIQADQCAJIBFGDQUgCCAAKAIARgRAIAAgAzYCAAsgCUEBaiEJIABBBGohAAwACwALIAIgADsBACAHIABBB2xBAnRqIgBB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiAyADKAIAIApqNgIAIAQgAEGAgNAAaiIDKAIASARAIAMgBDYCAAsgAEGMgNAAaiAKNgIADAULIANBAU4EQCACIAM7AQAgByAIQQdsQQJ0aiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgMgAygCACAKajYCACAEIABBhIDQAGoiAygCAEoEQCADIAQ2AgALIABBjIDQAGogCjYCAAwFCyACQQJrLwEAIgBBEHRBEHUiA0EBTgRAIAIgAzsBACAHIABBHGxqIgBB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiAyADKAIAIApqNgIAIABBhIDQAGoiACgCACAETg0FIAAgBDYCAAwFCyAFQYCAAk4EQEEAQQNBoAlBABAvQX8hCwwJCyACIAVBAWoiADsBACAHIAVBAnRqQZCAyABqIABBEHRBEHU2AgAgByAFQRxsaiIDQZSA0ABqIAQ2AgAgA0GQgNAAakEBNgIAIANBmIDQAGogCjYCACADQZyA0ABqIAQ2AgAgA0GggNAAaiAENgIAIANBpIDQAGogCjYCACADQaiA0ABqIAo2AgAgACEFDAQLIAJBADsBAAwDCyACQQRqIQIgDkECaiEMIBBBAmohCyAKQQFqIQoMBQsgByADQRB0QRB1QRxsaiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAwBCyAHIANBEHRBEHVBHGxqIgBBjIDQAGogCjYCACAAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAsgAkECaiECIAxBAWohDCALQQFqIQsgBEEBaiEEDAALAAsLIAVBACAFQQBKGyIDQQFqIQVBASEAQQEhAgNA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0ABqIAo2AgAgA0GogNAAaiAKNgIAIAAhBQwECyACQQA7AQAMAwsgAkEEaiECIApBAWohCiAIIAxqQQRqIQwMBQsgByADQRB0QRB1QRxsaiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAwBCyAHIANBEHRBEHVBHGxqIgBBjIDQAGogCjYCACAAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAsgAkECaiECIAxBAmohDCAEQQFqIQQMAAsACwsgBUEAIAVBAEobIgNBAWohBUEBIQBBASECA0AgACAFRwRAAkAgACABKAIAIgRGBEAgAiIEQQFqIQIMAQsgBEECdCAHakGMgMgAaigCACEECyABIAQ2AgAgAUEEaiEBIABBAWohAAwBCwsgByACQQFrIgA2AghBACAARQ0BGkEAIQQgB0EMakEAIABBAnQQMhogB0GQgChqQQAgAEEEdBAyGiAAQQAgAEEAShshBSAHQYyACGohAUEAIQADQCAAIAVGBEAgB0GQgChqIQEDQCADIARGBEBBACEDIAcoAggiAEEAIABBAEobIQIgB0GQgChqIQFBACEAA0AgACACRg0FIAEgAEEEdCIEaiIFIAUrAwAgByAAQQJ0aigCDLciFqM5AwAgASAEQQhyaiIEIAQrAwAgFqM5AwAgAEEBaiEADAALAAsgByAHIARBAnRqQZCAyABqKAIAQQFrIgJBAnQiBWoiACAAKAIMIAcgBEEHbEECdGoiAEGQgNAAaigCAGo2AgwgASACQQR0IgJqIgYgBisDACAAQZSA0ABqKAIAt6A5AwAgASACQQhyaiIGIAYrAwAgAEGYgNAAaigCALegOQMAIABBnIDQAGooAgAiBiACIAdqQYyACGoiAigCAEgEQCACIAY2AgALIABBoIDQAGooAgAiBiAHIAVBAnQiAkEEcmpBjIAIaiIFKAIASgRAIAUgBjYCAAsgAEGkgNAAaigCACIFIAcgAkEIcmpBjIAIaiIGKAIASARAIAYgBTYCAAsgAEGogNAAaigCACIAIAcgAkEMcmpBjIAIaiICKAIASgRAIAIgADYCAAsgBEEBaiEEDAALAAUgASAA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CQsgAiAFQQFqIgA7AQAgByAFQQJ0akGQgMgAaiAAQRB0QRB1NgIAIAcgBUEcbGoiA0GUgNAAaiAENgIAIANBkIDQAGpBATYCACADQZiA0ABqIAo2AgAgA0GcgNAAaiAENgIAIANBoIDQAGogBDYCACADQaSA0ABqIAo2AgAgA0GogNAAaiAKNgIAIAAhBQwECyACQQA7AQAgDUEAOgAADAMLIA1BAmohDSACQQRqIQIgCkEBaiEKIAggC2pBBGohCwwFCyAHIANBEHRBEHVBHGxqIgBB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiACAAKAIAIApqNgIADAELIAcgA0EQdEEQdUEcbGoiAEGMgNAAaiAKNgIAIABB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiACAAKAIAIApqNgIACyANQQFqIQ0gAkECaiECIAtBAmohCyAEQQFqIQQMAAsACwsgBUEAIAVBAEobIgNBAWohBUEBIQBBASECA0AgACAFRwRAAkAgACABKAIAIgRGBEAgAiIEQQFqIQIMAQsgBEECdCAHakGMgMgAaigCACEECyABIAQ2AgAgAUEEaiEBIABBAWohAAwBCwsgByACQQFrIgA2AghBACAARQ0BGkEAIQQgB0EMakEAIABBAnQQMhogB0GQgChqQQAgAEEEdBAyGiAAQQAgAEEAShshBSAHQYyACGohAUEAIQADQCAAIAVGBEAgB0GQgChqIQEDQCADIARGBEBBACELIAcoAggiAEEAIABBAEobIQIgB0GQgChqIQFBACEAA0AgACACRg0FIAEgAEEEdCIDaiIEIAQrAwAgByAAQQJ0aigCDLciFqM5AwAgASADQQhyaiIDIAMrAwAgFqM5AwAgAEEBaiEADAALAAsgByAHIARBAnRqQZCAyABqKAIAQQFrIgJBAnQiBWoiACAAKAIMIAcgBEEHbEECdGoiAEGQgNAAaigCAGo2AgwgASACQQR0IgJqIgYgBisDACAAQZSA0ABqKAIAt6A5AwAgASACQQhyaiIGIAYrAwAgAEGYgNAAaigCALegOQMAIABBnIDQAGooAgAiBiACIAdqQYyACGoiAigCAEgEQCACIAY2AgALIABBoIDQAGoo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CwsgByACQQFrIgA2AghBACAARQ0BGkEAIQQgB0EMakEAIABBAnQQMhogB0GQgChqQQAgAEEEdBAyGiAAQQAgAEEAShshBSAHQYyACGohAUEAIQADQCAAIAVGBEAgB0GQgChqIQEDQCADIARGBEBBACEMIAcoAggiAEEAIABBAEobIQIgB0GQgChqIQFBACEAA0AgACACRg0FIAEgAEEEdCIDaiIEIAQrAwAgByAAQQJ0aigCDLciFqM5AwAgASADQQhyaiIDIAMrAwAgFqM5AwAgAEEBaiEADAALAAsgByAHIARBAnRqQZCAyABqKAIAQQFrIgJBAnQiBWoiACAAKAIMIAcgBEEHbEECdGoiAEGQgNAAaigCAGo2AgwgASACQQR0IgJqIgYgBisDACAAQZSA0ABqKAIAt6A5AwAgASACQQhyaiIGIAYrAwAgAEGYgNAAaigCALegOQMAIABBnIDQAGooAgAiBiACIAdqQYyACGoiAigCAEgEQCACIAY2AgALIABBoIDQAGooAgAiBiAHIAVBAnQiAkEEcmpBjIAIaiIFKAIASgRAIAUgBjYCAAsgAEGkgNAAaigCACIFIAcgAkEIcmpBjIAIaiIGKAIASARAIAYgBTYCAAsgAEGogNAAaigCACIAIAcgAkEMcmpBjIAIaiICKAIASgRAIAIgADYCAAsgBEEBaiEEDAALAAUgASAAQQR0IgJqIAY2AgAgASACQQRyakEANgIAIAEgAkEIcmogDzYCACABIAJBDHJqQQA2AgAgAEEBaiEADAELAAsACyAMCw8LAn8gACEGIAUhDyABIghBAm0iDEEAIAxBAEobIQUgBygCACIDIAJBAm0iEkEBayIBIAxsQQF0aiEEQQAhACADIQIDQCAAIAVHBEAgBEEAOwEAIAJBADsBACAAQQFqIQAgAkECaiECIARBAmohBAwBCwsgEkEAIBJBAEobIQogAyAMQQFrIgVBAXRqIQRBACEAIAMhAgNAIAAgCkcEQCAEQQA7AQAgAkEAOwEAIABBAWohACAEIAxBAXQiCWohBCACIAlqIQIMAQsLIAFBASABQQFKGyETIAVBASAFQQFKGyEUIAdBkIDIAGohASAMQQFqIgAgBygCBGohDSAIQQF0IAZqQQJqIQsgAyAAQQF0aiECQQAgDGtBAXQhEEEAIQVBASEKAkADQCAK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EDogACACNgIoIAAgATYCJCAAIAEQmAI6ACwgA0EQaiQAC14BAn8jAEEQayIDJAAgABDdBCEEIAAgATYCICAAQeSTAzYCACADQQhqIAQQ9QIgA0EIahDBAyEBIANBCGoQOiAAIAI2AiggACABNgIkIAAgARCYAjoALCADQRBqJAALCgAgASAAa0ECdQt9AQN/IwBBEGsiBSQAIwBBEGsiAyQAIAAgARDEAyEBA0AgAQRAIAMgADYCDCADIAMoAgwgAUEBdiIEQQJ0ajYCDCABIARBf3NqIAQgAygCDCACEO0BIgQbIQEgAygCDEEEaiAAIAQbIQAMAQsLIANBEGokACAFQRBqJAAgAAuMAQEDf0HwngRB8J4EKAIAQQFqIgU2AgAgACAFNgIAAkAgAwRAA0AgAiAEQQN0aiIGKAIARQ0CIARBAWoiBCADRw0ACwsgACABIAIgA0EEdEEIchDkAiADQQF0IgAQ7gQhASAAEAIgAQ8LIAYgBTYCACACIARBA3RqIgAgATYCBCAAQQA2AgggAxACIAILhBECBX8LfiMAQcABayIFJAAgBEL///////8/gyESIAJC////////P4MhDCACIASFQoCAgICAgICAgH+DIREgBEIwiKdB//8BcSEHAkACQAJAIAJCMIinQf//AXEiCUEBa0H9/wFNBEAgB0EBa0H+/wFJDQELIAFQIAJC////////////AIMiCkKAgICAgIDA//8AVCAKQoCAgICAgMD//wBRG0UEQCACQoCAgICAgCCEIREMAgsgA1AgBEL///////////8AgyICQoCAgICAgMD//wBUIAJCgICAgICAwP//AFEbRQRAIARCgICAgICAIIQhESADIQEMAgsgASAKQoCAgICAgMD//wCFhFAEQCADIAJCgICAgICAwP//AIWEUARAQgAhAUKAgICAgIDg//8AIREMAwsgEUKAgICAgIDA//8AhCERQgAhAQwCCyADIAJCgICAgICAwP//AIWEUARAQgAhAQwCCyABIAqEUA0CIAIgA4RQBEAgEUKAgICAgIDA//8AhCERQgAhAQwCCyAKQv///////z9YBEAgBUGwAWogASAMIAEgDCAMUCIGG3kgBkEGdK18pyIGQQ9rEIgBQRAgBmshBiAFKQO4ASEMIAUpA7ABIQELIAJC////////P1YNACAFQaABaiADIBIgAyASIBJQIggbeSAIQQZ0rXynIghBD2sQiAEgBiAIakEQayEGIAUpA6gBIRIgBSkDoAEhAwsgBUGQAWogEkKAgICAgIDAAIQiFEIPhiADQjGIhCICQoTJ+c6/5ryC9QAgAn0iBBCzASAFQYABakIAIAUpA5gBfSAEELMBIAVB8ABqIAUpA4gBQgGGIAUpA4ABQj+IhCIEIAIQswEgBUHgAGogBEIAIAUpA3h9ELMBIAVB0ABqIAUpA2hCAYYgBSkDYEI/iIQiBCACELMBIAVBQGsgBEIAIAUpA1h9ELMBIAVBMGogBSkDSEIBhiAFKQNAQj+IhCIEIAIQswEgBUEgaiAEQgAgBSkDOH0QswEgBUEQaiAFKQMoQgGGIAUpAyBCP4iEIgQgAhCzASAFIARCACAFKQMYfRCzASAGIAkgB2tqIQYCfkIAIAUpAwhCAYYgBSkDAEI/iIRCAX0iCkL/////D4MiBCACQiCIIgt+Ig4gCkIgiCIKIAJC/////w+DIg9+fCICQiCIIAIgDlStQiCGhCAKIAt+fCACQiCGIgsgBCAPfnwiAiALVK0gAiACIAQgA0IRiEL/////D4MiDn4iDyAKIANCD4ZCgID+/w+DIg1+fCILQiCGIhAgBCANfnwgEFStIAogDn4gCyAPVK1CIIYgC0IgiIR8fHwiAlatfHwgAkIAUq18fSILQv////8PgyIOIAR+Ig8gCiAOfiINIAQgC0IgiCIQfnwiC0IghnwiDiAPVK0gCiAQfiALIA1UrUIghiALQiCIhHx8IA5CACACfSICQiCIIgsgBH4iDyACQv////8PgyINIAp+fCICQiCGIhAgBCANfnwgEFStIAogC34gAiAPVK1CIIYgAkIgiIR8fHwiAiAOVK18IAJCAn0iDyACVK18QgF9IgtC/////w+DIgIgDEIChiABQj6IhEL/////D4MiBH4iDiABQh6IQv////8PgyIKIAtCIIgiC358Ig0gDlStIA0gDSAPQiCIIg4gDEIeiEL//+//D4NCgIAQhCIMfnwiDVatfCALIAx+fCACIAx+IhMgBCALfnwiECATVK1CIIYgEEIgiIR8IA0gDSAQQiCGfCINVq18IA0gDSAKIA5+IhMgD0L/////D4MiDyAEfnwiECATVK0gECAQIAIgAUIChkL8////D4MiE358IhBWrXx8Ig1WrXwgDSALIBN+IgsgDCAPfnwiDCAEIA5+fCIEIAIgCn58IgJCIIggAiAEVK0gCyAMVq0gBCAMVK18fEIghoR8IgQgDVStfCAEIAQgECAOIBN+IgwgCiAPfnwiCkIgiCAKIAxUrUIghoR8IgogEFStIAogAkIghnwgClStfHwiBFatfCICQv////////8AWARAIAFCMYYgBEIgiCIBIANC/////w+DIgp+Ig0gBEL/////D4MiDCADQiCIIgt+fCIOQiCGIhAgCiAMfnwiDyAQVK19IA9CAFKtfSACQv////8PgyAKfiAMIBJC/////w+DfnwgASALfnwgDSAOVq1CIIYgDkIgiIR8IAQgFEIgiH4gAyACQiCIfnwgAiALfnwgASASfnxCIIZ8fSESIAZBAWshBkIAIA99DAELIARCIYghDCABQjCGIAJCP4YgBEIBiIQiBEL/////D4MiASADQiCIIgp+Ig8gDCACQh+GhCINQv////8PgyIQIANC/////w+DIgx+fCILQiCGIhMgASAMfnwiDiATVK19IA5CAFKtfSAEIBRCIIh+IAMgAkIhiH58IAJCAYgiAiAKfnwgDSASfnxCIIYgCiAQfiACQv////8PgyAMfnwgASASQv////8Pg358IAsgD1StQiCGIAtCIIiEfHx9IRJCACAOfQshASAGQYCAAU4EQCARQoCAgICAgMD//wCEIRFCACEBDAELIAZB//8AaiEHIAZBgYB/TARAAkAgBw0AIAQgAUIBhiADViASQgGGIAFCP4iEIgEgFFYgASAUURutfCIBIARUrSACQv///////z+DfCICQoCAgICAgMAAg1ANACACIBGEIREMAgtCACEBDAELIAQgAUIBhiADWiASQgGGIAFCP4iEIgEgFFogASAUURutfCIBIARUrSACQv///////z+DfCAHrUIwhnwgEYQhEQsgACABNwMAIAAgETcDCCAFQcABaiQADwsgAEIANwMAIABCgICAgICA4P//ACARIAIgA4RQGzcDCCAFQcABaiQAC7YDAgN/AX4jAEEgayIDJAACQCABQv///////////wCDIgVCgICAgICAwMA/fSAFQoCAgICAgMC/wAB9VARAIAFCGYinIQQgAFAgAUL///8PgyIFQoCAgAhUIAVCgICACFEbRQRAIARBgYCAgARq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ViADQf3/AiADQf3/AkgbQf7/AWshAyAEKQMYIQIgBCkDECEBDAELIANBgYB/Sg0AIARBQGsgASACQgBCgICAgICAwAAQViAEKQNIIQIgBCkDQCEBIANBg4B+SgRAIANB/v8AaiEDDAELIARBMGogASACQgBCgICAgICAwAAQViADQYaAfSADQYaAfUobQfz/AWohAyAEKQM4IQIgBCkDMCEBCyAEIAEgAkIAIANB//8Aaq1CMIYQViAAIAQpAwg3AwggACAEKQMANwMAIARB0ABqJAALNQAgACABNwMAIAAgAkL///////8/gyAEQjCIp0GAgAJxIAJCMIinQf//AXFyrUIwhoQ3AwgLEAAgACABIAJBAEEAEIAFGgtzAQJ/IABFBEBBAEEDQdXIAEEAEC8PCyAAKAIAIgFFBEAPCyABKAIAECpBACEBA38gACgCACICKAIMIAFMBH8gAigCCBAqIAAoAgAQKiAAQQA2AgBBAAUgAigCCCABQQxsaigCABAqIAFBAWohAQwBCwsaC1IBA38CQCAAKAIALAAAEKcBRQRADAELA0AgACgCACICLAAAIQMgACACQQFqNgIAIAEgA2pBMGshASACLAABEKcBRQ0BIAFBCmwhAQwACwALIAELuwIAAkAgAUEUSw0AAkACQAJAAkACQAJAAkACQAJAAkAgAUEJaw4KAAECAwQFBgcICQoLIAIgAigCACIBQQRqNgIAIAAgASgCADYCAA8LIAIgAigCACIBQQRqNgIAIAAgATQCADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATUCADcDAA8LIAIgAigCAEEHakF4cSIBQQhqNgIAIAAgASkDADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATIBADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATMBADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATAAADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATEAADcDAA8LIAIgAigCAEEHakF4cSIBQQhqNgIAIAAgASsDADkDAA8LIAAgAiADEQIACwv2AgEDfyMAQdABayIFJAAgBSACNgLMAUEAIQIgBUGgAWpBAEEoEDIaIAUgBSgCzAE2AsgBAkBBACABIAVByAFqIAVB0ABqIAVBoAFqIAMgBBDJA0EASARAQX8hAQwBCyAAKAJM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ACACIAQtABFBAWo7AQIgAiAELQASQQFqOwEEIAIgBC0AE0EBajsBBiABIApqIABqIgIgBC0AFEEBajsBACACIAQtABVBAWo7AQIgAiAELQAWQQFqOwEEIAIgBC0AF0EBajsBBiABIAtqIABqIgIgBC0AGEEBajsBACACIAQtABlBAWo7AQIgAiAELQAaQQFqOwEEIAIgBC0AG0EBajsBBiABIA9qIABqIgEgBC0AHEEBajsBACABIAQtAB1BAWo7AQIgASAELQAeQQFqOwEEIAEgBC0AH0EBajsBBiAEQSBqIQQgB0EBaiIHQQRHDQALIA1BgAtqJAALywMBBH8gACgC5AMgAEEBQfwPIAAoAgQoAgARBAAiAEH8B2oiATYCKCAAQv////8PNwL4ByAAQoGAgIAgNwKACCAAQoOAgIDAADcCiAggAEL9////bzcC8AcgAEKFgICA4AA3ApAIIABC+////083AugHIABCh4CAgIABNwKYCCAAQvn///+vfzcC4AcgAEKJgICAoAE3AqAIIABC9////49/NwLYByAAQouAgIDAATcCqAggAEL1////7343AtAHIABCjYCAgOABNwKwCCAAQvP////PfjcCyAcgAEEPNgK4CCAAQvH///+vfjcCwAdBECECQRAhAwNAIAEgA0ECdCIAaiACNgIAIAEgAGtBACACayIENgIAIAEgAEEEcmogAjYCACABIANBf3NBAnRqIAQ2AgAgAkEBaiECQTAhACADQQJqIgNBMEcNAAsDQCABIABBAnQiAmpBIDYCACABIAJrQWA2AgAgASACQQRyakEgNgIAIAEgAEF/c0ECdGpBYDYCACABIAJBCHJqQSA2AgAgAUF+IABrQQJ0akFgNgIAIAEgAkEMcmpBIDYCACABQX0gAGtBAnRqQWA2AgAgAEEEaiIAQYACRw0ACwv3AgEKfyAAKALkAyIEIAAoAlgiAUEBRiICNgIcIAQgAEEBQf4FQYACIAIbIAAoAnggACgCBCgCCBEKADYCGCAAKAJ4QQFOBEAgBCgCFCEGIAFBAUchCANAIAYgBCAHQQJ0IgFqKAIgIgJtIQYgCEUEQCAEKAIYIAFqIgMgAygCAEH/AWo2AgALIAJB/gFqIAJBAWsiCUEBdCIKbSEFIAQoAhggAWooAgAhAUEAIQJBACEDA0AgAyAFSgRAA0Ag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AwsgASsDCBC+AQwDCyABKwMImhC/AQwCCyABKwMIEL4BjAwBCyABKwMIEL8BCyEAIAFBEGokACAAC1gBAn8gABA0KAIABEAgACAAQQhqIgEoAgAQwQUgAUEANgIAIAAQgQEhAkEAIQEDQCABIAJGBEAgABA0QQA2AgAFIAAgARAzQQA2AgAgAUEBaiEBDAELCwsLFAAgACAAQQhqKAIAEMEFIAAQrAILMAECfQJ/QQEgACoCACICIAEqAgAiA10NABpBACACIANeDQAaIAAoAgQgASgCBEgLC20AIAAqAgAgASoCAJQgACoCBCABKgIElJIgACoCCCABKgIIlJIgACoCDCABKgIMlJIgACoCECABKgIQlJIgACoCFCABKgIUlJIgACoCGCABKgIYlJIgACoCHCABKgIclJIgACoCICABKgIglJIL8wgCBn8EfCMAQYACayICJAACQCABKwMAIgggCKIgASsDCCIJIAmioCABKwMQIgkgCaKgIglEAAAAAAAAAABhBEAgAkIANwPIASACQoCAgICAgID4PzcDwAFEAAAAAAAAAAAhCAwBCyACIAggCZ8iCKM5A8ABIAIgASsDCCAIozkDyAEgASsDECAIoyEKCyACIAg5A9gBIAIgCjkD0AEgAiABKwMYOQPgASACIAErAyA5A+gBIAIgASsDKDkD8AEgAisD2AEiCCEJIwBBEGsiASQAAnwgCb1CIIinQf////8HcSIDQfvDpP8DTQRARAAAAAAAAPA/IANBnsGa8gNJDQEaIAlEAAAAAAAAAAAQwwIMAQsgCSAJoSADQYCAwP8HTw0AGgJAAkACQAJAIAkgARCLBUEDcQ4DAAECAwsgASsDACABKwMIEMMCDAMLIAErAwAgASsDCEEBEMQCmgwCCyABKwMAIAErAwgQwwKaDAELIAErAwAgASsDCEEBEMQCCyEJIAFBEGokACACIAkiCiACKwPAASIJIAmiRAAAAAAAAPA/IAqhIgmioDkDYCACIAkgAisDwAEgAisDyAGioiACKwPQAQJ8IwBBEGsiASQAAkAgCL1CIIinQf////8HcSIDQfvDpP8DTQRAIANBgIDA8gNJDQEgCEQAAAAAAAAAAEEAEMQCIQgMAQsgA0GAgMD/B08EQCAIIAihIQgMAQsCQAJAAkACQCAIIAEQiwVBA3EOAwABAgMLIAEr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CyAOojkDqAUgBCAKIA6iOQOgBSAEIAwgAisDKCIPojkDyAUgBCALIA+iOQPABSAEIAogD6I5A7gFIAQgAisDMCINOQP4BSAEIA85A/AFIAQgDjkD6AUgBCAMIA2iOQPgBSAEIAsgDaI5A9gFIAQgCiANojkD0AUgBCAMIAIrA0AiDqI5A5AGIAQgCyAOojkDiAYgBCAKIA6iOQOABiAEIAwgAisDSCIPojkDqAYgBCALIA+iOQOgBiAEIAogD6I5A5gGIAQgAisDUCINOQPYBiAEIA85A9AGIAQgDjkDyAYgBCAMIA2iOQPABiAEIAsgDaI5A7gGIAQgCiANojkDsAYgBEEAQcAAEDIiAkIANwNIIAJBQGtCgICAgICAgPi/fzcDACACQgA3A1AgAkIANwNYIAJCADcDYCACQoCAgICAgID4PzcDaCACQfAAakEAQTAQMhogAkKAgICAgICA+D83A6ABIAJBqAFqQQBByAAQMhogAkKAgICAgICA+L9/NwPwASACQfgBakEAQTAQMhogAkIANwOwAiACQoCAgICAgID4v383A6gCIAJCADcDuAIgAkIANwPAAiACQgA3A8gCIAJCgICAgICAgPg/NwPQAiACQdgCakEAQfAAEDIaIAJCgICAgICAgPg/NwPIAyACQdADakEAQTAQMhogAkKAgICAgICA+D83A4AEIAJBiARqQQBBMBAyGiACQoCAgICAgID4PzcDuARBACECA0BBACEGIAJBA0cEQANAIAZBBkcEQCAGQQN0IgggByACQTBsamoiCUIANwMAQQAhA0QAAAAAAAAAACEKA0AgA0EMRwRAIAogBEHABGogAkHgAGxqIANBA3RqKwMAIAQgA0EwbGogCGorAwCioCEKIANBAWohAwwBCwsgCSAKOQMAIAZBAWohBgwBCwsgAkEBaiECDAELCyAEQeAGaiQAQX8hAwJAIAErA1ggBSsDCCIMIAErA0AiC6IgBSsDECIOIAErA0iioCAFKwMYIg8gASsDUKKgoCIKRAAAAAAAAAAAYgR/IAErAyAhECABKwMoIREgASsDMCESIAErAzghEyAFIAErAwAiDSAKoiABKwMYIA0gDKIgASsDCCAOoqAgASsDECAPoqCgIg0gC6KhIAogCqIiC6M5AyAgBSAKIAErAwiiIA0gASsDSKKhIAujOQMoIAUg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aiQACx0AIABB/////wNLBEBBr9wBEIsBAAsgAEECdBBLCxIAIAAQNCgCACAAKAIAa0ECdQsrACAAKAIAGiAAKAIAIAAQ6QFBAnRqGiAAKAIAGiAAKAIAIAAQPEECdGoaC1kBAn8jAEEQayICJAAgAiAAQQhqIAEQmwMiASgCACEDA0AgASgCBCADRwRAIAAoAhAaIAEoAgAQmQMgASABKAIAQQRqIgM2AgAMAQsLIAEQtQEgAkEQaiQACysBAX8gACgCBCECA0AgASACRwRAIAAQKxogAkEEayECDAELCyAAIAE2AgQLDAAgACAAKAIAEK4GCz4BAn9BDBAwIgIEfyACIAAgAWxBAnQQMCIDNgIAIANFBEAgAhAqQQAPCyACIAE2AgggAiAANgIEIAIFQQALCysBAX8gACgCBCECA0AgASACRwRAIAAQKxogAkEkayECDAELCyAAIAE2AgQLCAAgABDMARoLLgEBfyAAKAIEIQIDQCABIAJHBEAgABArGiACQQxrIgIQsgYMAQsLIAAgATYCBAsxAQF/IAAQvwIgACgCAARAIAAgACgCABCzBiAAECsaIAAoAgAhASAAEMMBGiABECoLCy4BAX8gACgCBCECA0AgASACRwRAIAAQKxogAkEMayICELQGDAELCyAAIAE2AgQLIAAgAEIANwIAIABCADcCECAAQgA3AgggAEEYahCuAhoLBwAgABCgAgsuAQF/IAAoAgQhAgNAIAEgAkcEQCAAECsaIAJBIGsiAhCHAwwBCwsgACABNgIECzUAIAAoAgAaIAAoAgAgABCLAkEFdGoaIAAoAgAgABCeAUEFdGoaIAAoAgAgABCLAkEFdGoaCxoAIABBDk0EQCAAQQJ0QaS6AWooAgAPC0EACwwAIAAgACgCABCdAwvvDAIGfwV9An1DAACAPyEJAkACQAJAIAG8IgRB/////wdxIgJFDQAgALwiBUGAgID8A0YNACAAIAGSIAVB/////wdxIgNBgICA/AdNQQAgAkGBgID8B0kbRQ0DGgJ/AkAgBUF/Sg0AQQIgAkH////bBEsNARogAkGAgID8A0kNAEEAIAJBlgEgAkEXdmsiBnYiByAGdCACRw0BGkECIAdBAXFrDAELQQALIQYCQCACQYCAgPwDRwRAIAJBgICA/AdHDQEgA0GAgID8A0YNAiABQwAAAAAg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KkF+DwtBAEEDQecLQQAQL0EBEAEAC0MBAX8jAEEQayIBJAAgABArGiABQcyZs+YANgIMIAFB/////wc2AgggAUEMaiABQQhqEMIBKAIAIQAgAUEQaiQAIAALVQEBfyAAKAIEIQEDQCABIAAoAghHBEAgACgCEBogACAAKAIIQRRrNgIIDAELCyAAKAIABEAgACgCEBogACgCACEBIAAQNCgCACAAKAIAaxogARAqCwuDAQEFfyAAEIMFIAAQKyEEIAAoAgAhBSAAKAIEIQIgAUEEaiIGIQMDQCACIAVHBEAgBCADKAIAQRRrIAJBFGsiAhCmAyADIAMoAgBBFGs2AgAMAQsLIAAgBhBHIABBBGogAUEIahBHIAAQKyABEDQQRyABIAEoAgQ2AgAgACAAEHcQzAYLagECfyMAQRBrIgQkACAEQQA2AgwgAEEMaiAEQQxqIAMQqwEgAQRAIAAoAhAaIAEQywYhBQsgACAFNgIAIAAgBSACQRRsaiICNgIIIAAgAjYCBCAAEDQgBSABQRRsajYCACAEQRBqJAAgAAsrAQF/IAAoAgQhAgNAIAEgAkcEQCAAECsaIAJBDGshAgwBCwsgACABNgIECwwAIAAgACgCABDSBgsHACABIABrC5QBAQR/IwBBEGsiBSQAIAEgAhCZBCIEQW9NBEACQCAEQQpNBEAgACAEEKQBIAAhAwwBCyAAIAQQ5QJBAWoiBhBLIgMQlQEgACAGEM4BIAAgBBCUAQsDQCABIAJHBEAgAyABEIwBIANBAWohAyABQQFqIQEMAQsLIAVBADoADyADIAVBD2oQjAEgBUEQaiQADwsQzwEACxwAIAAgAUEIIAKnIAJCIIinIAOnIANCIIinEBsLzQYCBH8DfiMAQYABayIFJAACQAJAAkAgAyAEQgBCABD4AUUNAAJ/IARC////////P4MhCQJ/IARCMIinQf//AXEiBkH//wFHBEBBBCAGDQEaQQJBAyADIAmEUBsMAgsgAyAJhFALC0UNACACQjCIpyIIQf//AXEiBkH//wFHDQELIAVBEGogASACIAMgBBBWIAUgBSkDECIBIAUpAxgiAiABIAIQ7wQgBSkDCCECIAUpAwAhBAwBCyABIAJC////////P4MgBq1CMIaEIgogAyAEQv///////z+DIARCMIinQf//AXEiB61CMIaEIgkQ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ACEXIAIgAigCACIYQQFqNgIAIBggFzoAAAwACwALIBYgAigCABCTAgsgFEEBaiEUDAALAAu7AgEBfyMAQRBrIgokACAJAn8gAARAIAIQiQchAAJAIAEEQCAKIAAQ8gEgAyAKKAIANgAAIAogABDxAQwBCyAKIAAQqwMgAyAKKAIANgAAIAogABCtAQsgCCAKEIIBIAoQMRogBCAAELcBOgAAIAUgABCXAToAACAKIAAQlgEgBiAKEIIBIAoQMRogCiAAEK4BIAcgChCCASAKEDEaIAAQ8AEMAQsgAhCIByEAAkAgAQRAIAogABDyASADIAooAgA2AAAgCiAAEPEBDAELIAogABCrAyADIAooAgA2AAAgCiAAEK0BCyAIIAoQggEgChAxGiAEIAAQtwE6AAAgBSAAEJcBOgAAIAogABCWASAGIAoQggEgChAxGiAKIAAQrgEgByAKEIIBIAoQMRogABDwAQs2AgAgCkEQaiQACzEBAX8jAEEQayICJAAgAiAAKAIANgIIIAJBCGogARDPBSACKAIIIQAgAkEQaiQAIAALCwAgAEGMsAQQvAELCwAgAEGUsAQQvAELDQAgACgCACABKAIASAsVACAAIAEoAgAQzgQgASgCABDnARoLmBABCn8jAEGwBGsiCyQAIAsgCjYCpAQgCyABNgKoBCALQbYCNgJgIAsgC0GIAWogC0GQAWogC0HgAGoQXSIPKAIAIgE2AoQBIAsgAUGQA2o2AoABIAtB4ABqED0hESALQdAAahA9IQ4gC0FAaxA9IQwgC0EwahA9IQ0gC0EgahA9IRAjAEEQayIBJAAgCwJ/IAIEQCABIAMQggciAhDyASALIAEoAgA2AHggASACEPEBIA0gARDRASABEDEaIAEgAhCtASAMIAEQ0QEgARAxGiALIAIQtwE2AnQgCyACEJcBNgJwIAEgAhCWASARIAEQggEgARAxGiABIAIQrgEgDiABENEBIAEQMRogAhDwAQwBCyABIAMQgQciAhDyASALIAEoAgA2AHggASACEPEBIA0gARDRASABEDEaIAEgAhCtASAMIAEQ0QEgARAxGiALIAIQtwE2AnQgCyACEJcBNgJwIAEgAhCWASARIAEQggEgARAxGiABIAIQrgEgDiABENEBIAEQMRogAhDwAQs2AhwgAUEQaiQAIAkgCCgCADYCACAEQYAEcSISQQl2IRNBACEBQQAhAgNAIAIhCgJAAkACQAJAIAFBBEYNACAAIAtBqARqEIQBRQ0AQQAhBAJAAkACQAJAAkACQCALQfgAaiABaiwAAA4FAQAEAwUJCyABQQNGDQcgB0GAwAAgABBgEK8BBEAgC0EQaiAAEIQHIBAgCygCEBChBAwCCyAFIAUoAgBBBHI2AgBBACEADAYLIAFBA0YNBgsDQCAAIAtBqARqEIQBRQ0GIAdBgMAAIAAQYBCvAUUNBiALQRBqIAAQhAcgECALKAIQEKEEDAALAAsgDBAuQQAgDRAua0YNBAJAIAwQLgRAIA0QLg0BCyAMEC4hAyAAEGAhAiADBEAgDBA4KAIAIAJGBEAgABBsGiAMIAogDBAuQQFLGyECDAgLIAZBAToAAAwGCyACIA0QOCgCAEcNBSAAEGwaIAZBAToAACANIAogDRAuQQFLGyECDAYLIAAQYCAMEDgoAgBGBEAgABBsGiAMIAogDBAuQQFLGyECDAYLIAAQYCANEDgoAgBGBEAgABBsGiAGQQE6AAAgDSAKIA0QLkEBSxshAgwGCyAFIAUoAgBBBHI2AgBBACEADAMLIAogAUECSXJFBEBBACECIBMgAUECRiALLQB7QQBHcXJFDQULIAsgDhCmATYCCCALQRBqIAtBCGoQhgIhAgJAIAFFDQAgASALai0Ad0EBSw0AA0ACQCALIA4Q9AE2AgggAiALQQhqEHNFDQAgB0GAwAAgAigCACgCABCvAUUNACACEIICDAELCyALIA4QpgE2AgggAiALQQhqEN0DIgIgEBAuTQRAIAsgEBD0ATYCCCALQQhqQQAgAmsQgAchAyAQEPQBIQQgDhCmASEUIwBBIGsiAiQAIAIgBDYCECACIAM2AhggAiAUNgIIA0ACQCACQRhqIAJBEGoQcyIDRQ0AIAIoAhggAigCCBDBAUUNACACQRhqEIICIAJBCGoQggIMAQsLIAJBIGokACADQQFzDQELIAsgDhCmATYCACALQQhqIAsQhgIaIAsgCygCCDYCEAsgCyALKAIQNgIIA0ACQCALIA4Q9AE2AgAgC0EIaiALEHNFDQAgACALQagEahCEAUUNACAAEGAgCygCCCgCAEcNACAAEGwaIAtBCGoQggIMAQsLIBJFDQMgCyAOEPQBNgIAIAtBCGogCxBzRQ0DIAUgBSgCAEEEcjYCAEEAIQAMAgsDQAJAIAAgC0GoBGoQhAFFDQACfyAHQYAQIAAQYCICEK8BBEAgCSgCACIDIAsoAqQERgRAIAggCSALQaQEahC4AiAJKAIAIQMLIAkgA0EEajYCACADIAI2AgAgBEEBagwBCyAREC5FIARFcg0BIAIgCygCcEcNASALKAKEASICIAsoAoABRgRAIA8gC0GEAWogC0GAAWoQuAIgCygChAEhAgsgCyACQQRqNgKEASACIAQ2AgBBAAshBCAAEGwaDAELCyAERSALKAKEASICIA8oAgBGckUEQCALKAKAASACRgRAIA8gC0GEAWogC0GAAWoQuAIgCygChAEhAgsgCyACQQRqNgKEASACIAQ2AgALAkAgCygCHEEBSA0AAkAgACALQagEahBvRQRAIAAQYCALKAJ0Rg0BCyAFIAUoAgBBBHI2AgBBACEADAMLA0AgABBsGiALKAIcQQFIDQECQCAAIAtBqARqEG9FBEAgB0GAECAAEGAQrwENAQsgBSAFKAIAQQRyNgIAQQAhAAwECyAJKAIAIAsoAqQERgRAIAggCSALQaQEahC4AgsgABBgIQIgCSAJKAIAIgNBBGo2AgAgAyACNgIAIAsgCygCHEEBazYCHAwACwALIAohAiAIKAIAIAkoAgBHDQMgBSAFKAIAQQRyNgIAQQAhAAwBCwJAIApFDQBBASEEA0AgChAuIARNDQECQCAAIAtBqARqEG9FBEAgABBgIAogBBDqAigCAEYNAQsgBSAFKAIAQQRyNgIAQQAhAAwDCyAAEGwaIARBAWohBAwACwALQQEhACAPKAIAIAsoAoQBRg0AQQAhACALQQA2AhAgESAPKAIAIAsoAoQBIAtBEGoQgAEgCygCEARAIAUgBSgCAEEEcjYCAAwBC0EBIQALIBAQMRogDRAxGiAMEDEaIA4QMRogERAxGiAPEFwgC0GwBGokACAADwsgCiECCyABQQFqIQEMAAsACx0AIAAgARC0ARBuIAEQQigCACEBIAAQQiABNgIACzQBAX8jAEEQayICJAAgAiAAKAIANgIIIAIgAigCCCABajYCCCACKAIIIQAgAkEQaiQAIAALCwAgAEH8rwQQvAELCwAgAEGEsAQQvAELwwEBBn8jAEEQayIEJAAgABBCKAIAIQUCfyACKAIAIAAoAgBrIgNB/////wdJBEAgA0EBdAwBC0F/CyIDQQEgAxshAyABKAIAIQYgACgCACEHIAVBtgJGBH9BAAUgACgCAAsgAxDkAiIIBEAgBUG2AkcEQCAAELQBGgsgBEG1AjYCBCAAIARBCGogCCAEQQRqEF0iBRCGByAFEFwgASAAKAIAIAYgB2tqNgIAIAIgAyAAKAIAajYCACAEQRBqJAAPCxBxAAslAQF/IAEoAgAQ0gRBGHRBGHUhAiAAIAEoAgA2AgQgACACOgAAC80QAQp/IwBBsARrIgskACALIAo2AqQEIAsgATYCqAQgC0G2AjYCaCALIAtBiAFqIAtBkAFqIAtB6ABqEF0iDygCACIBNgKEASALIAFBkANqNgKAASALQegAahA9IREgC0HYAGoQPSEOIAtByABqED0hDCALQThqED0hDSALQShqED0hECMAQRBrIgEkACALAn8gAgRAIAEgAxCJByICEPIBIAsgASgCADYAeCABIAIQ8QEgDSABEIIBIAEQMRogASACEK0BIAwgARCCASABEDEaIAsgAhC3AToAdyALIAIQlwE6AHYgASACEJYBIBEgARCCASABEDEaIAEgAhCuASAOIAEQggEgARAxGiACEPABDAELIAEgAxCIByICEPIBIAsgASgCADYAeCABIAIQ8QEgDSABEIIBIAEQMRogASACEK0BIAwgARCCASABEDEaIAsgAhC3AToAdyALIAIQlwE6AHYgASACEJYBIBEgARCCASABEDEaIAEgAhCuASAOIAEQggEgARAxGiACEPABCzYCJCABQRBqJAAgCSAIKAIANgIAIARBgARxIhJBCXYhE0EAIQFBACECA0AgAiEKAkACQAJAAkAgAUEERg0AIAAgC0GoBGoQhQFFDQBBACEEAkACQAJAAkACQAJAIAtB+ABqIAFqLAAADgUBAAQDBQkLIAFBA0YNByAHQYDAACAAEGEQsAEEQCALQRhqIAAQiwcgECALLAAYEKIEDAILIAUgBSgCAEEEcjYCAEEAIQAMBgsgAUEDRg0GCwNAIAAgC0GoBGoQhQFFDQYgB0GAwAAgABBhELABRQ0GIAtBGGogABCLByAQIAssABgQogQMAAsACyAMEC5BACANEC5rRg0EAkAgDBAuBEAgDRAuDQELIAwQLiEDIAAQYSECIAMEQCAMQQAQNi0AACACQf8BcUYE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A0EXNgIUIAAgAygCABEBAAsCQCACIAEoAhgiA08EQCAIIAEoAhAgA2pNDQELIAEoAihFBEAgACgCACIDQccANgIUIAAgAygCABEBAAsgASgCJARAAkAgASgCECIDQQFIDQAgASgCFCIFIAMgAyAFShsiBSABKAIcIAEoAhgiA2siBiAFIAZIGyIFIAEoAgQgA2siBiAFIAZIGyIFQQFIDQAgAUEwaiEKIAMgASgCCCILbCEGQQAhAwNAIAAgCiABKAIAIANBAnRqKAIAIAYgBSALbCIHIAEoAjQRBQAgASgCECIJIAEoAhQiBSADaiIDTA0BIAYgB2ohBiAFIAkgA2siByAFIAdIGyIFIAEoAhwgASgCGCADaiIHayIJIAUgCUgbIgUgASgCBCAHayIHIAUgB0gbIgVBAEoNAAsLIAFBADYCJAsgASACIAggASgCECIDayIFQQAgBUEAShsgASgCGCACSRsiBjYCGCADQQFIDQAgASgCFCIFIAMgAyAFShsiAyABKAIcIAZrIgUgAyAFSBsiAyABKAIEIAZrIgUgAyAFSBsiBUEBSA0AIAFBMGohCiABKAIIIgsgBmwhBkEAIQMDQCAAIAogASgCACADQQJ0aigCACAGIAUgC2wiByABKAIwEQUAIAEoAhAiCSABKAIUIgUgA2oiA0wNASAGIAdqIQYgBSAJIANrIgcgBSAHSBsiBSABKAIcIAEoAhggA2oiB2siCSAFIAlIGyIFIAEoAgQgB2siByAFIAdIGyIFQQBKDQALCwJAAkACQCABKAIcIgUgCE8NAAJAAkACQCACIAVLBEAgAiEFIARFDQEgACgCACIDQRc2AhQgACADKAIAEQEADAILIAQNAQsgASgCIA0BIAAoAgAiA0EXNgIUIAAgAygCABEBAAwECyABIAg2AhwgASgCIEUNAgsgBSABKAIYIgBrIgMgCCAAayIGTw0AIAEoAgghACAIIAVBf3NqIQogCCAFa0EDcSIFBEADQCABKAIAIANBAnRqKAIAQQAgABAyGiADQQFqIQMgBUEBayIFDQALCyAKQQNJDQADQCADQQJ0IgUgASgCAGooAgBBACAAEDIaIAUgASgCAGooAgRBACAAEDIaIAUgASgCAGooAghBACAAEDIaIAUgASgCAGooAgxBACAAEDIaIANBBGoiAyAGRw0ACwsgBEUN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KCALKAIMbCAMbSIGIBFsIgJBAUgNACACQQNxIQhBACEAIAJBAWtBA08EQCACQXxxIQkDQCABIABBAnQiAmogAiAFaigCACIDNgIAIAIgBGogAzYCACABIAJBBHIiA2ogAyAFaigCACIKNgIAIAMgBGogCjYCACABIAJBCHIiA2ogAyAFaigCACIKNgIAIAMgBGogCjYCACABIAJBDHIiAmogAiAFaigCACIDNgIAIAIgBGogAzYCACAAQQRqIQAgCUEEayIJDQALCyAIRQ0AA0AgASAAQQJ0IgJqIAIgBWooAgAiCTYCACACIARqIAk2AgAgAEEBaiEAIAhBAWsiCA0ACwsCQCAGQQFIDQAgBiAQbCECIAYgDGwhCSAGQQF0IghBASAIQQFKGyIDQQFxIQpBACEAIAhBAk4EQCADQf7///8HcSEIA0AgASAAIAJqQQJ0IgNqIAUgACAJakECdCIOaigCADYCACABIA5qIAMgBWooAgA2AgAgASAAQQFyIgMgAmpBAnQiDmogBSADIAlqQQJ0IgNqKAIANgIAIAEgA2ogBSAOaigCADYCACAAQQJqIQAgCEECayIIDQALCyAKBEAgASAAIAJqQQJ0IghqIAUgACAJakECdCIAaigCADYCACAAIAFqIAUgCGooAgA2AgALIAZBA3EhBUEAIQEgBkEBa0EDTwRAIAZBfHEhAANAIAQgASAGa0ECdGogBCgCADYCACAEIAFBAXIgBmtBAnRqIAQoAgA2AgAgBCABQQJyIAZrQQJ0aiAEKAIANgIAIAQgAUEDciAGa0ECdGogBCgCADYCACABQQRqIQEgAEEEayIADQALCyAFRQ0AA0AgBCABIAZrQQJ0aiAEKAIANgIAIAFBAWohASAFQQFrIgUNAAsLIAtB2ABqIQsgDUEBaiINIA9HDQALCyAHQQA2AkwgB0IANwJEIAdBADYCOA8LIAdBzQE2AgQgByAHKAI0NgIwDwsgB0HOATYCBA8LIAAoAgAiAUEDNgIUIAAgASgCABEBAAuMCwEtfyMAQYABayIHJAAgACgCzAJBAWshKSAAKALEAyEUAn8CQANAIAAoApABIgMgACgCmAEiBUoNASAAKALMAyILKAIUDQEgAyAFRgRAIAAoApQBIAAoApwBIAAoApwDRWpLDQILIAAgCygCABEAAA0AC0EADAELIAAo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BCAFIAlqLQAAIgU6AAQgBCAFIAxqQYABczoABSAEIAUgC2pBgAFzOgADIABBAmohACAEQQZqIQQgB0ECayIHDQALCyAPRQ0AIAAgCmotAAAhByAAIAZqLQAAIQYgBCAAIAlqLQAAIgA6AAEgBCAAIAZqQYABczoAAiAEIAAgB2pBgAFzOgAACyADQQRqIQMgAkEBaiECIA1BAWshBCANQQJODQALCwumAgEJfyAEQQFOBEAgACgCcCIFQX5xIQwgBUEBcSENA0AgBCEJAkAgBUUNACACQQJ0IgAgASgCCGooAgAhBiABKAIEIABqKAIAIQcgASgCACAAaigCACEIIAMoAgAhBEEAIQAgDCEKIAVBAUcEQANAIAQgACAIai0AADoAACAEIAAgB2otAAA6AAEgBCAAIAZqLQAAOgACIAQgCCAAQQFyIgtqLQAAOgADIAQgByALai0AADoABCAEIAYgC2otAAA6AAUgAEECaiEAIARBBmohBCAKQQJrIgoNAAsLIA1FDQAgBCAAIAhqLQAAOgAAIAQgACAHai0AADoAASAEIAAgBmotAAA6AAILIANBBGohAyACQQFqIQIgCUEBayEEIAlBAk4NAAsLC6ICAQ1/IARBAEoEQCAAKALQAiEFIAAoAnAhByAAKALgAyIAKAIUIQogACgCECELIAAoAgwhDCAAKAIIIQ0DQCAEIQggBwRAIAJBAnQiACABKAIIaigCACEOIAEoAgQgAGooAgAhDyABKAIAIABqKAIAIRAgAygCACEEQQAhAANAIAAgD2otAAAhBiAEIAUgACAQai0AACIJIA0gACAOai0AAEECdCIRaigCAGpqLQAAOgAAIAQgBSAJIAsgEWooAgAgCiAGQQJ0IgZqKAIAakEQdWpqLQAAOgABIAQgBSAJIAYgDGooAgBqai0AADoAAiAEQQNqIQQgAEEBaiIAIAdHDQALCyADQQRqIQMgAkEBaiECIAhBAWshBCAIQQJODQALCwvOAgEIfyAEQQFOBEAgACgCcCIIQXxxIQogCEEDcSELIAhBAWtBA0khDANAIAQhCQJAIAhFDQAgASgCACACQQJ0aigCACEGIAMoAgAhBEEAIQAgCiEHIAxFBEADQCAEIAAgBmotAAAiBToAASAEIAU6AAIgBCAFOgAAIAQgBiAAQQFyai0AACIFOgAEIAQgBToABSAEIAU6AAMgBCAGIABBAnJqLQAAIgU6AAcgBCAFOgAIIAQgBToABiAEIAYgAEEDcmotAAAiBToACiAEIAU6AAsgBCAFOgAJIABBBGohACAEQQxqIQQgB0EEayIHDQALCyALIgdFDQADQCAEIAAgBmotAAAiBToAASAEIAU6AAIgBCAFOgAAIABBAWohACAEQQNqIQQgB0EBayIHDQALCyADQQRqIQMgAkEBaiECIAlBAWshBCAJQQJODQALCwvqAQEHfyAEQQBKBEAgACgCcCEHIAAoAuADKAIYIQUDQCAEIQAgBwRAIAJBAnQiBCABKAIIaigCACEIIAEoAgQgBGooAgAhCSABKAIAIARqKAIAIQogAygCACELQQAhBANAIAQgC2ogBSAEIAlqLQAAIgZBAnRBgAhyaigCACAFIAZBgAFqIgYgBCAKai0AAGpB/wFxQQJ0aigCAGogBSAGIAQgCGotAABqQf8BcUECdEGAEHJqKAIAakEQdjoAACAEQQFqIgQgB0cNAAsLIANBBGohAyACQQFqIQIgAEEBayEEIABBAk4NAAsLC9QBAQZ/IARBAEoEQCAAKAJwIQYgACgC4AMoAhghBQNAIAQhACAGBEAgAkECdCIEIAEoAghqKAIAIQcgASgCBCAEaigCACEIIAEoAgAgBGooAgAhCSADKAIAIQpBACEEA0AgBCAKaiAFIAQgB2otAABBAnRBgBByaigCACAFIAQgCGotAABBAnRBgAhyaigCACAFIAQgCWotAABBAnRqKAIAampBEHY6AAAgBEEBaiIEIAZHDQALCyADQQRqIQMgAkEBaiECIABBAWshBCAAQQJODQALCwsXACABKAIAIAIgA0EAIAQgACgCcBCFAws8ACAAIAEgAigCACAEIAUoAgBBAnRqIAAoAtwDKAIMEQYAIAUgBSgCAEEBajYCACACIAIoAgBBAWo2AgALvQMBDH8gAkECdCICIAEoAghqKAIAIQUgASgCBCACaigCACEGIAEoAgAgAmooAgAhByADKAIAIQEgACgC0AIhAiAAKALcAyIDKAIcIQggAygCGCELIAMoAhQhDCADKAIQIQ0gACgCcCIDQQF2Ig4EfwNAIAwgBi0AAEECdCIEaigCACEDIAsgBS0AAEECdCIJaigCACEKIAQgCGooAgAhDyABIAIgCSANaigCACIJIActAAAiBGpqLQAAOgAAIAEgAiAEIAogD2pBEHUiCmpqLQAAOgABIAEgAiADIARqai0AADoAAiABIAIgCSAHLQABIgRqai0AADoAAyABIAIgBCAKamotAAA6AAQgASACIAMgBGpqLQAAOgAFIAFBBmohASAHQQJqIQcgBUEBaiEFIAZBAWohBiAOQQFrIg4NAAsgACgCcAUgAwtBAXEEQCAMIAYtAABBAnQiAGooAgAhAyALIAUtAABBAnQiBWooAgAhBiAAIAhqKAIAIQggASACIActAAAiACAFIA1qKAIAamotAAA6AAAgASACIAAgBiAIakEQdWpqLQAAOgABIAEgAiAAIANqai0AADoAAgsLiwIBBH8jAEEQayIHJAACQAJAIAAoAtwDIgMoAiQEQCADQSBqQQAgBCAFKAIAQQJ0akEAQQEgAygCKBCFAyADQQA2AiQgBSAFKAIAQQFqNgIAIAMgAygCLEEBazYCLAwBCyADKAIsIQggByAEIAUoAgAiCUECdGoiCigCADYCCCAHAn8gBiAJayIEIAhBAiAIQQJJGyIGIAQgBkkbIgRBAk8EQCAKKAIEDAELIANBATYCJCADKAIgCzYCDCAAIAEgAigCACAHQQhqIAMoAgwRBgAgAygCJCEAIAUgBSgCACAEajYCACADIAMoAiwgBGs2AiwgAA0BCyACIAIoAgBBAWo2AgALIAdBEGokAAuJBQEOfyACQQJ0IgUgASgCCGooAgAhCiABKAIEIAVqKAIAIQsgASgCACIFIAJBA3QiAWooAgAhByAFIAFBBHJqKAIAIQggAygCBCECIAMoAgAhAyAAKALQAiEEIAAoAtwDIgEoAhwhDiABKAIYIQ8gASgCFCEQIAEoAhAhESAAKAJwIgFBAXYiCQR/A0AgECALLQAAQQJ0IgFqKAIAIQwgDyAKLQAAQQJ0IgZqKAIAIQUgASAOaigCACEBIAMgBCAGIBFqKAIAIg0gBy0AACIGamotAAA6AAAgAyAEIAYgASAFakEQdSIFamotAAA6AAEgAyAEIAYgDGpqLQAAOgACIAMgBCANIActAAEiAWpqLQAAOgADIAMgBCABIAVqai0AADoABCADIAQgASAMamotAAA6AAUgAiAEIA0gCC0AACIBamotAAA6AAAgAiAEIAEgBWpqLQAAOgABIAIgBCABIAxqai0A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JAAgBAs2ACAAQQA2AtgBIABBADYCuAMgAEEANgKQASAAKALQAyIAQQA2AqQBIABBADYCGCAAQgA3AgwLvzoBDn8jAEGgAmsiCSQAIAAoArgDIQEDQAJAAkACQCABDQAgACgC0AMoAgxFBEAgACgCGCICKAIEIgFFBEAgACACKAIMEQAARQRAQQAhAQwECyACKAIEIQELIAIoAgAiAy0AACEFIAFBAWsiBAR/IANBAWoFIAAgAigCDBEAAEUEQEEAIQEMBAsgAigCBCEEIAIoAgALIgFBAWohAyAFQf8BRkEAIAEtAAAiAUHYAUYbRQRAIAAoAgAiBiAFNgIYIAZBNzYCFCAAKAIAIAE2AhwgACAAKAIAKAIAEQEACyAAIAE2ArgDIAIgBEEBazYCBCACIAM2AgAMAQsgABDWA0UEQEEAIQEMAgsgACgCuAMhAQsCQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAFBAWsO/gEPERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERIBAgUJBQUFBQMEBQgFBQUPDw8PDw8PDwAHBgoQCxERDQ0NDQ0NDQ0NDQ0NDQ0NDRERERERERERDBERERERDhELIAAoAgAiAkHoADYCFCAAQQEgAigCBBECACAAKALQAyIBKAIMBEAgACgCACICQcAANgIUIAAgAigCABEBACAAKALQAyEBCyAAQgA3AOgBIABCADcA8AEgAEKBgoSIkKDAgAE3AIACIABCgYKEiJCgwIABNwD4ASAAQoWKlKjQoMGCBTcAkAIgAEKFipSo0KDBggU3AIgCIABCADcDsAIgAEEANgIoIABCADcDmAIgAEEAOgCsAiAAQoGABDcCpAIgAEEAOgCiAiAAQYECOwGgAiABQQE2AgwMFAtBACEBIABBAEEAQQAQxwINEwwSC0EAIQEgAEEAQQFBABDHAg0SDBELQQAh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AgQhAyABKAIAIQIgACgC0AMoAhBFBEAgACgCACIEQTw2AhQgBEEYakHhwQJB0AAQNxogACAAKAIAKAIAEQEACwJAAkAgACgCJEEDSA0AIANFBEAgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCACECCyACLQAAIQQgA0EBayIDBH8gAkEBagUgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCAAshAiADQQFrIQMgAi0AACAEQQh0ckEYRwRAIAAoAgAiBEEMNgIUIAAgBCgCABEBAAsgAwR/IAJBAWoFIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgALIQIgA0EBayEDIAItAABBDUcEQCAAKAIAIgRBxgA2AhQgBCAAKAK4AzYCGCAAIAAoAgAoAgARAQALIAMEfyACQQFqBSAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIACyICLQAAIQQgA0EBayIDBH8gAkEBagUgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCAAsiBUEBaiECIANBAWshAyAFLQAAIARBCHRyQf8BRw0AIANFBEAgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCACECCyACQQFqIQQgA0EBayEDIAItAABBA0cEQCAEIQIMAQsgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIAIQQLIARBAWohAiADQQFrIQMgACgC2AEiBygCWCAELQAARw0AIANFBEAgACABKAIMEQAARQRAQQAhAQwLCyAAKALYASEHIAEoAgQhAyABKAIAIQILIAJBAWohBCADQQFrIQMgBygCACACLQAARwRAIAQhAgwBCyADRQRAIAAgASgCDBEAAEUEQEEAIQEMCwsgACgC2AEhByABKAIEIQMgASgCACEECyAEQQFqIQIgA0EBayEDIAcoArABIAQtAABHDQAgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIAIQILIAJBAWohBCADQQFrIQMgAi0AAEGAAUcEQCAEIQIMAQsgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIAIQQLIAQtAAAhBSADQQFrIgMEfyAEQQFqBSAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIACyIEQQFqIQIgA0EBayEDIAQtAAAgBUEIdHINACADRQRAIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgAhAgsgAi0AACEEIANBAWsiAwR/IAJBAWoFIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgALIgVBAWohAiADQQFrIQMgBS0AACAEQQh0cg0AIANFBEAgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCACECCyACQQFqIQQgA0EBayEDIAItAAAEQCAEIQIMAQsgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIAIQQLIAQtAAAhBSADQQFrIgMEfyAEQQFqBSAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIACyIEQQFqIQIgA0EBayEDIAQtAAAgBUEIdHJBAUcNACADRQRAIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgAhAgsgAi0AACEEIANBAWsiAwR/IAJBAWoFIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgALIgVBAWohAiADQQFrIQMgBS0AACAEQQh0cg0AIANFBEAgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCACECCyACQQFqIQQgA0EBayEDIAItAAAEQCAEIQIMAQsgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIAIQQLIAQtAAAhBSADQQFrIgMEfyAEQQFqBSAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIACyIEQQFqIQIgA0EBayEDIAQtAAAgBUEIdHJBAUcNACADRQRAIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgAhAgsgAi0AACEEIANBAWsiAwR/IAJBAWoFIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgALIgVBAWohAiADQQFrIQMgBS0AACAEQQh0ckUNAQsgACgCACIEQRw2AhQgACAEKAIAEQEACyAAQQE2ArACIAEgAzYCBCABIAI2AgAMCAsgACAAKALQAyABQQJ0akHgBmsoAgARAAANB0EAIQEMBgsgACAAKALQAygCHBEAAA0GQQAhAQwFCyAAKAIAIgIgATYCGCACQd4ANgIUIABBASAAKAIAKAIEEQIADAULIAAoAhgiBCgCBCIDRQRAIAAgBCgCDBEAAEUEQEEAIQEMBQsgBCgCBCEDCyAEKAIAIgEtAAAhBSADQQFrIgIEfyABQQFqBSAAIAQoAgwRAABFBEBBACEBDAULIAQoAgQhAiAEKAIACyIBLQAAIQMgACgCACIGQd0ANgIUIAYgACgCuAM2AhggACgCACADIAVBCHRyIgVBAmsiAzYCHCAAQQEgACgCACgCBBECACAEIAJBAWs2AgQgBCABQQFqNgIAIAVBA0kNBCAAIAMgACgCGCgCEBECAAwECyAAKAIAIgIgATYCGCACQcYANgIUIAAgACgCACgCABEBAAwDC0EAIQEgAEEBQQBBABDHAg0CDAELQQAhAQsgCUGgAmokACABDwtBACEBIABBADYCuAMMAAsAC5IBAQJ/AkACQCAAKAK4AyIBBH8gAQUgABDWA0UNASAAKAK4AwsgACgC0AMoAhQiAUHQAWpGBEAgACgCACICIAE2AhggAkHkADYCFCAAQQMgACgCACgCBBECACAAQQA2ArgDDAILIAAgASAAKAIYKAIUEQMADQELQQAPCyAAKALQAyIAIAAoAhRBAWpBB3E2AhRBAQvXAQEGfyAAKAIYIgEoAgQiAkUEQCAAIAEoAgwRAABFBEBBAA8LIAEoAgQhAgsgASgCACIDLQAAIQQgAkEBayIFBH8gA0EBagUgACABKAIMEQAARQRAQQAPCyABKAIEIQUgASgCAAsiAi0AACEDIAAoAgAiBkHdADYCFCAGIAAoArgDNgIYIAAoAgAgAyAEQQh0ciIDQQJrIgQ2AhwgAEEBIAAoAgAoAgQRAgAgASAFQQFrNgIEIAEgAkEBajYCACADQQNPBEAgACAEIAAoAhgoAhARAgALQQELmgIBCH8gACgCACIEIAAoArgDIgI2AhggBEH8ADYCFCAAKAIAIAE2AhwgAEF/IAAoAgAoAgQRAgAgAUEGakEHcUHQAXIhBCABQQFrQQdxQdABciEFIAFBAmpBB3FB0AFyIQYgAUEBakEHcUHQAXIhAQJAA0AgASACRiACQXhxQdABR3IgAiAGRnIhB0ECQQEgAiAERhshCAJAA0ACQCAAKAIAIgMgAjYCGCADQeMANgIUIAAoAgBBAkEDIAJBwAFIIgMbIgkgCUECIAggAiAFRhsgBxsgAxsiAzYCHCAAQQQgACgCACgCBBECACADQQFrDgMCAAQBCwsgABDWA0UEQEEADwsgACgCuAMhAgwBCwsgAEEANgK4AwtBAQvNAQEEfyMAQRBrIgQkACAAKAIUIgNBzQFHBEAgACgCACIFIAM2AhggBUEVNgIUIAAgACgCACgCABEBAAsCQCAAKAKMASIFIAAoAnQiBk8EQCAAKAIAIgFB/gA2AhQgAEF/IAEoAgQRAgBBACEBDAELIAAoAggiAwRAIAMgBjYCCCADIAU2AgQgACADKAIAEQEACyAEQQA2AgwgACABIARBDGogAiAAKALAAygCBBEGACAAIAQoAgwiASAAKAKMAWo2AowBCyAEQRBqJAAgAQu1QAETfwJAAkACQAJAAkAgACgCFCIBQcoBaw4DAAEDAgsgACAAQQFBHCAAKAIEKAIAEQQAIg02ArwDIA1BADYCCCANQc8BNgIEIA1B0AE2AgAgACgC1AEiAUEIRwRAIAAoAgAiAiABNgIYIAJBEDYCFCAAIAAoAgAoAgARAQALIAAoAhQiAUHKAUcEQCAAKAIAIgIgATYCGCACQRU2AhQgACAAKAIAKAIAEQEACwJ/IAAoAqwDIgIgACgCMGwiAyAAKAI0IgRNBEAgACAAKAIcIAIQZDYCcEEBIQEgACgCIAwBCyAEQQF0IANPBEAgACAAKAIcQQF0IAIQZDYCcEECIQEgACgCIEEBdAwBC0EDIQEgBEEDbCADTwRAIAAgACgCHEEDbCACEGQ2AnAgACgCIEEDbAwBCyAEQQJ0IANPBEAgACAAKAIcQQJ0IAIQZDYCcEEEIQEgACgCIEECdAwBC0EFIQEgBEEFbCADTwRAIAAgACgCHEEFbCACEGQ2AnAgACgCIEEFbAwBC0EGIQEgBEEGbCADTwRAIAAgACgCHEEGbCACEGQ2AnAgACgCIEEGbAwBC0EHIQEgBEEHbCADTwRAIAAgACgCHEEHbCACEGQ2AnAgACgCIEEHbAwBCyAEQQN0IANPBEAgACAAKAIcQQN0IAIQZDYCcEEIIQEgACgCIEEDdAwBC0EJIQEgBEEJbCADTwRAIAAgACgCHEEJbCACEGQ2AnAgACgCIEEJbAwBC0EKIQEgBEEKbCADTwRAIAAgACgCHEEKbCACEGQ2AnAgACgCIEEKbAwBC0ELIQEgBEELbCADTwRAIAAgACgCHEELbCACEGQ2AnAgACgCIEELbAwBC0EMIQEgBEEMbCADTwRAIAAgACgCHEEMbCACEGQ2AnAgACgCIEEMbAwBC0ENIQEgBEENbCADTwRAIAAgACgCHEENbCACEGQ2AnAgACgCIEENbAwBC0EOIQEgBEEObCADTwRAIAAgACgCHEEObCACEGQ2AnAgACgCIEEObAwBC0EPIQEgACgCHCEGIARBD2wgA08EQCAAIAZBD2wgAhBkNgJwIAAoAiBBD2wMAQsgACAGQQR0IAIQZDYCcEEQIQEgACgCIEEEdAsgACgCrAMQZCECIAAgATYCyAIgACABNgLEAiAAIAI2AnQCQCAAKAIkIgNBAUgNACADQQdxIQQgACgC2AEhAiADQQFrQQdPBEAgA0F4cSEDA0AgAiABNgIoIAIgATYCJCACIAE2ApAFIAIgATYCjAUgAiABNgK4BCACIAE2ArQEIAIgATYC4AMgAiABNgLcAyACIAE2AogDIAIgATYChAMgAiABNgKwAiACIAE2AqwCIAIgATYC2AEgAiABNgLUASACIAE2AoABIAIgATYCfCACQcAFaiECIANBCGsiAw0ACwsgBEUNAANAIAIgATYCKCACIAE2AiQgAkHYAGohAiAEQQFrIgQNAAsLAkAgACgCJCIJQQFIDQBBCEEEIAAoAkwbIQogACgCyAIhAyAAKALEAiEEIAAoAtgBIgchCANAAkAgCiAEIgFIDQAgACgCvAIiAiAIKAIIIgxBAXRvDQBBAiEGA0AgBCAGbCIBIApKDQEgAiAGQQF0IgYgDGxvRQ0ACwsgCCABNgIkAkAgCiADIgJIDQAgACgCwAIiDCAIKAIMIg5BAXRvDQBBAiEGA0AgAyAGbCICIApKDQEgDCAGQQF0IgYgDmxvRQ0ACwsgCCACNgIoAkAgAkEBdCIGIAFIBEAgCCAGNgIkDAELIAIgAUEBdCIBTA0AIAggATYCKAsgCEHYAGohCCALQQFqIgsgCUcNAAsgCUEBSA0AQQEhBgNAIAcgBygCJCAHKAIIIAAoAhxsbCAAKAKsAyAAKAK8AmwQZDYCLCAHIAcoAiggBygCDCAAKAIgbGwgACgCrAMgACgCwAJsEGQ2AjAgBiAAKAIkIglODQEgB0HYAGohByAGQQFqIQYMAAsACyAAKAIsQQFrIgFBBk0EQCABQQJ0QbDNAmooAgAhCQsgACAJNgJ4IABBASAJIAAoAlQbNgJ8IAAgABCbBQR/IAAoAsACBUEBCzYCgAEgACAAQQFBgAogACgCBCgCABEEAEEAQYAEEDIiAkGABGoiATYC0AIDQCABIAVqIAU6AAAgASAFQQFyIgNqIAM6AAAgASAFQQJyIgNqIAM6AAAgASAFQQNyIgNqIAM6AAAgASAFQQRyIgNqIAM6AAAgASAFQQVyIgNqIAM6AAAgASAFQQZyIgNqIAM6AAAgASAFQQdyIgNqIAM6AAAgBUEIaiIFQYACRw0ACyACQYAGakH/AUGABBAyGgJAAkAgACgCdEUNACAAKAJwRQ0AIAAoAnhBAEoNAQsgACgCACIBQSE2AhQgACABKAIAEQEACyANQQA2AgwgABCbBSEBIA1CADcCFCANIAE2AhACQCAAKAJURQRAIABBADYCbCAAQgA3AmQMAQsgACgCQEUEQCAAQQA2AmwgAEIANwJkCyAAKAJEBEAgACgCACIBQTA2AhQgACABKAIAEQEACwJAIAAoAnhBA0cEQCAAQQA2AogBIABBADYCbCAAQgE3AmQMAQsgACgCiAEEQCAAQQE2AmgMAQsgACgCXARAIABBATYCbAwBCyAAQQE2AmQLIAAoAmQEQEEAIQ4gACAAQQFB2AAgACgCBCgCABEEACIBNgLkAyABQQA2AkQgAUHwADYCDCABQfEANgIIIAFB8gA2AgAgAUEANgI0IAAoAnhBBU4EQCAAKAIAQrmAgIDAADcCFCAAIAAoAgAoAgARAQALIAAoAmAiBUGBAk4EQCAAKAIAQruAgICAIDcCFCAAIAAoAgAoAgARAQAgACgCYCEFCyAAKAJ4IghBAWsiCkF4cSEDIApBB3EhByAAKALkAyEJIAhBAkghCyAIQQJrQQdJIQxBASECA0AgAiIEQQFqIgIhBgJAIAsNACACIQYgAyEBIAxFBEADQCACIAZsIAJsIAJsIAJsIAJsIAJsIAJsIAJsIQYgAUEIayIBDQALCyAHIgFFDQADQCACIAZsIQYgAUEBayIBDQALCyAFIAZODQALQQEhAyAEQQFNBEAgACgCACIBIAY2AhggAUE6NgIUIAAgACgCACgCABEBAAsCQCAIQQFIDQAgCEEDcSEGAkAgCkEDSQRAQQAhAgwBCyAIQXxxIQpBACECIAlBIGohASAEIQMDQCABIAJBAnQiB2ogBDYCACABIAdBBHJqIAQ2AgAgASAHQQhyaiAENgIAIAEgB0EMcmogBDYCACACQQRqIQIgAyAEbCAEbCAEbCEDIApBBGsiCkUNASADIARsIQMMAAsACyAGBEADQCAJIAJBAnRqIAQ2AiAgAkEBaiECIAMgBGwhAyAGQQFrIgYNAAsLIAhBAUgNAEEAIQIgACgCLEECRyEGQQEhAQNAIAUgAyAJIAYEfyACBSACQQJ0QcDEAmooAgALQQJ0aiIHKAIgIgRtIARBAWoiCmwiBE4EQCAHIAo2AiBBACEBIAQhAyACQQFqIgIgCEcNAQsgAUEBcSEEQQEhAUEAIQIgBEUNAAsLIAAoAnghAiAAKAIAIgEgAzYCGAJ/IAJBA0YEQCABIAkoAiA2AhwgASAJKAIkNgIgIAEgCSgCKDYCJEHgACEGIAEMAQtB4QAhBiAAKAIACyECIAEgBjYCFCAAQQEgAigCBBECACAAQQEgAyAAKAJ4IAAoAgQoAggRCgAhECAAKAJ4IgJBAU4EQCADIQEDQCABIAkgDkECdCIFaigCICIPbSEEIA9BAWsiEUECbSESIA9BAU4EQCAFIBBqIQogBEF8cSEHIARBA3EhCCAEQQFrIRNBACEMA0AgDEH/AWwgEmogEW0hCyADIAQgDGwiBkoEQANAAkAgBEEBSA0AQQAhAiAHIQUgE0EDTwRAA0AgCigCACACIAZqaiALOgAAIAooAgAgAkEBciAGamogCzoAACAKKAIAIAJBAnIgBmpqIAs6AAAgCigCACACQQNyIAZqaiALOgAAIAJBBGohAiAFQQRrIgUNAAsLIAgiBUUNAANAIAooAgAgAiAGamogCzoAACACQQFqIQIgBUEBayIFDQALCyABIAZqIgYgA0gNAAsLIAxBAWoiDCAPRw0ACyAAKAJ4IQILIAQhASAOQQFqIg4gAkgNAAsLIAkgAzYCFCAJIBA2AhAgABCkBQJAIAAoAlhBAkcNACAAKAJ4QQFIDQAgACgCcEEBdEEEaiEBIAAoAuQDIQNBACECA0AgAyACQQJ0aiAAQQEgASAAKAIEKAIEEQQANgJEIAJBAWoiAiAAKAJ4SA0ACwsgDSAAKALkAzYCFAsgACgCbEUEQCAAKAJoRQ0BC0EAIQIgACAAQQFBLCAAKAIEKAIAEQQAIgE2AuQDIAFBADYCKCABQQA2AiAgAUH4ADYCDCABQfkANgIAIAAoAnhBA0cEQCAAKAIAIgNBMDYCFCAAIAMoAgARAQALIAEgAEEBQYABIAAoAgQoAgARBAA2AhgDQCAAQQFBgCAgACgCBCgCBBEEACEDIAJBAnQiBCABKAIYaiADNgIAIABBAUGAICAAKAIEKAIEEQQAIQMgASgCGCAEQQRyaiADNgIAIAJBAmoiAkEgRw0ACyABQQE2AhwCQCAAKAJsBEBBCCEDQTohBAJAIAAoAmAiAkEITgRAIAJBgQJIDQFBOyEEQYACIQMLIAAoAgAiBSADNgIYIAUgBDYCFCAAIAAoAgAoAgARAQALIABBASACQQMgACgCBCgCCBEKACEDIAEgAjYCFCABIAM2AhAMAQsgAUEANgIQCyAAKAJYBEAgAEECNgJYIAEgAEEBIAAoAnBBBmxBDGogACgCBCgCBBEEADYCICAAEKMFCyANIAAoAuQDNgIYCyAAKAJERQRAAkAgDSgCEARAQQAhAiAAIABBAUEwIAAoAgQoAgARBAAiATYC3AMgAUEANgIIIAFB/wA2AgAgASAAKAJ4IAAoAnBsIgM2AigCQCAAKALAAkECRgRAIAFBgAE2AgwgAUGBATYCBCAAQQEgAyAAKAIEKAIEEQQAIQIMAQsgAUGCATYCDCABQYMBNgIECyABIAI2AiAgACgCKCEDIAAoAtwDIgEgAEEBQYAIIAAoAgQoAgARBAA2AhAgASAAQQFBgAggACgCBCgCABEEADYCFCABIABBAUGACCAAKAIEKAIAEQQANgIYIAEgAEEBQYAIIAAoAgQoAgARBAAiBDYCHCABKAIYIQUgASgCFCEGIAEoAhAhB0EAIQJBgH8hAQJAIANBB0YEQANAIAcgAkECdCIDaiABQdObC2xBgIACakEQdTYCACADIAZqIAFBxJYObEGAgAJqQRB1NgIAIAMgBWogAUHdpHpsNgIAIAMgBGogAUHNn31sQYCAAmo2AgAgAUEBaiEBIAJBAWoiAkGAAkcNAAwCCwALA0AgByACQQJ0IgNqIAFB6c0FbEGAgAJqQRB1NgIAIAMgBmogAUGiiwdsQYCAAmpBEHU2AgAgAyAFaiABQa6SfWw2AgAgAyAEaiABQefPfmxBgIACajYCACABQQFqIQEgAkEBaiICQYACRw0ACwsMAQsgACIBIABBAUEcIAAoAgQoAgARBAAiAjYC4AMgAkGEATYCAAJAAkACQCAAKAIoIgNBB0sNAAJAQQEgA3RBzAFxRQRAQQEgA3RBMHENASADQQFHDQIgASgCJEEBRw0DDAQLIAEoAiRBA0cNAgwDCyABKAIkQQRHDQEMAgsgASgCJEEASg0BCyABKAIAIgNBCzYCFCABIAMoAgARAQALAkAgASgCsAJFDQACQCABKAIoQQJrDgUBAAAAAQALIAEoAgAiA0EcNgIUIAEgAygCABEBAAsCQAJAAkACQAJAAkAgASgCLCIDQQFrDgYAAQQDBAIECyABQQE2AngCQAJAAkAgASgCKEEBaw4HAAEAAgICAAILIAJBhQE2AgQgASgCJCIEQQJIDQYgBEEBayIGQQdxIQMgASgC2AEhBUEBIQIgBEECa0EHTwRAIAZBeHEhBgNAIAUgAkHYAGxqIgRBADYCNCAEQQA2AowBIARBADYC5AEgBEEANgK8AiAEQQA2ApQDIARBADYC7AMgBEEANgLEBCAEQQA2ApwFIAJBCGohAiAGQQhrIgYNAAsLIANFDQYDQCAFIAJB2ABsakEANgI0IAJBAWohAiADQQFrIgMNAAsMBgsCQAJAAkACQCABKAKwAg4CAAECCyACQYYBNgIEDAILIAJBhwE2AgQMAQsgASgCACICQRw2AhQgASACKAIAEQEACyABKALgAyABQQFBgBggASgCBCgCABEEACIFNgIYQQAhAgNAIAUgAkECdGoiAyACQYuZAWw2AgAgA0GAEGogAkGvOmxBgIACajYCACADQYAIaiACQcasAmw2AgAgBSACQQFyIgRBAnRqIARBi5kBbDYCACADQYQQaiAEQa86bEGAgAJqNgIAIANBhAhqIARBxqwCbDYCACACQQJqIgJBgAJHDQALDAULIAEoAgAiAkEcNgIUIAEgAigCABEBAAwECyABQQM2AngCQAJAAkACQAJAIAEoAihBAWsOBwADAQQEBAIECyACQYgBNgIEDAcLIAJBiQE2AgQgARCgBQwGCyACQYkBNgIEIAEoAuADIgIgAUEBQYAIIAEoAgQoAgARBAA2AgggAiABQQFBgAggASgCBCgCABEEADYCDCACIAFBAUGACCABKAIEKAIAEQQANgIQIAIg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AkwgAUIANwI8IAFCADcCRCAAIAE2AgQCQEHMzQIQ+gIiA0UNACACQfgAOgALIAIgAkEMajYCACACIAJBC2o2AgQgA0HUzQIgAhChAUEBSA0AAkAgAi0AC0EgckHtAEcEQCACKAIMIQMMAQsgAiACKAIMQegHbCIDNgIMCyABIANB6AdsNgIsCyACQRBqJAAgAEEANgK4AiAAQQA2AhggAEEANgIIIABCADcCpAEgAEIANwKsASAAQgA3ArQBIABCADcCvAEgAEIANwLEASAAQgA3AswBIAAgAEEAQawBIAAoAgQoAgARBAAiATYC0AMgAUIANwJgIAFB6wA2AhwgAUHsADYCCCABQe0ANgIEIAFB7gA2AgAgAUEANgJoIAFB6wA2AiQgAUHrADYCKCABQgA3AmwgAUHrADYCLCABQesANgIwIAFCADcCdCABQesANgI0IAFB6wA2AjggAUIANwJ8IAFB6wA2AjwgAUEANgKEASABQesANgJAIAFCADcCiAEgAUHrADYCRCABQesANgJIIAFB6wA2AkwgAUHrADYCUCABQgA3ApABIAFB6wA2AlQgAUIANwKYASABQQA2AqABIAFB6wA2AlwgAUHvADYCICABQe8ANgJYIABBADYCuAMgAEEANgKQASAAQQA2AtgBIAAoAtADIgFBADYCpAEgAUEANgIYIAFCADcCDCAAIABBAEEcIAAoAgQoAgARBAAiATYCzAMgAUEBNgIYIAFCADcCECABQecANgIMIAFB6AA2AgggAUHpADYCBCABQeoANgIAIABByAE2AhQLuA0BCH9BAiECAkAgACgCzAMiBSgCFA0AA0ACQCAAAn8CQAJAIAAgACgC0AMoAgQRAAAiAkEBRwRAIAJBAkcNBiAFQQE2AhQgBSgCGEUNAUECIQIgACgC0AMoAhBFDQYgACgCACIBQT42AhQgACABKAIAEQEAQQIPCwJAAkACQCAFKAIYDgICAQALIAAoAtQCIQIMBQsCQCAAKAIgQdz/A0wEQCAAKAIcQd3/A0gNAQsgACgCAEKqgICAwPs/NwIUIAAgACgCACgCABEBAAsgACgC1AEiAUEIa0EFTwRAIAAoAgAiAiABNgIYIAJBEDYCFCAAIAAoAgAoAgARAQALIAAoAiQiA0ELTgRAIAAoAgAiASADNgIYIAFBGzYCFCAAKAIAQQo2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AQsgAigCeCIERQ0BIAAgAigCfCIFSA0BIAAgAigCgAFKDQEgBCAAIAVrQQJ0agsoAgAiBA0BCyACIAA2AhggAigCcCgCACEECyAEIQACQAJAA0AgAC0AACIFRQ0BIABBAWohACAFQSVHDQALIAAtAABB8wBHDQAgAyACQRhqNgIgIAEgBCADQSBqEJ0CDAELIAIpAiAhBiACKQIoIQcgAikCGCEIIAMgAikCMDcDGCADIAc3AxAgAyAGNwMIIAMgCDcDACABIAQgAxCdAgsgA0EwaiQACxUAIAAoAgAiAEEANgIUIABBADYCbAsMACAAKAIYQQE2AiQLiwEBAn8gACgCGCIBKAIgQQFBgCAgASgCHBBZIgJFBEAgASgCJARAIAAoAgAiAkErNgIUIAAgAigCABEBAAsgACgCACICQfsANgIUIABBfyACKAIEEQIAIAEoAiBB/wE6AAAgASgCIEHZAToAAUECIQILIAFBADYCJCABIAI2AgQgASABKAIgNgIAQQELVAECfyABQQFOBEAgASAAKAIYIgIoAgQiA0oEQANAIAAgAigCDBEAABogASADayIBIAIoAgQiA0oNAAsLIAIgAyABazYCBCACIAIoAgAgAWo2AgALC3sBAX8gACgCGCICRQRAIAAgAEEAQSggACgCBCgCABEEACICNgIYIAIgAEEAQYAgIAAoAgQoAgARBAA2AiAgACgCGCECCyACIAE2AhwgAkHdADYCGCACQd4ANgIUIAJB3wA2AhAgAkHgADYCDCACQeEANgIIIAJCADcCAAsiAQF9QX8gACoCACABKgIAkyICQwAAAABeIAJDAAAAAF0bCxAAIAAoAgBBhAFqQQEQCQALCwAgASACIAARJQALCwAgASACIAARAgALKwIBfwF8IwBBEGsiAiQAIAIgASAAERoAOQMIIAIrAwghAyACQRBqJAAgAwsLACABIAIgABEUAAsnAQF/IwBBEGsiASQAIAEgABEOADYCDCABKAIMIQAgAUEQaiQAIAALCQAgASAAEQEACzUBAX8jAEEQayICJAAgAiABEK4FIAIgAiAAEQAANgIMIAIoAgwhACACEDEaIAJBEGokACAACysBAX8jAEEQayIDJAAgAyABIAIgABEDADYCDCADKAIMIQAgA0EQaiQAIAALNwEBfyMAQRBrIgMkACADIAIQrgUg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wPMDKAIADAELIAAoAgAgAkHAAmxqIgBBEGoQ2QMgACgCsAIhASAAKAIAIQIgACgCBCEEIAMgACsDCDkDECADIAQ2AgggAyACNgIEIAMgATYCAEGRgwRBwfcBIAMQChpBAAshASADQTBqJAAgAQteAQF/IwBBEGsiASQAIAEgADYCDCABQZySBCABQQxqEEU2AgggARBANgIAQbzzAyEAIAFBCGogARBIBH9BvPMDBSABQQxqEEkoAtgBQSxqCygCACEAIAFBEGokACAAC/4dAw9/A3wHfSMAQTBrIgskACALIAA2AiwgC0GckgQgC0EsahBFNgIAIAsQQDYCKAJ/IAsgC0EoahBIBEBBvPMDKAIADAELIAtBLGoQSSEAIAtBAEEoEDIhBSAAKALEASECIAVBATYCECAFIAI2AgAgBSAAKALMATYCDCAAKALYASEBIwBB0ABrIgckAAJAAkAgAUUgBUVyDQAgAUEANgIsIAFBLGohDAJAAkACQCABKAL0hq8DIgBBBEYEQCABKAL8hq8DIgBBAU4EQCABIABBAWs2AvyGrwMMAgsgByABKAIQIgQgASgCgIevA2oiAEH/ASAAQf8BSBsiBjYCRCABKAKEh68DIQIgByAENgJMQQAhACAHIAQgAmsiAkEAIAJBAEobIgg2AkggAUEwaiEKIAFBsPgAaiENIAFBuPgAaiECIAFB4IanAmohCQJAA0AgAEEDRwRAIAUoAgwgASgCJCABKAIoIAEoAgAgASgCDCAAQQJ0Ig4gB0HEAGpqKAIAIAEoAhQgCUEAEJoEQQBIDQIgASgCJCABKAIoIAkgASgCFCACIA0Q5QVBAEgNAiAFKAIAIAEoAiQgASgCKCABKAIEIAIgASgCsHggASgC8IavAyABKAIUIAEoAhggASgCIEG4AWogASsDkIevAyAKIAwgASgCmIevAxCaBUEASA0CIAdBOGogDmogDCgCADYCACAAQQFqIQAMAQsLAkAgASgCAEEBRwRAIAcoAkAhAyAHKAI4IQIMAQsgByAGNgIwIAcgBygCOCICNgI0IAcgCDYCICAHIAcoAjw2AiQgByAENgIoIAcgBygCQCIDNgIsQQBBA0GV0wAgB0EgahAvCwJ/IAMgBygCPCIJSCACIANKckUEQAJAIAECfyABKAKAh68DIgMgASgChIevAyICSARAIANBAWoMAQsgAiADSARAIAEgAkEBajYChIevAwwCCyABIAJBAWo2AoSHrwMgA0EBagsiAzYCgIevAwtBASADIARqQf4BTAR/IAMgBEgFIAFBATYCgIevAyAEQQFKCw0BGiABQQE2AoSHrwNBAQwBCyABIAggBiACIAlIGyICNgIQQQEhAwJAIAIgBGsiBEEBTgRAIAEgBDYCgIevAwwBCyABQQE2AoCHrwNBACAEayEDCyABIAM2AoSHrwNBACABKAIAQQFHDQAaIAcgAjYCEEEAQQNBktkAIAdBEGoQL0EACyEDIAEgASgC+IavAzYC/IavAwsgAEEDRw0EIAMNAyABKAL0hq8DIQALAkACQCAAQQFrDgMBAQACC0EAIQhBfyEEAkAgASgCiIevAyICIAUoAgwiDhCnBEEASA0AIAIoAgBFBEAgAiACKAIIIAIoAgRsEDAiADYCACAARQ0BCwNAAkBBACEEIAggAigCCCIGTg0AA0ACQEEAIQlBACEAQXwhBiAEIAIoAgQiCk4NAANAIAZBBUcEQAJAIAYgCGoiA0EASA0AIAMgAigCCE4NACADIApsIQ9BfCEDA0AgA0EFRg0BIAMgBGoiDUEASCAKIA1MckUEQCAJIA4gDSAPamotAABqIQkgAEEBaiEACyADQQFqIQMMAAsACyAGQQFqIQYMAQsLIAIoAgAgCCAKbCAEamogCSAAbToAACAEQQFqIQQMAQsLIAhBAWohCAwBCwtBACEDA0AgAyAGIAIoAgRsTg0BIAIoAgAgA2oiACAALQAAQQdrOgAAIANBAWohAyACKAIIIQYMAAsACyAEIgJBAEgNBSAFKAIMIAEoAoiHrwMiACgCBCAAKAIIIAEoAgAgASgCDEEAQQAgAUHghqcCaiAAKAIAEJoEIgJBAE4NAgwFCyABKAL8hq8DIgJBAU4EQCABIAJBAWs2AvyGrwMMAQsgBSgCDCEGIAEoAoiHrwMhBAJ/IABBAUYEQEEAIQBBACEDQQAhAiAEIAYQpwRBAEgEf0F/BUEBIQYDfyAEIANBAnRqIghBjAhqIAgoAgwgAGoiADYCACAGQf8BcQR/IANBAWohAyAGQQFqIQYMAQVBAAsLCyIAQQBOBH8CfyAEKAIIIAQoAgRsskMAAAA/lCITQwAAgE9dIBNDAAAAAGBxBEAgE6kMAQtBAAshAwNAIAIiAEEBaiECIAQgAEH/AXEiCEECdGpBjAhqKAIAIgYgA0kNAAsDQCADIAZGBEAgBCAAQQFqIgBB/wFxQQJ0akGMCGooAgAhBgwBCwsgByAAQf8BcSAIakEBdjoAREEABSAACwwBCwJ/QQAhA0F/IAQgBhCnBEEASA0AGkEBIQBBAiECA0AgFSAEIABBAnRqKAIMIABss5IhFSACQf8BcQRAIABBAWohACACQQFqIQIMAQsLIAQoAgggBCgCBGyyIRhBACEAQQAhAgNAAkAgEyAEIABBAnRqKAIMIgazkiITQwAAAABcBEAgGCATkyIUQwAAAABbDQEgFiAAIAZss5IiFiATlSAVIBaTIBSVkyIZIBkgEyAUlJSUIhQgFyAUIBdeIgYbIRcgACADIAYbIQMLIABBAWohACACQf8BcUEBaiICQf8BcSACRg0BCwsgByADOgBEQQALCyICQX9MDQQCQCABKAIAQQFHDQAgBy0ARCIAIAEoAhBGDQAgASgC9IavAyECIAcgADYCBCAHQcnkAEGA6QAgAkEBRhs2AgBBAEEDQYDfACAHEC8LIAEgBy0ARDYCECABIAEoAviGrwM2AvyGrwMLIAUoAgwgASgCJCABKAIoIAEoAgAgASgCDCABKAIQIAEoAhQgAUHghqcCakEAEJoEQQBIDQILIAEoAiQgASgCKCABQeCGpwJqIAEoAhQgAUG4+ABqIgAgAUGw+ABqEOUFQQBIDQFBfyECIAUoAgAgASgCJCABKAIoIAEoAgQgACABKAKweCABKALwhq8DIAEoAhQgASgCGCABKAIgQbgBaiABKwOQh68DIAFBMGogDCABKAKYh68DEJoFQQBIDQILIAEoAhxBAUcEQCABKAL4iqYCIgBBACAAQQBKGyEMQQAhBgNAIAYgDEcEQEEAIQUgASgCLCIAQQAgAEEAShshBCABIAZBiAJsaiIDQcCLpgJqIQggA0G4i6YCaiEJIANBgIumAmohCkF/IQBEAAAAAAAA4D8hEQNAIAQgBUcEQAJAIAooAgC3IAEgBUEIdGoiAigCMLciEKMiEkRmZmZmZmbmP2MgEkThehSuR+H2P2RyDQAgAisDaCAJKwMAoSISIBKiIAIrA3AgCCsDAKEiEiASoqAgEKMiECARY0UNACAQIREgBSEACyAFQQFqIQUMAQsLAkAgAEEASA0AQX8hAgJAAkAgASgCGCIJDgUAAAABAQcLIANBoIumAmorAwAiEiABIABBCHRqIgAiAisDUGRFDQEgAiASOQNQIAAgA0GEi6YCaigCACIINgI0IANBkIumAmohCkEAIQJBfyEERAAAAACE15dBIREDQEQAAAAAAAAAACEQQQAhBSACQQRHBEADQCAFQQRHBEAgECADIAVBBHRqIg1BqIymAmorAwAgACACIAVqQQNxQQR0aiIOKwPYAaEiECAQoiANQbCMpgJqKwMAIA4rA+ABoSIQIBCioKAhECAFQQFqIQUMAQsLIBAgEWMEQCAKKAIAIAJrQQRqQQRvIQQgECERCyACQQFqIQIMAQsLIABBQGsgBDYCACAJQQFNBEAgACASOQNYIAAgCDYCOCAAIAQ2AkQMAgsgACASOQNgIAAgCDYCPCAAIAQ2AkgMAQsCQCADQaiLpgJqKwMAIhAgASAAQQh0aiIAIgIrA1hkBEAgA0Gwi6YCaisDACERDAELIANBsIumAmorAwAiESAAKwNgZEUNAQsgAiAQOQNYIANBiIumAmooAgAhAiAAIBE5A2AgACACNgI4IAAgA0GMi6YCaigCADYCPEEAIQJBfyEERAAAAACE15dBIREDQEQAAAAAAAAAACEQQQAhBSACQQRHBEADQCAFQQRHBEAgECADIAVBBHRqIghBqIymAmorAwAgACACIAVqQQNxQQR0aiIJKwPYAaEiECAQoiAIQbCMpgJqKwMAIAkrA+ABoSIQIBCioKAhECAFQQFqIQUMAQsLIAIgBCAQIBFjIgUbIQQgECARIAUbIREgAkEBaiECDAELCyAAQQQgBGsiAiADQZSLpgJqKAIAakEEbzYCRCAAIAIgA0GYi6YCaigCAGpBBG82AkgLIAZBAWohBgwBCwsgARCmBUEAIQVBACEEA0AgASgC+IqmAiAFSgRAIAEgBUGIAmxqIgBBgI2mAmoiAiACKAIAIgJBAWo2AgAgAkECTARAIAQgBUcEQCABIARBiAJsakGAi6YCaiAAQYCLpgJqQYgCEDcaCyAEQQFqIQQLIAVBAWohBQwBCwsgASAENgL4iqYCIAEoAiwiAEEAIABBAEobIQJBACEDA0ACQAJAIAIgA0YNACABIANBCHRqIgAoAjQiBkEASA0BIABBMGohCEEAIQUgBEEAIARBAEobIQADQAJAAn8gACAFRwRAIAEgBUGIAmxqQYSLpgJqKAIAIAZHDQIgBSEACyAAIARGCwRAIARBPEYNAyABIARBAWoiBDYC+IqmAgsgASAAQYgCbGoiAEGAi6YCaiAIQYACEDcaIABBgI2mAmpBATYCAAwDCyAFQQFqIQUMAAsAC0EAIQIgASgCHEECRg0EQQAhAANAIAAgBE4NBUEAIQUgASgCLCIDQQAgA0EAShshBiABIABBiAJsaiIIQcCLpgJqIQkgCEG4i6YCaiEKIAhBgIumAmohCANAAkAgBSAGRwR/IAgoAgC3IAEgBUEIdGoiDCgCMLciEaMiEERmZmZmZmbmP2MgEEThehSuR+H2P2RyDQEgDCsDaCAKKwMAoSIQIBCiIAwrA3AgCSsDAKEiECAQoqAgEaNEAAAAAAAA4D9jRQ0BIAUFIAYLIANGBEAgASADQQh0akEwaiAIQYACEDcaIAEgASgCLEEBajYCLCABKAL4iqYCIQQLIABBAWohAAwCCyAFQQFqIQUMAAsACwALIANBAWohAwwACwALIAEQpgVBACECDAELQX8hAgsgB0HQAGokACACCyEAIAtBMGokACAAC6sBAQJ/IwBBEGsiAiQAIAIgADYCDCACQZySBCACQQxqEEU2AgggAhBANgIAAn8gAkEIaiACEEgEQEG88wMoAgAMAQsgAUEATkEAIAJBDGoQSSIAQcgCaiIDEDUgAUsbRQRAQcTzAygCAAwBCyADIAEQQyEBIAAoAuQBIAAoAtgBIgBBMGogACgCLCABKAIEIgBBABC2BSAAQQhqENkDQQALIQAgAkEQaiQAIAALqwEBAn8jAEEQayICJAAgAiAANgIMIAJBnJIEIAJBDGoQRTYCCCACEEA2AgACfyACQQhqIAIQSARAQbzzAygCAAwBCyABQQBOQQAgAkEMahBJIgBByAJqIgMQNSABSxtFBEBBxPMDKAIADAELIAMgARBDIQEgACgC5AEgACgC2AEiAEEwaiAAKAIsIAEoAgQiAEEBELYFIABBCGoQ2QNBAAshACACQRBqJAAgAAu3AgIBfwh8IwBBEGsiAiQAIAIgADYCDCACQZySBCACQQxqEEU2AgggAhBANgIAAn8gAkEIaiACEEgEQEG88wMoAgAMAQsgASACQQxqEEkoAtgBIgAoAixOBEBBwPMDKAIADAELQciSBCAAIAFBCHRqQTBqIAFBAEgbIgFB0JQEKwMAIgQ5A6gBIAFB2JQEKwMAIgU5A7ABIAFB4JQEKwMAIgY5A7gBIAFB6JQEKwMAIgc5A8ABIAFB8JQEKwMAIgg5A8gBIAFB+JQEKwMAIgk5A9ABIAFBgJUEKwMAIgo5A9gBQYiVBCsDACEDIAEgCiAIIAQgBqCgoEQAAAAAAADQP6I5AzggASADOQPgASABQUBrIAMgCSAFIAegoKBEAAAAAAAA0D+iOQMAQQALIQAgAkEQaiQAIAALiQEBAX8jAEEQayIDJAAgAyAANgIMIANBnJIEIANBDGoQRTYCCCADEEA2AgACfyADQQhqIAMQSARAQbzzAygCAAwBCyABIANBDGoQSSgC2AEiACgCLE4EQEHA8wMoAgAMAQtByJIEIAAgAUEIdGpBMGogAUEASBsgAjYCEEEACyEAIANBEGokACAAC5gEAgN/A3wjAEEQayIDJAAgAyAANgIMIANBnJIEIANBDGoQRTYCCCADEEA2AgACfyADQQhqIAMQSARAQbzzAygCAAwBCyABIANBDGoQSSIAKALYASIEKAIsTgRAQcDzAygCAAwBCyAAKALkASEFIAK3IQYjAEHAAWsiACQAIABByJIEIAQgAUEIdGpBMGogAUEASBsiAUGoAWoiAkEEAn8gAUEUaiABKAIMQX9MDQAaIAFBGGogASgCCEF/TA0AGiABQRBqCygCACIBa0EEb0EEdGoiBCsDADkDgAEgACAEKwMIOQOIASAAIAJBBSABa0EEb0EEdGoiBCsDADkDkAEgACAEKwMIOQOYASAAIAJBBiABa0EEb0EEdGoiBCsDADkDoAEgACAEKwMIOQOoASAAIAJBByABa0EEb0EEdGoiASsDADkDsAEgASsDCCEIIABCADcDeCAAIAZEAAAAAAAA4L+iIgc5A3AgAEIANwNgIAAgBzkDWCAAQgA3A0ggAEFAayAGRAAAAAAAAOA/oiIGOQMAIAAgCDkDuAEgACAHOQNoIAAgBjkDUCAAIAY5AzggAEIANwMwIAAgBjkDKCAAIAc5AyAgAEEENgIYIAAgAEEgajYCFCAAIABBgAFqNgIQIAUoAgAgAEEQakHQlARB0JQEIABBCGoQzQIaIAArAwgaIABBwAFqJABBAAshACADQRBqJAAgAAuXAQECfyMAQRBrIgMkACADIAA2AgwgA0GckgQgA0EMahBFNgIIIAMQQDYCAAJ/IANBCGogAxBIBEBBvPMDKAIADAELIAEgA0EMahBJIgAoAtgBIgQoAixOBEBBwPMDKAIADAELIAAoAuQBQciSBCAEIAFBCHRqQTBqIAFBAEgbIAK3QdCUBBD0BBpBAAshACADQRBqJAAgAAtyAQF/IwBBEGsiASQAIAEgADYCDCABQZySBCABQQxqEEU2AgggARBANgIAQX8hACABQQhqIAEQSEUEQCABQQxqEEkoAtgBIgAEfyABIAAoAhQ2AghBAAVBfwshAEF/IAEoAgggABshAAsgAUEQaiQAIAALewEBfyMAQSBrIgIkACACIAA2AhwgAkGckgQgAkEcahBFNgIYIAIQQDYCEAJAIAJBGGogAkEQahBIDQAgAkEcahBJKALYASIARSABQQFLcgR/QX8FIAAgATYCFEEACw0AIAIgATYCAEEAQQFBpPcBIAIQLwsgAkEgaiQAC3YBAn8jAEEQayIBJAAgASAANgIMIAFBnJIEIAFBDGoQRTYCCCABEEA2AgBBACEAIAFBCGogARBIRQRAIAFBDGoQSSgC2AEiAEUgAUEIaiICRXIEf0F/BSACIAAoAgA2AgBBAAsaIAEoAgghAAsgAUEQaiQAIAALWwEBfyMAQRBrIgEkACABIAA2AgwgAUGckgQgAUEMahBFNgIIIAEQQDYCAEEAIQAgAUEIaiABEEhFBEAgAUEMahBJKALYAUHkhqcCaigCACEACyABQRBqJAAgAAt7AQF/IwBBIGsiAiQAIAIgADYCHCACQZySBCACQRxqEEU2AhggAhBANgIQQQAhACACQRhqIAJBEGoQSEUEQCACQRxqEEkoAtgBIAFBAEcQnAcgAkGb9wFBn/cBIAEbNgIAQQBBAUGF9wEgAhAvIAEhAAsgAkEgaiQAIAALfwECfyMAQRBrIgEkACABIAA2AgwgAUGckgQgAUEMahBFNgIIIAEQQDYCAEF/IQAgAUEIaiABEEhFBEAgAUEMahBJKALYASIARSABQQhqIgJFcgR/QX8FIAIgACgC9IavAzYCAEEACyEAQX8gASgCCCAAGyEACyABQRBqJAAgAAtoAQF/IwBBIGsiAiQAIAIgADYCHCACQZySBCACQRxqEEU2AhggAhBANgIQAkAgAkEYaiACQRBqEEgNACACQRxqEEkoAtgBIAEQwQYNACACIAE2AgBBAEEBQev2ASACEC8LIAJBIGokAAt8AQJ/IwBBEGsiASQAIAEgADYCDCABQZySBCABQQxqEEU2AgggARBANgIAQX8hACABQQhqIAEQSEUEQCABQQxqEEkoAtgBIgBFIAFBCGoiAkVyBH9BfwUgAiAAKAIQNgIAQQALIQBBfyABKAIIIAAbIQALIAFBEGokACAAC4gBAQF/IwBBIGsiAiQAIAIgADYCHCACQZySBCACQRxqEEU2AhggAhBANgIQAkAgAkEYaiACQRBqEEgNACACQRxqEEkhACABQf8BSw0AIAAoAtgBIgBFIAFB/wFLcgR/QX8FIAAgATYCEEEACw0AIAIgATYCAEEAQQFB1vYBIAIQLwsgAkEgaiQAC3wBAn8jAEEQayIBJAAgASAANgIMIAFBnJIEIAFBDGoQRTYCCCABEEA2AgBBfyEAIAFBCGogARBIRQRAIAFBDGoQSSgC2AEiAEUgAUEIaiICRXIEf0F/BSACIAAoAgw2AgBBAAshAEF/IAEoAgggABshAAsgAUEQaiQAIAALewEBfyMAQSBrIgIkACACIAA2AhwgAkGckgQgAkEcahBFNgIYIAIQQDYCEAJAIAJBGGogAkEQahBIDQAgAkEcahBJKALYASIARSABQQFLcgR/QX8FIAAgATYCDEEACw0AIAIgATYCAEEAQQFBvfYBIAIQLwsgAkEgaiQAC3kBAn8jAEEQayIBJAAgASAANgIMIAFBnJIEIAFBDGoQRTYCCCABEEA2AgBBfyEAIAFBCGogARBIRQRAIAFBDGoQSSgC2AEiAEUgAUEIaiICRXIEf0F/BSACIAAoApiHrwM2AgBBAAsaIAEoAgghAAsgAUEQaiQAIAALWQEBfyMAQRBrIgIkACACIAA2AgwgAkGckgQgAkEMahBFNgIIIAIQQDYCACACQQhqIAIQSEUEQCACQQxqEEkoAtgBIgAEQCAAIAE2ApiHrwMLCyACQRBqJAALKgEBfEF/IAArAwAgASsDAKEiAkQAAAAAAAAAAGQgAkQAAAAAAAAAAGMbC5QBAgF/AXwjAEEQayIBJAAgASAANgIMIAFBnJIEIAFBDGoQRTYCACABEEA2AggCfEQAAAAAAADwvyABIAFBCGoQSA0AGkQAAAAAAADwvyABQQxqEEkoAtgBIgBFDQAaIAAEfyABIAArA5CHrwM5AwBBAAVBfwshAEQAAAAAAADwvyABKwMAIAAbCyECIAFBEGokACACC7UBAgF/AnwjAEEgayICJAAgAiAANgIcIAJBnJIEIAJBHGoQRTYCGCACEEA2AhACQCACQRhqIAJBEGoQSA0AIAJBHGoQSSEAIAFDAAAAAF8gAUMAAIA/YHINACAAKALYASIARQ0AIABFIAG7IgQiA0QAAAAAAAAAAGVyIANEAAAAAAAA8D9mcgR/QX8FIAAgAzkDkIevA0EACw0AIAIgBDkDAEEAQQFBnvYBIAIQLwsgAkEgaiQAC3IBAX8jAEEQayIBJAAgASAANgIMIAFBnJIEIAFBDGoQRTYCCCABEEA2AgBBfyEAIAFBCGogARBIRQRAIAFBDGoQSSgC2AEiAAR/IAEgACgCGDYCCEEABUF/CyEAQX8gASgCCCAAGyEACyABQRBqJAAgAAtoAQF/IwBBIGsiAiQAIAIgADYCHCACQZySBCACQRxqEEU2AhggAhBANgIQAkAgAkEYaiACQRBqEEgNACACQRxqEEkoAtgBIAEQlAMNACACIAE2AgBBAEEBQfv1ASACEC8LIAJBIGokAAtbAgF/AXwjAEEQayIBJAAgASAANgIMIAFBnJIEIAFBDGoQRTYCCCABEEA2AgBEAAAAAAAA8L8hAiABQQhqIAEQSEUEQCABQQxqEEkrA8ACIQILIAFBEGokACACC0wBAX8jAEEQayICJAAgAiAANgIMIAJBnJIEIAJBDGoQRTYCCCACEEA2AgAgAkEIaiACEEhFBEAgAkEMahBJIAE5A8ACCyACQRBqJAALWwIBfwF8IwBBEGsiASQAIAEgADYCDCABQZySBCABQQxqEEU2AgggARBANgIARAAAAAAAAPC/IQIgAUEIaiABEEhFBEAgAUEMahBJKwO4AiECCyABQRBqJAAgAgtMAQF/IwBBEGsiAiQAIAIgADYCDCACQZySBCACQQxqEEU2AgggAhBANgIAIAJBCGogAhBIRQRAIAJBDGoQSSABOQO4AgsgAkEQaiQAC1QBAX8jAEEQayIBJAAgASAANgIMIAFBnJIEIAFBDGoQRTYCCCABEEA2AgBBfyEAIAFBCGogARBIRQRAIAFBDGoQSUHIAmoQNSEACyABQRBqJAAgAAtzAQJ/IwBBEGsiAiQAIAIgADYCDCACQZySBCACQQxqEEU2AgggAhBANgIAQX8hAAJAIAJBCGogAhBIDQAgAkEMahBJIQMgAUEASA0AIANByAJqIgMQNSABTQ0AIAMgARBDKAIEKAIEIQALIAJBEGokACAAC6cRAxF/AnwBfiMAQRBrIgYkACAGIAA2AgwgBkGckgQgBkEMahBFNgIAIAYQQDYCCEF/IRACQCAGIAZBCGoQSA0AIAZBDGoQSSEIAn8gARA4IQAgCCgC2AEhDSAIAn8gCCgC3AEhESMAQcAUayIBJAACQAJAIABBsg4Q+wEiB0UEQCABIAA2AhBBAEEDQYkYIAFBEGoQLyABQbiVBCgCABChAjYCBCABQd8pNgIAQQBBA0HSJCABEC8MAQsgAUGAEmogBxDLAiABIAFB+AFqNgLgASABQYASakHQLSABQeABahChAUEBRwRAIAEgADYC0AFBAEEDQdgzIAFB0AFqEC8gBxB/DAELAkACQCABKAL4ASICQcACbBAwIg4EQAJAA0AgAiAJSgRAIAFBgBJqIAcQywIgASAOIAlBwAJsaiIEIgJBuAJqNgLAASABIAFB/wFqNgLEASAEAn8gAUGAEmpB5cAAIAFBwAFqEKEBQQFHBEAgEUUEQCABIAA2ApABIAEgAUGAEmo2ApQBQQBBA0HYxgAgAUGQAWoQLwwICwJ/QQAgAUGAAmoiAkUgAEVyDQAaAn8gABB9QQFqIQMDQEEAIANFDQEaIAAgA0EBayIDaiIFLQAAQS9HDQALIAULIgMEf0EAIANBAWogAGsiA0EBakGAEEsNARogAiAAIAMQgwMgA2oFIAILQQA6AAAgAgtFBEAgASAANgKgAUEAQQNBwc4AIAFBoAFqEC8MCAsgBCARAn8gAUGAEmohAkH/DyABQYACahB9ayEDIAFBgAJqIgoQfSAKaiEFAkAgA0UNAANAIAItAAAiDEUNASAFIAw6AAAgBUEBaiEFIAJBAWohAiADQQFrIgMNAAsLIAVBADoAACAKCxDEBiICNgIAIAJBAEgNBCALQQFyIQtBAAwBCyAEIAIpA7gCIhWnQf//AXFBACAVQoCA/v8Pg1AbNgIAIAtBAnIhC0EBCzYCBCABQYASaiAHEMsCIAEgBEEIajYCgAEgAUGAEmpBp9oAIAFBgAFqEKEBQQFHBEAgASAANgJwIAEgCUEBajYCdEEAQQNBreAAIAFB8ABqEC8MBgsgAUGAEmogBxDLAiABIARBKGo2AmwgASAEQSBqNgJoIAEgBEEYajYCZCABIARBEGoiDDYCYEEBIQIgAUGAEmpBq+UAIAFB4ABqEKEBQQRHBEAgASABQfQBajYCUCABIAFB8AFqNgJUIAFBgBJqQZrpACABQdAAahChAUECRw0FQQAhAgsDQCABQYASaiAHEMsCIAEgBCACQQV0aiIDQShqNgI8IAEgA0EgajYCOCABIANBGGo2AjQgASADQRBqNgIwIAFBgBJqQavlACABQTBqEKEBQQRHBEAgASAANgIgIAEgCUEBajYCJEEAQQNB1fkAIAFBIGoQLwwHCyACQQFqIgJBA0cNAAsgBEHwAGohEkEAIQJBBEEEEKoBIgooAgAhBQNAIAJBA0cEQCACQQJ0IQ9BACEDA0AgA0EERwRAIAUgAyAPakEDdGogDCACQQV0aiADQQN0aisDADkDACADQQFqIQMMAQsLIAJBAWohAgwBCwsgBUIANwNgIAVCgICAgICAgPg/NwN4IAVCADcDcCAFQgA3A2ggChDUAhogCigCACEFQQAhAgNAIAJBA0cEQCACQQJ0IQ9BACEDA0AgA0EERwRAIBIgAkEFdGogA0EDdGogBSADIA9qQQN0aisDADkDACADQQFqIQMMAQsLIAJBAWohAgwBCwsgChA7IAEgBCsDCCITRAAAAAAAAOC/oiIUOQO4FCABIBQ5A7AUIAEgFDkDqBQgASATRAAAAAAAAOA/oiITOQOgFCABIBM5A5gUIAEgEzkDkBQgASATOQOIFCABIBQ5A4AUQQAhAgNAIAJBBEcEQCAEIAJBGGxqIgMgBCsDKCAMKwMAIAFBgBRqIAJBBHRqIgUrAwAiFKIgBCsDGCAFKwMIIhOioKA5A9ABIAMgBCsDSCAUIAQrAzCiIBMgBCsDOKKgoDkD2AEgAyAEKwNoIBQgBCsDUKIgEyAEKwNYoqCgOQPgASACQQFqIQIMAQsLIAlBAWohCSABKAL4ASECDAELCyAHEH9BiAEQMCICRQ0FIAIgDjYCACABKAL4ASEAIAJBADYCgAEgAiAANgIEIAJBADYCaAJAIAtBA3FBA0YEQCACQQI2AmwMAQsgC0EBcQRAIAJBADYCbAwBCyACQQE2AmwLIAJCgICAgICAgPA/NwN4IAJCgICAgICAgPA/NwNwDAQLIAEgCjYCtAEgASAANgKwAUEAQQNBj9UAIAFBsAFqEC8MAgsMAwsgASAANgJAIAEgCUEBajYCREEAQQNB1fkAIAFBQGsQLwsgBxB/IA4QKkEAIQILIAFBwBRqJAAgAgwBC0EAQQNBmDpBABAvQQEQAQALIgA2AuABIABFBEBBAEEDQaWKAkEAEC8gCCgC3AEQmARBAAwBCwJAAkACQAJAIAAoAmwOAgABAgsgDUEAEJQDGgwCCyANQQIQlAMaDAELIA1BAxCUAxoLQQELRQRAQQBBA0HK9QFBABAvDAELIAYgCEHIAmoiAhA1NgIAIAYgCCgC4AE2AgQCQCACKAIEIAIQKygCAEcEQCACIAYQ3gIMAQtBACEEIwBBIGsiByQAIAIQKyIIAn8gAiACEDVBAWoQ2QIhACACEDUhCSMAQRBrIgMkACADQQA2AgwgB0EIaiIBQQxqIANBDGogCBCrASAABEAgASgCEBogAEH/////AUsEQEHBigIQiwEACyAAQQN0EEshBAsgASAENgIAIAEgBCAJQQN0aiIINgIIIAEgCDYCBCABEDQgBCAAQQN0ajYCACADQRBqJAAgASgCCAsgBhCwAiABIAEoAghBCGo2AgggAiABENgCIAEQ1wIgB0EgaiQACyAGKAIAIRALIAZBEGokACAQC6JlAiR/An0jAEEQayIiJAAgIiAANgIMICJBnJIEICJBDGoQRTYCCCAiEEA2AgBBfyEAAkACQCAiQQhqICIQSA0AAn8gIkEMahBJIiMhCCAjKAL0ASIkISEgARA4IRYjAEHQAGsiFCQAIAgoAugBIRcgFEEANgJMIBQgFjYCQEEAQQFBiPEBIBRBQGsQLwJAAkACQAJ/IwBBEGsiBSQAIAVBmLsBLQAAOgAOIAVBlrsBLwAAOwEMAkACfwJAIBZBACAUQcgAahtFBEBBAEEDQdvpAEEAEC8MAQsCfyAFQQxqIQEjAEEQayIDJAACQCAWBEAgFhB9QZrxARB9akECahAwIgJFDQEgA0Ga8QE2AgQgAyAWNgIAIAJBghogAxCdAiACIAEQ+wEhFSACECoLIANBEGokACAVDAELQQBBA0GEEUEAEC8MCgsiA0UEQCAFIBY2AgAgBUGa8QE2AgggBUGk2wA2AgRBAEEDQZ/7ACAFEC8MAQsCQEEBQRAQpwMiBgRAIAZBBGpBBEEBIAMQWUEBRw0BIAYoAgQiG0EBSA0BIAYgG0GEAWwQMCIBNgIAIAFFDQRBACEVA0AgFSAbSARAIBVBhAFsIgEgBigCAGpBCEEBIAMQWUEBRw0DIAYoAgAgAWpBCGpBCEEBIAMQWUEBRw0DIAYoAgAgAWpBEGpB7ABBASADEFlBAUcNAyAGKAIAIAFqQfwAakEEQQEgAxBZQQFHDQMgBigCACABakGAAWpBBEEBIAMQWUEBRw0DIBVBAWohFSAGKAIEIRsMAQsLIAZBDGpBBEEBIAMQWUEBRw0BQQAhGyAGKAIMIhVBAEwEQCAGQQA2AggMAgsgBiAVQQxsEDAiATYCCCABRQ0EA0AgFSAbSgRAIBtBDGwiASAGKAIIakEIakEEQQEgAxBZQQFHDQMgBigCCCABakEEakEEQQEgAxBZQQFHDQMgBigCCCABaiIBIAEoAgQiAkEMbBAwIgE2AgAgAUUNBiABQQwgAiADEFkgAkcNAyAbQQFqIRsgBigCDCEVDAELCyAUIAY2AkggAxB/QQAMAwsMAwtBAEEDQf/+AEEAEC8gBigCCBAqIAYoAgAQKiAGECogAxB/C0F/CyEBIAVBEGokACABDAELDAMLQX9MBEAgFCAWNgIAQQBBA0Gg8QEgFBAvDAELIBQgITYCMEEAQQFBxvEBIBRBMGoQLwJ/AkAgFCgCSCIGBEAgBigCBCIBQQAgAUEAShshBUEAIQEDQCABIAVGBEBBACEVIAYoAgwiAUEAIAFBAEobIQVBACEBA0AgASAFRg0EIAYoAgggAUEMbGoiAygCCCICQX9HQQAgAkEASBtFBEAgAyAhNgIICyABQQFqIQEMAAsABSAGKAIAIAFBhAFsaiIDKAJ8IgJBf0dBACACQQBIG0UEQCADICE2AnwLIAFBAWohAQwBCwALAAtBAEEDQfWCAUEAEC9BfyEVCyAVQX9MCwRAQQBBA0Hf8QFBABAvDAELAn9BACEBIBRBzABqQQAgFEHIAGoiCxtFBEBBAEEDQezBAEEAEC9BfwwBCwJAIBQoAkwiD0UEQCAUQRAQMCIPNgJMIA9FDQEgD0IANwMAIA9CADcDCAsCQCALKAIAIgRFDQAgBCgCBCIGIA8oAgQiDWoiBUGEAWwQMCIRBEAgDUEAIA1BAEobIQMDQCABIANGBEBBACEBIAZBACAGQQBKGyECA0AgASACRwRAIBEgASANakGEAWxqIAQoAgAgAUGEAWxqQYQBEDcaIAFBAWohAQwBCwsgDygCABAqIBQoAkwgETYCACAUKAJMIgYgBTYCBEEAIQ8gBigCDCIOQQAgDkEAShshByALKAIAIgMoAgwiBUEAIAVBAEobIQxBACEbA0BBACEBIAwgG0cEQAJAA0AgASAHRg0BIAFBDGwhAiABQQFqIQEgAygCCCAbQQxsaigCCCACIAYoAghqKAIIRw0ACyAPQQFqIQ8LIBtBAWohGwwBCwsgBSAOaiAPayIEQQxsEDAiCgRAA0AgByAYRgRAQQAhFUEAIQ8CQANAIAwgFUcEQCAVQQxsIgYgCygCACgCCGoiAygCCCEFQQAhAQJAAkADQCABIAdGDQEgAUEMbCECIAFBAWohASAFIAIgFCgCTCgCCGooAghHDQALIA9BAWohDwwBCyAKIA4gFWogD2tBDGxqIg0gBTYCCCANIAMoAgQiEUEMbBAwIgE2AgAgAUUNA0EAIQEgEUEAIBFBAEobIQUDQCABIAVHBEAgAUEMbCICIA0oAgBqIgMgCygCACgCCCAGaigCACACaiICKQIANwIAIAMgAigCCDYCCCABQQFqIQEMAQsLIA0gETYCBAsgFUEBaiEVDAELCyAUKAJMIg8oAggEf0EAIQEDQCAPKAIMIAFKBEAgDygCCCABQQxsaigCABAqIAFBAWohASAUKAJMIQ8MAQsLIA8oAggQKiAUKAJMBSAPCyAKNgIIIBQoAkwgBDYCDCALEP0EDAcLDAcLIAogGEEMbCIRaiINIBQoAkwoAgggEWoiAygCCDYCCEEAIQEgAygCBCIGIRUDQCABIAxHBEAgCygCACgCCCABQQxsaiICKAIIIAMoAghGBEAgAigCBCAVaiEVCyABQQFqIQEMAQsLIA0gFUEMbBAwIgE2AgAgAQRAQQAhDyAGQQAgBkEAShshBUEAIQEDQCABIAVHBEAgAUEMbCICIA0oAgBqIgMgFCgCTCgCCCARaigCACACaiICKQIANwIAIAMgAigCCDYCCCABQQFqIQEMAQsLAkADQCAMIA9GDQEgCygCACgCCCIbIA9BDGwiBWooAgggFCgCTCgCCCARaigCCEcEQCAPQQFqIQ8MAQsLQQAhAQNAIAEgBSAbaiICKAIETg0BIA0oAgAgASAGakEMbGoiAyACKAIAIAFBDGxqIgIpAgA3AgAgAyACKAIINgIIIAFBAWohASALKAIAKAIIIRsMAAsACyANIBU2AgQgGEEBaiEYDAELCwwFCwwEBSARIAFBhAFsIgJqIA8oAgAgAmpBhAEQNxogAUEBaiEBDAELAAsACwwBC0EADAELDAMLQX9MBEBBAEEDQYPyAUEAEC8MAQtBAEEBQZ7yAUEAEC8gFCAWNgIgQQBBAUGn8gEgFEEgahAvIAggIUECdGoCf0EAIQIjAEHQB2siCSQAAkACQAJAAkACfwJAQbjyAS0AAARAQbjyAUG1DxD9AQ0BCyAJQdAFaiAWQf8BEIMDGiAJQQA6AM8HQQEMAQsgCSAWNgKwASAJQbjyATYCtAEgCUHAAWpBpBkgCUGwAWoQnQIgCUHAAWpB0iUQ+wEiEkUEQCAJIBY2AqABQQBBA0GJKyAJQaABahAvIAlBuJUEKAIAEKECNgKUASAJQfY1NgKQAUEAQQNBwS4gCUGQAWoQLwwCC0EACyELAkACQEH0CBAwIh0EQEEBIRUCQCALDQAgCUHAAWogEhDIAkUNAiAJIAlBzAVqNgKAASAJQcABakHpwQAgCUGAAWoQoQFBAUcNAiAJKALMBSIVQQBKDQAMAgsgHUEANgKYASAdIBU2AgQgHSAVQfAAbBAwIhM2AgAgEwRAAkADQCAJIAI2AswFIAIgFU4NASAJIAJBAWo2AnBBAEEBQb3IACAJQfAAahAvIAtFBEAgCUHAAWogEhDIAkUNAiAJIAlB0AVqNgJgIAlBwAFqQYDQACAJQeAAahChAUEBRw0CIAlB0AVqIQVBACEBQX8hAgNAAkACQCABIAVqLQAAIgNBLkcEQCADDQEgAkF/RwRAIAIgBWpBADoAAAsMAgsgASECCyABQQFqIQEMAQsLC0EAQQFBqNYAQQAQLwJ/IwBB4ABrIhwkACAcQZS7AS8AADsBWCAcQZC7ASgAADYCVAJAAn8CQCAJQdAFaiIKEH0gHEHUAGoQfWpBAWoQMCIBBEAgHCAKNgJAIBwgHEHUAGo2AkQgAUGRGSAcQUBrEJ0CIAFB9yQQ+wEhECABECogEEUEQCAcIAo2AgAgHCAcQdQAajYCBEEAQQNBlCogHBAvQQAMAwtBCBAwIh5FDQMCQAJAIB5BBGpBBEEBIBAQWUEBRgRAIB4oAgQiG0EASg0BC0EAQQNBgy5BABAvDAELIBwgGzYCMEEAQQFBgzUgHEEwahAvIB4gG0ECdBAwIhk2AgAgGUUNBCAZQRAQMCIBNgIAIAFFDQQCf0EUEDAiDgRAIA4CfyAOQQhqIREgDkEMaiEIIA5BBGohBiAOQRBqIQcjAEGgBmsiDCQAQSgQMCIaQQA2AgAgDEG4AmpBAEHoAxAyGkH0ngRBADYCACAMQRhqEKoFIQNB9J4EKAIAIQJB9J4EQQA2AgBBfyEBQQQhGAJAAkAgAkUNAEH4ngQoAgAiBEUNACACKAIAIBpBBBCyASIBRQ0BIAQQAgsQAyECIAFBAUcEQCAMQQM2AhggDCADNgK4AiAMQZwBakEBIBpBBBDuBCEaEAMhGEEAIQILAkADQAJAAkACQAJAAkACQCACBEBB9J4EQQA2AgBBBCAMQbgCahALQfSeBCgCACECQfSeBEEANgIAQX8hASACRQ0CQfieBCgCACIERQ0CIAIoAgAgGiAYELIBIgENAQwJC0H0ngRBADYCAEEFIAxBuAJqQdoAQegDEBlB9J4EKAIAIQJB9J4EQQA2AgBBfyEBIAJFDQNB+J4EKAIAIgRFDQMgAigCACAaIBgQsgEiAQ0CDAgLIAQQAgsQAyECIAFBAUcNAgwECyAEEAILEAMhAiABQQFGDQJB9J4EQQA2AgBBBiAMQbgCaiAQEBhB9J4EKAIAIQJB9J4EQQA2AgBBfyEBAkAgAkUNAEH4ngQoAgAiBEUNACACKAIAIBogGBCyASIBRQ0FIAQQAgsQAyECIAFBAUYNAkH0ngRBADYCAEEHIAxBuAJqQQEQFyEDQfSeBCgCACECQfSeBEEANgIAQX8hAQJAIAJFDQBB+J4EKAIAIgRFDQAgAigCACAaIBgQsgEiAUUNBSAEEAILEAMhAiABQQFGDQICQAJAAkACQAJAIANBAUcEQEH0ngRBADYCAEEIQQBBA0GnwQBBABAMQfSeBCgCACECQfSeBEEANgIAQX8hASACRQ0CQfieBCgCACIERQ0CIAIoAgAgGiAYELIBIgENAQwKC0H0ngRBADYCAEEJIAxBuAJqEBYaQfSeBCgCACECQfSeBEEANgIAQX8hASACRQ0DQfieBCgCACIERQ0DIAIoAgAgGiAYELIBIgENAgwJCyAEEAILEAMhAiABQQFHDQIMBQsgBBACCxADIQIgAUEBRg0DIAwoAtQCIAwoAtwCbCIFIAwoAtgCbBAwIgQEQEEAIQECQANAAkBBACECIAwoAsQDIAwoAqwDTwRAQfSeBEEANgIAQQogDEG4AmoQFhpB9J4EKAIAIQNB9J4EQQA2AgBBfyEBIANFDQNB+J4EKAIAIgJFDQMgAygCACAaIBgQsgEiAQ0BIAMgAhAJAAsDQCACQQVHBEAgDCACQQJ0aiAEIAEgAmogBWxqNgIAIAJBAWohAgwBCwtB9J4EQQA2AgBBCyAMQbgCaiAMQQUQKCEDQfSeBCgCACENQfSeBEEANgIAQX8hIAJAIA1FDQBB+J4EKAIAIgJFDQAgDSgCACAaIBgQsgEiIEUEQCANIAIQCQALIAIQAgsQAyECICBBAUYNByABIANqIQEMAQsLIAIQAgsQAyECIAFBAUYNBEH0ngRBADYCAEEEIAxBuAJqEAtB9J4EKAIAIQNB9J4EQQA2AgBBfyEBAkAgA0UNAEH4ngQoAgAiAkUNACADKAIAIBogGBCyASIBRQRAIAMgAhAJAAsgAhACCxADIQIgAUEBRg0EIBEEQCARIAwoAtQCNgIACyAIBEAgCCAMKALYAjYCAAsgBgRAIAYgDCgC3AI2AgALIAdFDQUCQAJAAkACQCAMLQDaBCIBQQFrDgIAAQILIAwvAdwEIgEgDC8B3gRHDQIgByABszgCAAwICyAMLwHcBCIBIAwvAd4ERw0BIAcgAbNDXI8iQJQ4AgAMBwsgAUEDSQ0AIAwvAdwEDQAgDC8B3gQNACAHIAGzOAIADAYLIAdBADYCAAwFC0H0ngRBADYCAEEIQQBBA0GSD0EAEAxB9J4EKAIAIQJB9J4EQQA2AgBBfyEBAkAgAkUNAEH4ngQoAgAiBEUNACACKAIAIBogGBCyASIBRQ0GIAQQAgsQAyECIAFBAUYNA0H0ngRBADYCAEEEIAxBuAJqEAsMAgtB9J4EQQA2AgBBBCAMQbgCahALDAELQfSeBEEANgIAQQhBAEEDQZs7QQAQDAtB9J4EKAIAIQJB9J4EQQA2AgBBfyEBAkAgAkUNAEH4ngQoAgAiBEUNACACKAIAIBogGBCyASIBRQ0DIAQQAgsQAyECIAFBAUYNAAtBACEECyAaECogDEGgBmokACAEDAELIAIgBBAJAAsiATYCACABBH8gDgUgDhAqQQALDAELQQBBA0GSD0EAEC8MEAsiAkUNAiACKAIEQQFHBEAgHCAKNgIgIBwgHEHUAGo2AiRBAEECQeE6IBxBIGoQLyAZKAIAECogGRAqIB4QKiACECogEBB/QQAMBAsgGSgCACIBIAIoAgg2AgQgASACKAIMNgIIIAEgAioCEDgCDCABIAIoAgA2AgAgAhAqIBBBBCAbQQJ0a0ECEIEDQQEhDwJAA0AgDyAbRwRAIBxB3ABqQQRBASAQEFlBAUcEQEEAIQEDQCABIA9GDQQgGSABQQJ0aiICKAIAKAIAECogAigCABAqIAFBAWohAQwACwALIBkgD0ECdGoCfyAcKgJcIScgGSgCACIfKAIEIQIgHyoCDCEmIB8oAgghAUEQEDAhGCABsiAnlCAmlRCfAiEDIAKyICeUICaVEJ8CIQIgGARAAkAgGCAnOAIMIBggAzYCCCAYIAI2AgQgGCACIANsEDAiGjYCACAaRQ0AQQAhASADQQAgA0EAShshCiACQQAgAkEAShshDQNAIAEgCkcEQCAfKAIIIQUgHyoCDCImIAFBAWoiA7KUICeVEJ8CIQIgJiABspQgJ5UQnwIiBiAFIAIgAiAFShsiASABIAZIGyERQQAhAQNAIAEgDUYEQCADIQEMAwUgHygCBCEMIB8qAgwiJiABQQFqIgKylCAnlRCfAiEFICYgAbKUICeVEJ8CIg4gDCAFIAUgDEobIgEgASAOSBsgDmshCEEAIQEgBiEEQQAhIANAIAQgEUcEQCABIAhqIQUgHygCACAEIAxsIA5qaiEHA0AgASAFRwRAIAFBAWohASAgIActAABqISAgB0EBaiEHDAELCyAEQQFqIQQgBSEBDAELCyAaICAgAW06AAAgGkEBaiEaIAIhAQwBCwALAAsLIBgMAgsLDAgLIgE2AgAgAQRAIA9BAWohDwwCBUEAIQEDQCABIA9GDQQgGSABQQJ0aiICKAIAKAIAECogAigCABAqIAFBAWohAQwACwALAAsLIBAQfyAeDAQLIBkQKgsgHhAqIBAQf0EADAILDAILIBwgCjYCECAcIBxB1ABqNgIUQQBBAkHhOiAcQRBqEC8gGSgCABAqIBkQKiAeECogEBCFBQJ/QQAhAQJAAkACQEEIEDAiBARAAkAgBEEEakEEQQEgEBBZQQFGBEAgBCgCBCIFQQBKDQELQQBBA0GDLkEAEC8MAgsgBCAFQQJ0EDAiBjYCACAGBEADQCABIAVGBEBBACEBAkADQCABIAVGDQcgBiABQQJ0aiIDKAIAQQRqQQRBASAQEFlBAUcEQEEAIQIDQCABIAJGBEBBACEBA0AgASAFRg0FIAYgAUECdGooAgAQKiABQQFqIQEMAAsABSAGIAJBAnRqKAIAKAIAECogAkEBaiECDAELAAsACyADKAIAQQhqQQRBASAQEFlBAUcEQEEAIQIDQCABIAJGBEBBACEBA0AgASAFRg0FIAYgAUECdGooAgAQKiABQQFqIQEMAAsABSAGIAJBAnRqKAIAKAIAECogAkEBaiECDAELAAsACyADKAIAQQxqQQRBASAQEFlBAUcEQEEAIQIDQCABIAJGBEBBACEBA0AgASAFRg0FIAYgAUECdGooAgAQKiABQQFqIQEMAAsABSAGIAJBAnRqKAIAKAIAECogAkEBaiECDAELAAsACyADKAIAIgIgAigCCCACKAIEbBAwIgI2AgAgAkUNCCABQQFqIQEgAygCACICKAIAQQEgAigCCCACKAIEbCAQEFkgAygCACICKAIIIAIoAgRsRg0AC0EAIQIDQCABIAJGBEBBACEBA0AgASAFRg0DIAYgAUECdGooAgAQKiABQQFqIQEMAAsABSAGIAJBAnRqKAIAKAIAECogAkEBaiECDAELAAsACyAGECoMBAsgBiABQQJ0akEQEDAiAjYCACABQQFqIQEgAg0ACwwECwwDCwwCCyAEECpBACEECyAQEH8gBAwBCwwCCwshASAcQeAAaiQAIAEMAQtBAEEDQYEPQQAQLwwKCyEBIBMgCSgCzAVB8ABsaiABNgIAIAFFBEAgCSAJQdAFajYCAEEAQQNBhdsAIAkQLyATECogHRAqIBJFDQYgEhB/DAYLQQBBAUHx4QBBABAvQQBBAUHt5QBBABAvAn9BACEaQQAhBCMAQaAEayIGJAAgBiAJQdAFaiIBNgIQIAZBtQ82AhQgBkEgakGvDyAGQRBqEJ0CAkACQCAGQSBqQaEZEPsBIhFFBEAgBiABNgIAQQBBA0G9JSAGEC8MAQtBCBAwIhpFDQECQAJAIBpBBGpBBEEBIBEQWUEBRwRAQQBBA0GzLkEAEC8MAQsgGiAaKAIEIgFBFGwQMCIFNgIAIAVFDQMgAUEAIAFBAEobIQIDQCACIARGDQICQCAFIARBFGxqIghBCGpBBEEBIBEQWUEBRw0AIAhBDGpBBEEBIBEQWUEBRw0AIAhBEGpBBEEBIBEQWUEBRw0AIAhBBGpBBEEBIBEQWUEBRw0AIAggCCgCBCIDQRRsEDAiATYCAEEAIQ0gAUUNBQNAIAMgDUoEQCANQRRsIgEgCCgCAGpBBEEBIBEQWUEBRw0CIAgoAgAgAWpBBGpBBEEBIBEQWUEBRw0CIAgoAgAgAWpBCGpBBEEBIBEQWUEBRw0CIAgoAgAgAWpBDGpBBEEBIBEQWUEBRw0CIAgoAgAgAWpBEGpBBEEBIBEQWUEBRw0CIA1BAWohDSAIKAIEIQMMAQsLIARBAWohBAwBCwtBACECQQBBA0GzLkEAEC8DQCACIARHBEAgBSACQRRsaigCABAqIAJBAWohAgwBCwsgBRAqCyAaECpBACEaCyAREH8LIAZBoARqJAAgGgwBC0EAQQNB+CpBABAvDAoLIQEgEyAJKALMBUHwAGxqIAE2AgQgAUUEQCAJIAlB0AVqNgIQQQBBA0G86QAgCUEQahAvQQAhAgJAIBMgCSgCzAVB8ABsaiIDRQ0AIAMoAgAiDUUNAANAIA0oAgQgAkoEQCACQQJ0IgEgDSgCAGooAgAoAgAQKiADKAIAKAIAIAFqKAIAECogAkEBaiECIAMoAgAhDQwBCwsgDSgCABAqIAMoAgAQKiADQQA2AgALIBMQKiAdECogEkUNBiASEH8MBgtBAEEBQfHhAEEAEC8gEyAJKALMBUHwAGxqQQA2AggCQAJAIAsEQEEAIQEgCSgCzAUhDQNAQQAhAiABQQNGDQIDQCACQQRHBEAgEyANQfAAbGogAUEEdGogAkECdGpDAACAP0MAAAAAIAEgAkYbOAIMIAJBAWohAgwBCwsgAUEBaiEBDAALAAsgCUHAAWogEhDIAkUNAyAJIBMgCSgCzAVB8ABsaiIBQQxqNgJAIAkgAUEQajYCRCAJIAFBFGo2AkggCSABQRhqNgJMIAlBwAFqQaOGASAJQUBrEKEBQQRHDQkgCUHAAWogEhDIAkUNAyAJIBMgCSgCzAVB8ABsaiIBQRxqNgIwIAkgAUEgajYCNCAJIAFBJGo2AjggCSABQShqNgI8IAlBwAFqQaOGASAJQTBqEKEBQQRHDQkgCUHAAWogEhDIAkUNAyAJIBMgCSgCzAVB8ABsaiIBQSxqNgIgIAkgAUEwajYCJCAJIAFBNGo2AiggCSABQThqNgIsIAlBwAFqQaOGASAJQSBqEKEBQQRHDQEgCSgCzAUhDQsgEyANQfAAbGoiAUEMaiEFIAFBPGohBkEAIQFBBEEEEKoBIgQoAgAhCANAIAFBA0cEQCABQQJ0IQNBACECA0AgAkEERwRAIAggAiADakEDdGogBSABQQR0aiACQQJ0aioCALs5AwAgAkEBaiECDAELCyABQQFqIQEMAQsLIAhCADcDYCAIQoCAgICAgID4PzcDeCAIQgA3A3AgCEIANwNoIAQQ1AIaIAQoAgAhBUEAIQEDQCABQQNHBEAgAUECdCEDQQAhAgNAIAJBBEcEQCAGIAFBBHRqIAJBAnRqIAUgAiADakEDdGorAwC2OAIAIAJBAWohAgwBCwsgAUEBaiEBDAELCyAEEDsgCUHQBWohBkEAIQFBACECAkACQANAAkACQCABIAZqIgUtAAAiA0EuRwRAIAMNAUHWjAEQfSEDIAINAiABIANqQQJqQYACSg0FIAVBLjoAACABIQIMBAsgASECCyABQQFqIQEMAQsLIAIgA2pBAmpBgAJKDQELIAIgBmpBADoAAUHWjAEhAQJAAkAgBhB9IAZqIg1B1owBc0EDcQ0AA0AgDSABLQAAIgI6AAAgAkUNAiANQQFqIQ0gAUEBaiIBQQNxDQALIAEoAgAiAkF/cyACQYGChAhrcUGAgYKEeHENAANAIA0gAjYCACABKAIEIQIgDUEEaiENIAFBBGohASACQYGChAhrIAJBf3NxQYCBgoR4cUUNAAsLIA0gAS0AACICOgAAIAJFDQADQCANIAEtAAEiAjoAASANQQFqIQ0gAUEBaiEBIAINAAsLC0GAAhAwIQIgEyAJKALMBSIBQfAAbGogAjYCbCACRQ0JIAIgCUHQBWpBgAIQgwMaIAFBAWohAgwBCwsMBgsgEgRAIBIQfwsgFSAJKALMBUwNBEEAEAEACwwFCwwECyASEH8gHRAqC0EAIR0LIAlB0AdqJAAgHQwDC0EAQQNB2YkBQQAQLyASEH9BABABAAtBAEEDQZE8QQAQLwsMBgsiATYC+AEgAUUEQCAUIBY2AhBBAEEDQb3yASAUQRBqEC8LQQBBAUGe8gFBABAvICFBCkYNAQJ/IBQoAkwhBkEAIQRBACELQQAhGEEAIQxBACENIwBB0ABrIiAkAAJAAkACQEEAQQMgF0UgBkVyBH9BgckABSAGKAIEDQFBs9AAC0EAEC9BfyENDAELIBcoAhwQKgJAIAYoAgQiEARAIBcgEEGEAWwQMCIBNgIcIAFFDQMDQCALIBBODQIgC0GEAWwiASAXKAIcaiAGKAIAIAFqQYQBEDcaIAtBAWohCyAGKAIEIRAMAAsAC0EAIRAgF0EANgIcCyAXIBA2AiAgFygCJARAQQAhCwNAIBcoAiggC0oEQCAXKAIkIAtBDGxqKAIAECogC0EBaiELDAELCyAXKAIkECoLAkAgBigCDCILBEAgFyALQQxsEDAiATYCJCABRQ0DA0AgBCALTg0CIARBDGwiBSAXKAIkaiIBIAYoAggiECAFaiIDKAIINgIIIAEgAygCBDYCBAJAAkAgAygCBCICBEAgASACQQxsEDAiATYCAEEAIQsgAUUNBwNAIAIgC0wNAiALQQxsIgEgFygCJCAFaigCAGoiAiAFIBBqKAIAIAFqIgEpAgA3AgAgAiABKAIINgIIIAtBAWohCyAGKAIIIhAgBWooAgQhAgwACwALIANBADYCAAwBCyAGKAIMIQsLIARBAWohBAwACwALQQAhCyAXQQA2AiQLIBcgCzYCKCAXKAI0IgEEQCABECogF0IANwI0CwJAAkAgBigCDCICQQFIDQAgFyACNgI4IBcgAkHEAGwQMCIBNgI0IAFFDQFBACELA0AgAiALRg0BIAEgC0HEAGxqQQA2AkAgC0EBaiELDAALAAsgFygCICIBRQ0BIAFBACABQQBKGyEGA0BBACEhIAwgFygCKE4NAgNAIAxBDGwiESAXKAIkaigCBCAhTARAIAxBAWohDAwCCyAgQUBrEE8hGSAgQTBqEE8hEkEAIRAgIEEgahBPIR0DQCAGIBBGBEAgICAZEHc2AgBBAEEBQabbACAgEC8gFyAYQQJ0aiAXKAIkIBFqIgEoAgg2AjwgFygCACERIAEoAgAgIUEMbGoiASgCACECIAEoAgQhASMAQSBrIhskACAbIBg2AhwgG0EQakGUARBLEJEGEJAGIh4oAgAgAhCVASAeKAIAIAEQlAEgHigCABArQeAAEJUBIB4oAgAQKxBVIBkQdxCPBiAZIB4oAgAQKxBVIgdHBEAgGSgCACEIIBkoAgQhAiMAQRBrIgokAAJAIAcQ2AEgAiAIa0EUbSIETwRAIAogAjYCDCAHEHcgBE8iAwR/IAIFIAogCDYCDCAHEHchASAKIAooAgwgAUEUbGo2AgwgCigCDAshASAHKAIAIQUgASAIayIBBEAgBSAIIAEQ4wILIANFBEAgByAKKAIMIAIgBCAHEHdrEP8FDAILIAcgBSABQRRtQRRsahCMBgwBCyAHKAIABEAgBxB3IQEgBxDxBCAHIAEQhgYgBxArGiAHKAIAIQEgBxDYARogARAqIAcQK0EANgIAIAdCADcCAAsgByAHIAQQlgQQ/gUgByAIIAIgBBD/BQsgCkEQaiQACyAeKAIAECsQQiEIIB0QhgEhAgJAIAIgCBCGASIBSwRAIwBBIGsiBSQAAkAgAiABayIEIAgQKygCACAIKAIEa00EQCMAQRBrIgEkACABIAggBBCkAyICKAIEIRADQCACKAIIIBBHBEAgCBArGiACKAIEEOwFIAIgAigCBEEBaiIQNgIEDAELCyACEHYgAUEQaiQADAELIAgQKyEBIAVBCGogCCAIEIYBIARqEKIDIAgQhgEgARCSBCIDIQIjAEEQayIBJAAgASACQQhqIAQQ7QUiBCgCACEPA0AgBCgCBCAPRwRAIAIoAhAaIAQoAgAQ7AUgBCAEKAIAQQFqIg82AgAMAQsLIAQQtQEgAUEQaiQAIAggAxCRBCADEJAECyAFQSBqJAAMAQsgASACSwRAIAggCCgCACACahDzAwsLIB0gHigCABArEEIiCkcEQCAdKAIAIQUgHSgCBCEEIwBBEGsiCCQAAkAgBSAEEJkEIgMgChDXAU0EQCAIIAQ2AgwgBSAKEIYBIANPIgIEfyAEBSAIIAU2AgwgCCAKEIYBIAgoAgxqNgIMIAgoAgwLIAooAgAQggYhASACRQRAIAogCCgCDCAEIAMgChCGAWsQhAYMAgsgCiABEPMDDAELIAooAgAEQCAKEIYBIQEgChDfBCAKIAEQgAYgChArGiAKKAIAIQEgChDXARogARAqIAoQK0EANgIAIApCADcCAAsgCiADEKIDIQIgChDGBiACSQRAEIcBAAsgChArGiAKIAIQSyIBNgIAIAogATYCBCAKECsgASACajYCACAKQQAQxQYgCiAFIAQgAxCEBgsgCEEQaiQACyAeKAIAIgFBJGoiCkEMakGAARDzBSAKQQxqEPQFIApBCDYCaCAKQRA2AmwgAUEIaiIBEEJBABCYBSEFIAEQeiEIQQAhBCMAQRBrIgckACAHEJ4CIAgEQCAHEP0DIAhJBEAQhwEACyAHECsaIAcgCBDrAyIBNgIAIAcgATYCBCAHECsgASAIQQJ0ajYCACAHQQAQmgMgByAIEJwDCwNAIAcQPCAETQRAIAdBABAzIQMgBxA8IQIgCkEIagJ/QYABEEshBCAKEOsFIQEgBEEBOgBkIAQgATYCACAEQegAahBPGiAEQfQAahBPGiAEQQRqQeAAEOkFIAQLEO8FIAooAghBABCQAyAKIAooAgggBSAIIAMgAhDqBSAHEHkgB0EQaiQABSAHIAQQMyAENgIAIARBAWohBAwBCwsgESgCACgCACEBIBtBCGogHhD1AyIFIQMjAEEgayIfJAAgHyAYNgIcIB8gAUHIAGoiFiAfQRxqEEU2AhggHxBANgIIIB9BGGogH0EIahBzBEBBEBAIIgAgH0EIakGdHxCSARDVAiAAQYTnAUEOEAcACwJ/IwBBIGsiCyQAIAsgH0EcaiIBENMCNgIQIAtBGGohAkEAIQ8jAEEgayITJAAgFhA0GiABKAIAIQ4gFhCBASEQIBNBADoAHwJAAkAgEEUNACAWIA4gEBBUIg8QMygCACIIRQ0AA0AgCCgCACIIRQ0BIA4gCCgCBEcEQCAIKAIEIBAQVCAPRw0CCyAWEFUgCEEIaiABEMgBRQ0ACwwBCyMAQRBrIggkACAWECshASATQRBqQRQQSyAIQQhqIAFBABCqAhCpAiIHKAIAQQhqIQQgCygCECEBIwBBEGsiCiQAIAogATYCCCAEIAooAggoAgA2AgAgBEEEahCuAhogCkEQaiQAIAcQQkEBOgAEIAcoAgAgDjYCBCAHKAIAQQA2AgAgCEEQaiQAAkAgFgJ/IBYQNCgCAEEBarMgFhBVKgIAIBCzlF5BASAQGwRAIBMgEBDcAUEBcyAQQQF0cjYCDCATAn8gFhA0KAIAQQFqsyAWEFUqAgCVjSImQwAAgE9dICZDAAAAAGBxBEAgJqkMAQtBAAs2AgggFiATQQxqIBNBCGoQdSgCABDtAyAOIBYQgQEiEBBUIQ8LIA8LEDMoAgAiAUUEQCATKAIQIBZBCGoiASgCADYCACAWIBMoAhA2AgggFiAPEDMgATYCACATKAIQKAIARQ0BIBMoAhAhASAWIBMoAhAoAgAoAgQgEBBUEDMgATYCAAwBCyATKAIQIAEoAgA2AgAgASATKAIQNgIACyATQRBqELQBIQggFhA0IgEgASgCAEEBajYCACATQQE6AB8gE0EQaiIBKAIAIQQgAUEANgIAIAQEQCABEEIiAS0ABARAIAEoAgAaIARBCGoQiQYLIAQEQCABKAIAGiAEECoLCwsgAiATQRBqIAgQdCATQR9qEKsCIBNBIGokACALQRhqEGYhASALQSBqJAAgAUEEagsgAxCLBiAfQSBqJAAgBRDJASASIBEoAgBBBGogG0EcahCOBiIHRwRAIBIoAgAhESASKAIEIQIjAEEQayIKJAACQCARIAIQ4gMiCCAHEMMBTQRAIAogAjYCDCAHEGUgCE8iAwR/IAIFIAogETYCDCAHEGUhASAKIAooAgwgAUEMbGo2AgwgCigCDAshASAHKAIAIQQgASARayIFBEAgBCARIAUQ4wILIANFBEAgByAKKAIMIAIgCCAHEGVrEN8FDAILIAcQZSEBIAcgBCAFQQxtQQxsahDSBiAHIAEQmAMMAQsgBygCAARAIAcQZSEBIAcQ0wYgByABEJgDIAcQKxogBygCACEBIAcQwwEaIAEQKiAHECtBADYCACAHQgA3AgALIAcgCBClAyEDIAcQyAYgA0kEQBCHAQALIAcgBxArIAMQxwYiATYCACAHIAE2AgQgBxArIAEgA0EMbGo2AgAgB0EAEJQEIAcgESACIAgQ3wULIApBEGokAAsgHhDJASAbQSBqJAAgHRCQBSASEMoEIBkQzwMgIUEBaiEhIBhBAWohGAwCCwJAIBBBhAFsIgggFygCHGoiAigCgAEgFygCJCARaiIBKAIAICFBDGxqKAIIRw0AIAIoAnwgASgCCEcNAEEAIQsgIEEIaiACKgIAIAIqAgQgAioCcCACKgJ0IAIoAnhBAEcQwQQhAwJAIBkoAgQgGRArKAIASQRAIwBBEGsiASQAIAEgGUEBEJcEIQIgGRArIAIoAgQgAxCmAyACIAIoAgRBFGo2AgQgAhB2IAFBEGokAAwBCyMAQSBrIgIkACAZECsiASACQQhqIBkgGRB3QQFqEJYEIBkQdyABENEGIgEoAgggAxCmAyABIAEoAghBFGo2AgggGSABENAGIAEQzwYgAkEgaiQACyAXKAIcIAhqIgEqAgghJyABKgIMISYgIEEIaiIHQwAAAAA4AgggByAmOAIEIAcgJzgCAAJAIBIoAgQgEhArKAIASQRAIwBBEGsiASQAIAEgEkEBEJUEIQIgEhArIAIoAgQgBxDKBiACIAIoAgRBDGo2AgQgAhB2IAFBEGokAAwBC0EAIQojAEEgayIEJAAgEhArIgICfyASIBIQZUEBahClAyEFIBIQZSEBIwBBEGsiAyQAIANBADYCDCAEQQhqIg5BDGogA0EMaiACEKsBIAUEQCAOKAIQIAUQxwYhCgsgDiAKNgIAIA4gCiABQQxsaiIBNgIIIA4gATYCBCAOEDQgCiAFQQxsajYCACADQRBqJAAgDigCCAsgBxDKBiAOIA4oAghBDGo2AgggEhC/AiASECsaIA5BBGoiAyIBIAEoAgAgEigCBCASKAIAIgJrIgVBdG1BDGxqIgE2AgAgBUEBTgRAIAEgAiAFEDcaCyASIAMQRyASQQRqIA5BCGoQRyASECsgDhA0EEcgDiAOKAIENgIAIBIgEhBlEJQEIA4oAgQhAQNAIAEgDigCCEcEQCAOKAIQGiAOIA4oAghBDGs2AggMAQsLIA4oAgAEQCAOKAIQGiAOKAIAIQEgDhCTBBogARAqCyAEQSBqJAALA0AgC0HgAEYNASAXKAIcIAhqIAtqQRBqIQMCQCAdKAIEIB0QKygCAEcEQCMAQRBrIgEkACABIB1BARCkAyECIB0QKyACKAIEIAMQowMgAiACKAIEQQFqNgIEIAIQdiABQRBqJAAMAQsjAEEgayICJAAgHRArIgEgAkEIaiAdIB0QhgFBAWoQogMgHRCGASABEJIEIgEoAgggAxCjAyABIAEoAghBAWo2AgggHSABEJEEIAEQkAQgAkEgaiQACyALQQFqIQsMAAsACyAQQQFqIRAMAAsACwALAAsMAQsgIEHQAGokACANDAELQQBBA0H81gBBABAvDAYLQX9MBEBBAEEDQd7yAUEAEC8MAQsgFEHMAGoQ/QRBASElQQBBAUH38gFBABAvCyAUQdAAaiQAICUMAgtBfxABAAtBAEEDQeMlQQAQLwwCC0UEQEEAQQNBnfUBQQAQLwwBCyAjICMoAvQBQQFqNgL0ASAkIQALICJBEGokACAADwtBARABAAvDAQEFfyMAQRBrIgIkACACIAA2AgwgAkGckgQgAkEMahBFNgIIIAIQQDYCAEF/IQACQCACQQhqIAIQSA0AIAJBDGoQSSEDAn8gARA4IQUjAEEQayIBJAAgAyADKALcASAFEMQGIgY2AtQCQQEhBCAGQX9MBEAgASAFNgIAQQBBA0H3iQIgARAvIAMoAtwBEJgEQQAhBAsgAUEQaiQAIARFCwRAQQBBA0Hx9AFBABAvDAELIAMoAtQCIQALIAJBEGokACAAC4YGAgl/AXwjAEHAAWsiBCQAQX8hCQJAAn8gABA4IQMjAEGgAmsiASQAQX8hBQJAIARBCGoiBkUgA0VyDQAgA0GMLRD7ASICRQRAQbiVBCgCACECIAEgAzYCFCABIAI2AhBBAEEDQb8yIAFBEGoQLyABQbiVBCgCABChAjYCBCABQe8oNgIAQQBBA0GCJCABEC8MAQtBACEFIAJBAEECEIEDAn8CQAJ/IAIoAkxBf0wEQCACKAIADAELIAIoAgALQQV2QQFxBEAgAUG4lQQoAgA2AlBBAEEDQcA5IAFB0ABqEC8gAUG4lQQoAgAQoQI2AkQgAUHvKDYCQEEAQQNBgiQgAUFAaxAvDAELIAIQhwUhByACEIUFAkADQCAFIgNBBEYNASADQQFqIQUgByADQQN0QeS6AWooAgBvDQALIAFB4ABqIANBA3RB5LoBaigCAEEBIAIQWUEBRwRAIAFBuJUEKAIANgIwQQBBA0GyxgAgAUEwahAvIAFBuJUEKAIAEKECNgIkIAFB7yg2AiBBAEEDQYIkIAFBIGoQLwwCCyABIAU2ApACIAFB4ABqEIMGIANFBEAgASsD4AEhCiABIAErA9gBOQPgASABIAo5A9gBCyAGIAFB4ABqQbgBEDchByABQQA2ApwCQQEhBgNAQQAgBkEBRg0DGiABIAEoApwCIghBBGo2ApwCIAgoAgAiCCAHKAKwATYCsAEgAUHgAGogBygCsAFBA3RB3LoBaigCAEEBIAIQWUEBRw0CIAEgBTYCkAIgAUHgAGoQgwYgA0UEQCABKwPgASEKIAEgASsD2AE5A+ABIAEgCjkD2AELIAggAUHgAGpBuAEQNxogBkEBaiEGDAALAAtBAEEDQZXAAEEAEC8LQX8LIQUgAhB/CyABQaACaiQAIAVBf0wLBEAgBCAAEDg2AgBBAEEDQZbzASAEEC8MAQtBxJIEQcSSBCgCACIAQQFqNgIAIAQgADYCBCAEQQRqELkFIARBCGpBuAEQNxogBCgCBCEJCyAEQcABaiQAIAkLlgQBC38jAEEQayICJAAgAiAANgIMIAJBnJIEIAJBDGoQRTYCCCACEEA2AgBBfyEAIAJBCGogAhBIRQRAIAJBDGoQSSIFKALEASIABEAgABAqIAVCADcCxAELIAUQuwUgBSgC3AEQmAQjAEEgayIEJAAgBEGckgQgAkEMahD5BTYCGCAEEPADNgIQIARBGGogBEEQahDBAUUEQCAEQQhqIARBGGoQhgIoAgAhAyMAQSBrIgYkACAGQRhqIAMQdCIKEOAFIAZBCGohCyMAQRBrIgkkAEGckgQQgQEhB0GckgQgAygCBCAHEFQiCBAzKAIAIQEDQCABIgAoAgAiASADRw0ACwJAIABBpJIERwRAIAAoAgQgBxBUIAhGDQELIAMoAgAiAQRAIAEoAgQgBxBUIAhGDQELQZySBCAIEDNBADYCAAsCQCADKAIAIgFFDQAgASgCBCAHEFQiASAIRg0AQZySBCABEDMgADYCAAsgACADKAIANgIAIANBADYCAEGckgQQNCIAIAAoAgBBAWs2AgAgCyADIAlBCGpBnJIEECtBARCqAhCpAhogCUEQaiQAIAZBCGoQsAUgCigCABogBkEgaiQACyAEQSBqJAAgBUHIAmohAUEAIQADQCABEDUgAEsEQCABIAAQQygCBBClAiAAQQFqIQAMAQsLIAEQzAEQKiAFELoFECpBACEACyACQRBqJAAgAAsJAEG48wMoAgALCwBBuPMDIAA2AgAL5QQBCH8jAEEQayIDJAAgAyAANgIMIANBnJIEIANBDGoQRTYCCCADEEA2AgBBfyEAIANBCGogAxBIRQRAIANBDGoQSSIBAn8CfyABKALYAyEFIAEoAsABIgYoAgAhACAGKAIEIQRBpOsAEDAiAgRAAkAgAkEBNgLgZyACQpqz5viDgICAwAA3AyggAkKLgICAoAE3AyAgAkKZgICAsAE3AxggAiAENgIIIAIgADYCBCACIAU2AhQgACAEbCEIIAJB+OcAaigCACEAIAJB9OcAaigCACEFQQEhBwJAA0AgACEEIAdFDQFBACEAQQAhByAIEDAiBQ0ACyACIAQ2AvhnIAIgBTYC9GcMAQsgAiAENgL4ZyACIAU2AvRnIAIMAgsLQQBBA0G9jQJBABAvQQEQAQALIgAgBjYCDCAAQQE2AgAgACAGQQhqENwDIgQ2AhAgBEQAAAAAAAAAABCoASAACzYC7AECfyAARQRAQQBBA0Hv8AFBABAvIAEoAugBIgAEQCAAKAIAIgAEQCAAQQAQkwYLIAAQKiABKALoASgCHBAqIAEoAugBKAIkECogASgC6AEoAjQQKiABKALoASgCLBAqIAEoAugBECogAUEANgLoAQsgASgC7AEhAAsgAAsEQCAAQwAAoEA4AiwLIAEoAuwBIgAEQCAAQwAAAD84AigLIAEoAuwBIgAEQCAAQRA2AiQLIAEoAuwBIgAEQCAAQQY2AhgLIAEoAuwBIgAEQCAAQQY2AhwLIAEoAuwBIgAEQCAAQQY2AiALIAEgASgCwAEQnAU2AugBQQAhAAsgA0EQaiQAIAALSQEBfyMAQRBrIgEkACABIAA2AgwgAUGckgQgAUEMahBFNgIIIAEQQDYCACABQQhqIAEQSEUEQCABQQxqEEkaCyABQRBqJABBfwufngIEO38OfQN+AXwjAEHgAWsiFCQAIBQgADYC3AEgFEGckgQgFEHcAWoQRTYCoAEgFBBANgLYAQJAAn8gFEGgAWogFEHYAWoQSARAQbzzAygCAAwBCyABIBRB3AFqEEkiJygC9AFOBEBBwPMDKAIADAELIBRBADYC2AEgFEF/NgLUASAUQYCAgPx7NgKcAQJAAkACQAJAICcoAvABIgBBfkYEQCAnKALoASEQICcoAswBIQgjAEEgayIgJAACQAJAAkACQAJAIBBBACAIG0UEQEEAQQNBjuoAQQAQLwwBCyAQKAIQIQ4gECgCDCELAkAgECgCFCIwQQFGDQACfwJAAkACQAJAAkAgMEEBaw4FAAIEAwEECyAgIAs2AhwgICAONgIYIAsgDmwiABAwIgJFDQggAiAIIAAQNwwECwJ/IAghACAgIAtBA20iA0EBdCIGNgIcICAgDkEDbSIIQQF0IgI2AhggAiAGbBAwIgIEQCAIQQAgCEEAShshCiADQQAgA0EAShshGCACIgghDANAIAcgCkcEQCAGIAhqIQggACAHQQNsIgMgC2xqIQUgACADQQJqIAtsaiEJIAAgA0EBaiALbGohA0EAIQQDQCAEIBhHBEAgDCAFLQAAIAUtAAFBAXZqIAMtAABBAXZqIAMtAAFBAnZqQQJ0QQluOgAAIAggCS0AACADLQABQQJ2IAMtAABBAXZqaiAJLQABQQF2akECdEEJbjoAACAMIAUtAAIgBS0AAUEBdmogAy0AAUECdmogAy0AAkEBdmpBAnRBCW46AAEgCCAJLQACIAMtAAJBAXYgAy0AAUECdmogCS0AAUEBdmpqQQJ0QQluOgABIARBAWohBCAJQQNqIQkgA0EDaiEDIAVBA2ohBSAIQQJqIQggDEECaiEMDAELCyAHQQFqIQcgBiAMaiEMDAELCyACDAELDAgLDAMLAn8gCCEAICAgC0ECbSIDNgIcICAgDkECbSIINgIYIAMgCGwQMCICBEAgCEEAIAhBAEobIQQgA0EAIANBAEobIQYgAiEIA0AgBCAMRwRAIAAgDEEBdCIFIAtsaiEDIAAgBUEBciALbGohBUEAIQkDQCAGIAlHBEAgCCAFLQABIAUtAAAgAy0AASADLQAAampqQQJ2OgAAIAlBAWohCSAFQQJqIQUgA0ECaiEDIAhBAWohCAwBCwsgDEEBaiEMDAELCyACDAELDAcLDAILAn8gICALQQNtIgA2AhwgICAOQQNtIgM2AhggACADbBAwIgIEQCADQQAgA0EAShshBiAAQQAgAEEAShshCiACIQADQCAGIAlHBEAgCCAJQQNsIgQgC2xqIQMgCCAEQQJqIAtsaiEMIAggBEEBaiALbGohBUEAIQcDQCAHIApHBEAgACAMLQACIAwtAAEgDC0AACAFLQACIAUtAAEgBS0AACADLQACIAMtAAEgAy0AAGpqampqampqQQluOgAAIAdBAWohByAMQQNqIQwgBUEDaiEFIANBA2ohAyAAQQFqIQAMAQsLIAlBAWohCQwBCwsgAgwBCwwGCwwBCwJ/ICAgC0EEbSIANgIcICAgDkEEbSIDNgIYIAAgA2wQMCICBEAgA0EAIANBAEobIQogAEEAIABBAEobIRggAiEAA0AgByAKRwRAIAggB0ECdCIEIAtsaiEDIAggBEEDciALbGohDCAIIARBAnIgC2xqIQUgCCAEQQFyIAtsaiEJQQAhBgNAIAYgGEcEQCAAIAwtAAMgDC0AAiAMLQABIAwtAAAgBS0AAyAFLQACIAUtAAEgBS0AACAJLQADIAktAAIgCS0AASAJLQAAIAMtAAMgAy0AAiADLQABIAMtAABqampqampqampqampqampBBHY6AAAgBkEBaiEGIAxBBGohDCAFQQRqIQUgCUEEaiEJIANBBGohAyAAQQFqIQAMAQsLIAdBAWohBwwBCwsgAgwBCwwFCwsiCA0ADAELIBAoAgAhACMAQSBrIi0kACAtIAhBASALIA4gCxC9BSEkIAAoAgAoAgAhGEEAIQIjAEEgayIqJAACQAJAIBhB3ABqIgkQQhCeAUUNACAJEEJBABBEKAIEICQoAgRHDQAgCRBCQQAQRCgCCCAkKAIIRg0BCyAkKAIEIQQgJCgCCCEFICQoAgQhAyAkKAIIIQwDQCADQQhIIAxBCEhyRQRAIAJBAWohAiAMQQF1IQwgA0EBdSEDDAELC0EAIQwgCUEDNgIUIAkgAjYCECAJQwAAAEBDAAAAPxC8BiI9OAIYIAlDAACAPyA9EKAClTgCHCAJQQRqIgAgCSgCFCACbBCPBCACQQAgAkEAShshAwNAIAMgDEcEQCAFIAx2IQYgBCAMdiEHQQAhAgNAIAkoAhQiCyACTQRAIAxBAWohDAwDBSAAIAsgDGwgAmoQREECIAcgBkEBENoDIAJBAWohAgwBCwALAAsLAkAgCUEgaiIAEIoCIgMgBCAFbCIGIgJJBEAjAEEgayILJAACQCACIANrIgUgABArKAIAIAAoAgRrQQF1TQRAIwBBEGsiAiQAIAIgADYCACACIAAoAgQiAzYCBCACIAMgBUEBdGo2AgggAigCBCEMA0AgAigCCCAMRwRAIAAQKyACKAIEEJQGIAIgAigCBEECaiIMNgIEDAELCyACEHYgAkEQaiQADAELIAAQKyEOIAtBCGohAgJ/IAAQigIgBWohDCMAQRBrIgMkACADIAw2AgwCfyMAQRBrIgQkACAAECsaIARB/////wc2AgwgBEH/////BzYCCCAEQQxqIARBCGoQwgEoAgAhByAEQRBqJAAgByAMTwsEQCAAEIkCIgQgB0EBdkkEQCADIARBAXQ2AgggA0EIaiADQQxqEHUoAgAhBwsgA0EQaiQAIAcMAQsQhwEACyEDIAAQigIhB0EAIQwjAEEQayIEJAAgBEEANgIMIAJBDGogBEEMaiAOEKsBIAMEQCACKAIQGiADQf////8HSwRAQa2KARCLAQALIANBAXQQSyEMCyACIAw2AgAgAiAMIAdBAXRqIgc2AgggAiAHNgIEIAIQNCAMIANBAXRqNgIAIARBEGokACMAQRBrIgMkACADIAIoAgg2AgAgAigCCCEEIAMgAkEIajYCCCADIAQgBUEBdGo2AgQgAygCACEMA0AgAygCBCAMRwRAIAIoAhAgAygCABCUBiADIAMoAgBBAmoiDDYCAAwBCwsgAxC1ASADQRBqJAAgABCaBiAAECsgACgCACAAKAIEIAJBBGoiAxC0AiAAIAMQRyAAQQRqIAJBCGoQRyAAECsgAhA0EEcgAiACKAIENgIAIAAQigIaIAAoAgAaIAAoAgAgABCJAkEBdGoaIAAoAgAgABCJAkEBdGoaIAAoAgAaIAIoAgQhAANAIAAgAigCCEcEQCACKAIQGiACIAIoAghBAms2AggMAQsLIAIoAgAEQCACKAIQGiACKAIAIQAgAhA0KAIAIAIoAgBrGiAAECoLCyALQSBqJAAMAQsgAiADSQRAIAAoAgAgAkEBdGohAiAAEIoCGiAAIAIQlQYgACgCABogACgCACAAEIkCQQF0ahogACgCABogACgCACAAEIoCQQF0ahoLCyAJQSxqIAYQjQIgCUE4aiAGEI0CCwJ/ICpBxSYQiQEhBEEBCwRAAkACQAJAAkACQCAkKAIAQQFGBEAgJCgCEEEBRw0BIAlBBGoiABCeASAJKAIUIAkoAhBsRw0CICQoAgQgAEEAEEQoAgRHDQMgJCgCCCAAQQAQRCgCCEcNBCAJIABBABBEICQQ1gIgCSAAQQEQRCAAQQAQRBDWAiAJIABBAhBEIABBARBEEJgGQQEhAwNAIAMgCSgCEE8NBiAAIAkoAhQgA2wQRCgCGCEFIAAgCSgCFCADbEEBaxBEKAIYIQ5BACEMIAAgCSgCFCADbEEBaxBEKAIEIgJBAXQhCiAAIAkoAhQgA2xBAWsQRCgCCEEBdiEZIAJBAXYhDQNAIAwgGUcEQCAOIAogDGxBAnRqIgsgAkECdGohB0EAIQYDQCAGIA1GBEAgDEEBaiEMDAMFIAUgCyoCACALKgIEkiAHKgIAkiAHKgIEkkMAAIA+lDgCACAHQQhqIQcgC0EIaiELIAZBAWohBiAFQQRqIQUMAQsACwALCyAJIAAgCSgCFCADbEEBahBEIAAgCSgCFCADbBBEENYCIAkgACAJKAIUIANsQQJqEEQgACAJKAIUIANsQQFqEEQQmAYgA0EBaiEDDAALAAtB4KkEQZE9EClBlhsQKUGpJhApQcoCECxBvSsQKUH0wgAQKRAtDAkLQeCpBEHVyQAQKUGWGxApQakmEClBywIQLEG9KxApQZzRABApEC0MCAtB4KkEQbDXABApQZYbEClBqSYQKUHNAhAsQb0rEClB3tsAECkQLQwHC0HgqQRByOIAEClBlhsQKUGpJhApQc4CECxBvSsQKUGA5wAQKRAtDAYLQeCpBEHp6gAQKUGWGxApQakmEClBzwIQLEG9KxApQYDnABApEC0MBQsLIAQQciMAQTBrIiEkAAJAIBhBoAFqIg4oAgAgCRBCQQAQRCgCBEYEQCAOKAIEIAkQQkEAEEQoAghGDQELQQAhDEEAIQtBACEHIA5BIGohAAJAIAlBBGoQngEEQCAJQQBBABDsASgCACECIAlBAEEAEOwBKAIEIQMgCUEAQQAQ7AEoAgghBCAAIAkoAhA2AgwgACAJKAIUQQFrIgU2AhAgACAAKAIMIAVsEI8EA0AgDCAAKAIMTw0CIAQgDHYhBiADIAx2IQpBACEFA0AgACgCECIZIAVNBEAgDEEBaiEMDAIFIAAgDCAZbCAFahBEIAIgCiAGQQEQ2gMgBUEBaiEFDAELAAsACwALQeCpBEGVERApQYgaEClBoiYQKUE1ECxBuisQKUGlLxApEC0MBQsgCRBCQQAQRCgCBCEMIAkQQkEAEEQoAgghBSAJKAIQIQQgCSgCFCECIA5B3ABqIgBDzcxMPzgCGCAAQQU2AhQgAEMAAMA/OAIQIABDAABAQDgCDCAAQSQ2AgggACACNgIEIAAgBDYCACAAQRxqQSQQjQIgAEEoaiIGIAAoAgQgACgCAGwQjwQDQCAEIAtHBEAgBSALdiEAIAwgC3YhCiACIAtsIRlBACEDA0AgAiADRgRAIAtBAWohCwwDBSAGIAMgGWoQREECIAogAEECENoDIANBAWohAwwBCwALAAsLIA4gCRBCQQAQRCgCBDYCACAOIAkQQkEAEEQoAgg2AgQgDigCCCECAkAgAiAOQRBqIgQiABBlIgNLBEAjAEEgayIMJAACQCACIANrIgMgABArKAIAIAAoAgRrQQxtTQRAIAAgAxCpBgwBCyAAECshAiAMQQhqIAAgABBlIANqEKUDIAAQZSACEKgGIgIgAxCnBiAAIAIQpgYgAigCBCEAA0AgACACKAIIRwRAIAIoAhAaIAIgAigCCEEMayIDNgIIIAMQtAYMAQsLIAIoAgAEQCACKAIQGiACKAIAIQAgAhCTBBogABAqCwsgDEEgaiQADAELIAIgA0kEQCAAKAIAIAJBDGxqIQIgABBlIQMgACACELUGIAAgAxCYAwsLA0AgBBBlIAdLBEAgBCAHEKwBIQAgDigCDCECAkAgAiAAEGUiA0sEQCMAQSBrIgwkAAJAIAIgA2siAyAAECsoAgAgACgCBGtBDG1NBEAgACADEKkGDAELIAAQKyECIAxBCGogACAAEGUgA2oQpQMgABBlIAIQqAYiAiADEKcGIAAgAhCmBiACKAIEIQADQCAAIAIoAghHBEAgAigCEBogAiACKAIIQQxrIgM2AgggAxCyBgwBCwsgAigCAARAIAIoAhAaIAIoAgAhACACEJMEGiAAECoLCyAMQSBqJAAMAQsgAiADSQRAIAAoAgAgAkEMbGohAiAAEGUhAyAAIAIQswYgACADEJgDCwsgB0EBaiEHDAELCwtBlAEQSxCRBiECIwBBEGsiACQAIABBCGogAhCQBiICIBhBQGsiKRDuAyACEMkBIABBEGokACApKAIAIAkQQkEAEEQoAgQQlQEgKSgCACAJEEJBABBEKAIIEJQBAn8gIUEQakHJKxCJASEuQQELBEACQCApKAIAIS8gGEG8AmohGUEAIQwjAEEwayIlJAACQAJAAkACQAJAAkAgCQRAIA5FDQEgCRBCEJ4BRQ0CIAkQQkEAEEQoAgQgDigCAEcNAyAJEEJBABBEKAIIIA4oAgRHDQRBACEFIwBBIGsiIyQAAkACQCAJKAIQQQBKBEACfyAjQcWZARCJASENQQELBEACQAJAAkAgDkEgaiIHEJ4BBEAgCSgCEEEATA0BIAlBwLsBQbDnARDaBkUNAgNAQQAhACAFIAcoAgxPDQQDQCAHKAIQIABNBEAgBUEBaiEFDAIFIAcgBygCECAFbCAAahBEIQIgCSAFIAAQ7AEhAyAJIAUgAEEBaiIAEOwBIQRBACEGAkACQAJAAkACQAJAAkACQAJAAkAgAigCAEECRgRAIAMoAgBBAkcNASAEKAIAQQJHDQIgAigCEEEBRw0DIAMoAhBBAUcNBCAEKAIQQQFHDQUgAigCBCAEKAIERw0GIAIoAgggBCgCCEcNByADKAIEIAQoAgRHDQggAygCCCAEKAIIRw0JA0AgBiADKAIITw0NQQAhCyAGIAIoAghPBEBB4KkEQZDdARApQa3eARApQaImEClB9wAQLEG6KxApQbXfARApEC0MFgsgAigCGCACKAIMIAZsaiESIAMgBhBGIRUgBCAGEEYhGgNAIAsgAygCBE8EQCAGQQFqIQYMAgUgEiALQQJ0IgpqIAogFWoqAgAgCiAaaioCAJM4AgAgC0EBaiELDAELAAsACwALQeCpBEGx2wAQKUGIGhApQaImEClB1gAQLEG6KxApQa7iABApEC0MCQtB4KkEQdHmABApQYgaEClBoiYQKUHXABAsQborEClBruIAECkQLQwIC0HgqQRBuuoAEClBiBoQKUGiJhApQdgAECxBuisQKUGu4gAQKRAtDAcLQeCpBEGK/AAQKUGIGhApQaImEClB2QAQLEG6KxApQdv/ABApEC0MBgtB4KkEQeqDARApQYgaEClBoiYQKUHaABAsQborEClB2/8AECkQLQwFC0HgqQRBr4YBEClBiBoQKUGiJhApQdsAECxBuisQKUHb/wAQKRAtDAQLQeCpBEH9iQEQKUGIGhApQaImEClB3AAQLEG6KxApQdqMARApEC0MAwtB4KkEQb2PARApQYgaEClBoiYQKUHdABAsQborEClBhpIBECkQLQwCC0HgqQRBzZQBEClBiBoQKUGiJhApQd4AECxBuisQKUHajAEQKRAtDAELQeCpBEGDlgEQKUGIGhApQaImEClB3wAQLEG6KxApQYaSARApEC0LDAkLAAsACwALQeCpBEGXNhApQYgaEClBoiYQKUHIABAsQborEClB6DwQKRAtDAULQeCpBEHDwgAQKUGIGhApQaImEClByQAQLEG6KxApQbHJABApEC0MBAtB4KkEQdTQABApQYgaEClBoiYQKUHKABAsQborEClBjdcAECkQLQwDCwsgDRByAn8gI0GBmwEQiQEhNUEBCwRAAkAgDkEgaiEVIwBBMGsiCyQAIA5BPGoiMRCHBCAOQSBqITYgC0EIakEEciErIA4qAjQQZyFDQQEhAgNAAkACQAJAAkACQAJAAkACQCA2EJ4BQQFrIAJLBEAgFSACQQFrEIYEIQUgFSACEIYEIQcgFSACQQFqIgMQhgQhBgJ/IBUQngEgAksEQCAVQQAQRCgCBCAVIAIQRCgCBG6zEL4G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IAsgEjYCFCALIAAqAgA4AiAgCyAJIBIgRBCgAzgCJCALQQhqICsgArMgRSASEOICIDEgC0EIahDhAgsgAkEBaiECDAELAAsACwALIAtBMGokAAwJC0HgqQRB0qIBEClBiBoQKUGiJhApQcABECxBuisQKUGopQEQKRAtDAYLQeCpBEHLpwEQKUGIGhApQaImEClBwQEQLEG6KxApQailARApEC0MBQtB4KkEQdKiARApQYgaEClBoiYQKUGVAhAsQborEClBqKUBECkQLQwEC0HgqQRBy6kBEClBiBoQKUGiJhApQZYCECxBuisQKUGopQEQKRAtDAMLQeCpBEGwrAEQKUGIGhApQaImEClB6gIQLEG6KxApQailARApEC0MAgtB4KkEQb2uARApQYgaEClBoiYQKUHrAhAsQborEClBqKUBECkQLQwBCyADIQIMAQsLDAMLCyA1EHICfyAjQeicARCJASEdQQELBEACQEEAIRJBACEVIwBB0ABrIgAkACAOQSBqIQ0gDkE8aiELIA4qAjQQZyFAIA4qAjhDAACAP5IQZyAOKgI4lSFCAkACQANAIAsQeyASSwRAIAsgEhCdASIHKAIQIA0oAhBODQIgBygCDCECIA0oAhAhAyAHKAIQIQQgAEEEaiAAIAcqAgAgByoCBCAHKAIMEIUEAn8gACoCAEMAAAA/kiI9i0MAAABPXQRAID2oDAELQYCAgIB4CyEGAn8gACoCBEMAAAA/kiI9i0MAAABPXQRAID2oDAELQYCAgIB4CyEKAkACfyANIAIgA2wgBGoiBEEBaxBEIQIgDSAEEEQiGiEDAkACQAJAAkACQAJAIA0gBEEBahBEIgUoAgQgAigCBCADKAIERkYEQCAFKAIIIAIoAgggAygCCEZHDQIjAEEgayIEJAACQAJAAkACQAJAAkACQCAKQQFIDQAgAygCBCAKQQFqTQ0AIAZBAUgNASAGQQFqIhEgAygCCE8NASACKAIEIAMoAgRHDQIgAigCBCAFKAIERw0DIAIoAgggAygCCEcNBCACKAIIIAUoAghHDQUgAiAGQQFrIhYQRiEXIAIgBhBGIR4gAiAREEYhHyADIAYQRiEcIAUgFhBGIRYgBSAGEEYhJiAFIBEQRiEFIARBHGogBEEYaiAEQRRqIARBEGogBEEMaiADIAogBhD+AyAfIApBAnQiAmoqAgAhQyACIBdqKgIAIUEgAiAFaioCACFEIAIgFmoqAgAhRSACICZqIgMqAgAhPSACIB5qIgUqAgAhPiACIBxqKgIAIT8gBSoCBCFGIAVBBGsqAgAhRyADKgIEIUggA0EEayoCACFJIAAgBCoCFDgCICAAIAQqAgwiSjgCLCAAIEo4AiQgACBHIEaTIEggSZOSQwAAgD6UIkY4AiggBCoCECFHIAAgPSA+ID8gP5KTkjgCQCAAIEEgQ5MgRCBFk5JDAACAPpQiPzgCPCAAIEY4AjggACA/OAI0IAAgRzgCMCAAIAQqAhyMOAIUIAQqAhghPyAAID0gPpNDAAAAv5Q4AhwgACA/jDgCGCAEQSBqJAAMBgtB4KkEQaXMARApQfbDARApQaImEClBtQIQLEG6KxApQeXNARApEC0MDAtB4KkEQYfOARApQfbDARApQaImEClBtgIQLEG6KxApQerOARApEC0MCwtB4KkEQZvPARApQfbDARApQaImEClBtwIQLEG6KxApQeHPARApEC0MCgtB4KkEQafQARApQfbDARApQaImEClBuAIQLEG6KxApQeHPARApEC0MCQtB4KkEQYDRARApQfbDARApQaImEClBuQIQLEG6KxApQeHPARApEC0MCAtB4KkEQczRARApQfbDARApQaImEClBugIQLEG6KxApQeHPARApEC0MBwsMAQsCQCACKAIEIAMoAgRHDQAgBSgCBCADKAIEQQF2Rw0AIAIoAgggAygCCEcNAyAFKAIIIAMoAghBAXZHDQMjAEEgayIEJAACQAJAAkACQAJAAkACQAJAAkACQAJAIApBAUgNACADKAIEIApBAWpNDQAgBkEBSA0BIAZBAWoiESADKAIITw0BIAIoAgQgAygCBEcNAiAFKAIEIAIoAgRBAXZHDQMgAigCCCADKAIIRw0EIAUoAgggAigCCEEBdkcNBSACIAZBAWsQRiEWIAIgBhBGIRcgAiAREEYhESADIAYQRiEeIARBHGogBEEYaiAKsiAGskEBEIUEIAQqAhwiPUMAAAC/kkMAAAAAYEUNBiAEKgIYQwAAAL+SQwAAAABgRQ0HIAUoAgSzID1DAAAAP5JeRQ0IIAUoAgizIAQqAhhDAAAAP5JeRQ0JIARBFGogBEEQaiAEQQxqIARBCGogBEEEaiADIAogBhD+AyAFIAQq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IBdBAnRqIgUgQCA9lCAFKgIAkjgCAAwIC0HgqQRBzoQBEClBlocBEClBtyYQKUGLARAsQcMrEClBlosBECkQLQwVC0HgqQRBno0BEClBlocBEClBtyYQKUGMARAsQcMrEClB848BECkQLQwUC0HgqQRBy5IBEClBlocBEClBtyYQKUGNARAsQcMrEClB/5QBECkQLQwTC0HgqQRBtJcBEClBlocBEClBtyYQKUGOARAsQcMrEClB3pkBECkQLQwSC0HgqQRBlZsBEClBlocBEClBtyYQKUGWARAsQcMrEClB8ZwBECkQLQwRC0HgqQRBz54BEClBlocBEClBtyYQKUGXARAsQcMrEClBvqABECkQLQwQC0HgqQRBrqMBEClBlocBEClBtyYQKUGYARAsQcMrEClB6KUBECkQLQwPC0HgqQRBqagBEClBlocBEClBtyYQKUGZARAsQcMrEClByKoBECkQLQwOCwsgAkEBaiECDAALAAsAC0HgqQRBxecAEClBnB0QKUG3JhApQf4AECxBwysQKUHM6wAQKRAtDAkLQeCpBEGn3AAQKUGcHRApQbcmEClB+gAQLEHDKxApQZXjABApEC0MCAtB4KkEQfDRABApQZwdEClBtyYQKUH5ABAsQcMrEClBjdgAECkQLQwHC0HgqQRBusMAEClBnB0QKUG3JhApQfgAECxBwysQKUGqygAQKRAtDAYLQeCpBEGHNxApQZwdEClBtyYQKUH3ABAsQcMrEClB2j0QKRAtDAULIAdBMGokAANAIA0oAjwgBkwEQCAKQQFqIQoMAgUgDUEIaiAaIAoQnQFBJBA3GiANIBEgBhAzKgIAOAIQIB0gDUEIahDhAiAGQQFqIQYMAQsACwALAAsgDUFAayQACyAeEHIgI0EgaiQADAILQeCpBEHDwgAQKUGIGhApQaImEClBkwEQLEG6KxApQbHJABApEC0LEAAACyAOEO8DEHshACAlQSBqIgcQngIgAARAIAcgABD+BSAHIAAQhwYLA0AgDhDvAxB7IAxNDQYgJUEIaiAOEO8DIAwQnQEiACoCACAAKgIEIAAqAgggACoCHCAAKgIYQwAAAABeEMEEGiAHIAwQYyIAICUtABg6ABAgACAlKQMQNwIIIAAgJSkDCDcCACAMQQFqIQwMAAsAC0HgqQRBqsQAEClB3coAEClBs9IA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CGpBACAAQRBqEF0hAyAAQRBqIQICQCAAKAKUASABKAIAa0HjAE4EQCADIAAoApQBIAEoAgBrQQJqEDAQbiADKAIARQ0BIAMoAgAhAgsgAC0AjwEEQCACQS06AAAgAkEBaiECCyABKAIAIQQDQCAAKAKUASAETQRAAkAgAkEAOgAAIAAgBjYCACAAQRBqQcC+AyAAEKEBQQFHDQAgAxBcDAQLBSACIABB9gBqIABBgAFqIAQQsgMgAGsgAGotAAo6AAAgAkEBaiECIARBAWohBAwBCwsQcQALEHEACyAAQZgCaiAAQZACahBwBEAgBSAFKAIAQQJyNgIACyAAKAKYAiECIABBkAFqEDogARBcIABBoAJqJAAgAgurAgECfyMAQaADayICJAAgAiACQaADajYCDCMAQZABayIDJAAgAyADQYQBajYCHCAAQQhqIANBIGogA0EcaiAEIAUgBhCQByADQgA3AxAgAyADQSBqNgIMAn8gAkEQaiIFIQYgBSACKAIMEOwEIQcgACgCCCEAIwBBEGsiBCQAIAQgADYCDCAEQQhqIARBDGoQuwEhCCAGIANBDGogByADQRBqEMIEIQAgCBC6ASAEQRBqJAAgAEF/RgsEQBBxAAsgAiAFIABBAnRqNgIMIANBkAFqJAAgAkEQaiEDIAIoAgwhBCMAQRBrIgAkACAAIAE2AggDQCADIARHBEAgAEEIaiADKAIAEMsEIANBBGohAwwBCwsgACgCCCEBIABBEGokACACQaADaiQAIAELhgEAIwBBgAFrIgIkACACIAJB9ABqNgIMIABBCGogAkEQaiACQQxqIAQgBSAGEJAHIAJBEGohAyACKAIMIQQjAEEQayIAJAAgACABNgIIA0AgAyAERwRAIABBCGogAywAABC3AyADQQFqIQMMAQsLIAAoAgghASAAQRBqJAAgAkGAAWokACABC/0MAQF/IwBBQGoiByQAIAcgATYCOCAEQQA2AgAgByADED8gBxCOASEIIAcQOgJ/AkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCAGQcEAaw45AAEXBBcFFwYHFxcXChcXFxcODxAXFxcTFRcXFxcXFxcAAQIDAxcXARcIFxcJCxcMFw0XCxcXERIUFgsgACAFQRhqIAdBOGogAiAE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HCADIAAoAhg2AgALIAAgAiAAKALEASAEELQEIAUgACkDADcDACAFIAApAwg3AwggAEHYAWogAEEgaiAAKAIcIAQQgAEgAEH4AmogAEHwAmoQbwRAIAQgBCgCAEECcjYCAAsgACgC+AIhAiABEDEaIABB2AFqEDEaIABBgANqJAAgAgu9AwAjAEHwAmsiACQAIAAgAjYC4AIgACABNgLoAiAAQcgBaiADIABB4AFqIABB3AFqIABB2AFqELAEIABBuAFqED0iASABEE4QOSAAIAFBABA2IgI2ArQBIAAgAEEQajYCDCAAQQA2AgggAEEBOgAHIABBxQA6AAYDQAJAIABB6AJqIABB4AJqEIQBRQ0AIAAoArQBIAEQLiACakYEQCABEC4hAyABIAEQLkEBdBA5IAEgARBOEDkgACADIAFBABA2IgJqNgK0AQsgAEHoAmoQYCAAQQdqIABBBmogAiAAQbQBaiAAKALcASAAKALYASAAQcgBaiAAQRBqIABBDGogAEEIaiAAQeABahCvBA0AIABB6AJqEGwaDAELCwJAIABByAFqEC5FDQAgAC0AB0UNACAAKAIMIgMgAEEQamtBnwFKDQAgACADQQRqNgIMIAMgACgCCDYCAAsgBSACIAAoArQBIAQQtQQ5AwAgAEHIAWogAEEQaiAAKAIMIAQQgAEgAEHoAmogAEHgAmoQbwRAIAQgBCgCAEECcjYCAAsgACgC6AIhAiABEDEaIABByAFqEDEaIABB8AJqJAAgAgu9AwAjAEHwAmsiACQAIAAgAjYC4AIgACABNgLoAiAAQcgBaiADIABB4AFqIABB3AFqIABB2AFqELAEIABBuAFqED0iASABEE4QOSAAIAFBABA2IgI2ArQBIAAgAEEQajYCDCAAQQA2AgggAEEBOgAHIABBxQA6AAYDQAJAIABB6AJqIABB4AJqEIQBRQ0AIAAoArQBIAEQLiACakYEQCABEC4hAyABIAEQLkEBdBA5IAEgARBOEDkgACADIAFBABA2IgJqNgK0AQsgAEHoAmoQYCAAQQdqIABBBmogAiAAQbQBaiAAKALcASAAKALYASAAQcgBaiAAQRBqIABBDGogAEEIaiAAQeABahCvBA0AIABB6AJqEGwaDAELCwJAIABByAFqEC5FDQAgAC0AB0UNACAAKAIMIgMgAEEQamtBnwFK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ZW1vcnkhIQoAPz8/IDEKAE1hcmtlciBPSy4AT3V0IG9mIG1lbW9yeSEhCgBPdXQgb2YgbWVtb3J5ISEKAE91dCBvZiBtZW1vcnkhIQoAT3V0IG9mIG1lbW9yeSEhCgAgCQoNAE91dCBvZiBtZW1vcnkhIQoAT3V0IG9mIG1lbW9yeSEhCgAgPT09IG1hdHJpeCAoJWQsJWQpID09PQoAd2IAYXJnbENhbWVyYUZydXN0dW1SSCgpOiBhclBhcmFtRGVjb21wTWF0KCkgaW5kaWNhdGVkIHBhcmFtZXRlciBlcnJvci4KAE91dCBvZiBtZW1vcnkhIQoAID09PSB2ZWN0b3IgKCVkKSA9PT0KAERhdGEgbnVtIGVycm9yISEKAEVycm9yOiBtYWxsb2MKAEVycm9yOiBtYWxsb2MKAEVycm9yOiBtYWxsb2MKAEVycm9yOiBtYWxsb2MKAEVycm9yIDE6IGljcEdldEluaXRYdzJYYwoAT3V0IG9mIG1lbW9yeSEhCgBPdXQgb2YgbWVtb3J5ISEKAHIAYXJWaWRlb09wZW46IEVycm9yLCB2aWRlbyBkZXZpY2UgYWxyZWFkeSBvcGVuLgoAZGVidWcAJXMvJXMAT3V0IG9mIG1lbW9yeSEhCgBPdXQgb2YgbWVtb3J5ISEKAE91dCBvZiBtZW1vcnkhIQoAJXMuJXMAJXMuJXMAJXMuJXMAZnNldAAjIyMgRmVhdHVyZSBjYW5kaWRhdGVzIGZvciB0cmFja2luZyBhcmUgb3ZlcmZsb3cuCgBTdGFydCB0cmFja2luZ190aHJlYWQgIyVkLgoAT3V0IG9mIG1lbW9yeSEhCgBPdXQgb2YgbWVtb3J5ISEKAE91dCBvZiBtZW1vcnkhIQoAa3BtRGVsZXRlUmVmRGF0YVNldCgpOiBOVUxMIHJlZkRhdGFTZXRQdHIvcmVmSW1hZ2UuCgAsAE91dCBvZiBtZW1vcnkhIQoAT3V0IG9mIG1lbW9yeSEhCgBBc3NlcnRpb24gYHB5cmFtaWQtPnNpemUoKSA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB3aWR0aCA+PSA1YCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgd2lkdGggPj0gMWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGltLndpZHRoKCkgPT0gaW0uc3RlcCgpL3NpemVvZihmbG9hdClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAoc3JjX3dpZHRoJTIpID09IDBgIGZhaWxlZCBpbiAAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQBBc3NlcnRpb24gYHggPj0gbU1pblhgIGZhaWxlZCBpbiAAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQAlbS0lZC0lWS0lSC0lTS0lUwBBc3NlcnRpb24gYHdpZHRoID4gMGAgZmFpbGVkIGluIABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAEFzc2VydGlvbiBgbVN0YXJ0VGltZSA+PSAwYCBmYWlsZWQgaW4gAFVua25vd24gb3IgdW5zdXBwb3J0ZWQgbGFiZWxpbmcgdGhyZXNob2xkIG1vZGUgcmVxdWVzdGVkLiBTZXQgdG8gbWFudWFsLgoAPz8/IDIKAFBhdHRlcm4gZXh0cmFjdGlvbiBmYWlsZWQuAEVycm9yOiB1bnN1cHBvcnRlZCBwaXhlbCBmb3JtYXQuCgBFcnJvcjogTlVMTCBwYXR0SGFuZGxlLgoAdwBBUl9QSVhFTF9GT1JNQVRfUkdCAFNJWkUgPSAlZCwgJWQKAEVycm9yICglZCk6IHVuYWJsZSB0byBvcGVuIGNhbWVyYSBwYXJhbWV0ZXJzIGZpbGUgIiVzIiBmb3Igd3JpdGluZy4KACVzLiVzAE91dCBvZiBtZW1vcnkhIQoARXJyb3I6IGljcEdldEpfVV9YYwBFcnJvciAyOiBpY3BHZXRJbml0WHcyWGMKAEVycm9yOiB1bmFibGUgdG8gb3BlbiBtdWx0aW1hcmtlciBjb25maWcgZmlsZSAnJXMnLgoAYXJWaWRlb09wZW5Bc3luYzogRXJyb3IsIHZpZGVvIGRldmljZSBhbHJlYWR5IG9wZW4uCgBpbmZvAHJiAFRyYWNraW5nIHRocmVhZCA9ICVkCgAlcyVzACVzLiVzAHIAd2IAcmIAJXMuJXMAT3V0IG9mIG1lbW9yeSEhCgBFbmQgdHJhY2tpbmdfdGhyZWFkICMlZC4KAGtwbURlbGV0ZVJlZkRhdGFTZXQoKTogMCB4c2l6ZS95c2l6ZS9kcGkuCgAKACVzLiVzAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2RldGVjdG9ycy9Eb0dfc2NhbGVfaW52YXJpYW50X2RldGVjdG9yLmNwcAAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvZ2F1c3NpYW5fc2NhbGVfc3BhY2VfcHlyYW1pZC5jcHAAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL2hhcnJpcy5jcHAAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL29yaWVudGF0aW9uX2Fzc2lnbm1lbnQuY3BwAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2RldGVjdG9ycy9weXJhbWlkLmNwcABJRCBhbHJlYWR5IGV4aXN0cwAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9tYXRjaGVycy9ob3VnaF9zaW1pbGFyaXR5X3ZvdGluZy5jcHAAQXNzZXJ0aW9uIGBweXJhbWlkYCBmYWlsZWQgaW4gAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2ZyYW1ld29yay9pbWFnZS5jcHAAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZnJhbWV3b3JrL3RpbWVycy5jcHAATUFOVUFMAD8/PyAzCgBHZW5lcmljIGVycm9yIGR1cmluZyBtYXRjaGluZyBwaGFzZS4ARXJyb3I6IGNhbid0IGxvYWQgcGF0dGVybiBmcm9tIE5VTEwgYnVmZmVyLgoAJTRkAEFSX1BJWEVMX0ZPUk1BVF9CR1IAICUxMGcARGlzdG9ydGlvbiBmYWN0b3I6IGsxPSUxLjEwZiwgazI9JTEuMTBmLCBwMT0lMS4xMGYsIHAyPSUxLjEwZgoAJXMlcwoAd2IAICUxMGcARXJyb3IgaWNwR2V0Sl9VX1MKAD09PT09PSAlcyA9PT09PT09PQoARXJyb3IgMzogaWNwR2V0SW5pdFh3MlhjCgAlcyVzCgBBUl9QSVhFTF9GT1JNQVRfUkdCAHdhcm5pbmcAd2IAcmIAd2IAT3V0IG9mIG1lbW9yeSEhCgBFcnJvciBzYXZpbmcgZmVhdHVyZSBtYXA6IGVycm9yIHdyaXRpbmcgZGF0YS4KAEZpbGUgb3BlbiBlcnJvci4gJXMKAHIARXJyb3I6IG1hbGxvYwoAT3V0IG9mIG1lbW9yeSEhCgBrcG1TZXRSZWZEYXRhU2V0KCk6IE5VTEwga3BtSGFuZGxlL2ZpbGVuYW1lLgoAIGxpbmUgACBsaW5lIAAgbGluZSAAIGxpbmUgACBsaW5lIABCdWlsZCBQeXJhbWlkACBsaW5lIAAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9tYXRjaGVycy9mcmVhay5oACBsaW5lIAAgbGluZSAAQVVUT19NRURJQU4ASW5zdWZmaWNpZW50IGNvbnRyYXN0IGR1cmluZyBtYXRjaGluZy4ARXJyb3I6IG91dCBvZiBtZW1vcnkuCgBBUl9QSVhFTF9GT1JNQVRfUkdCQQAgICAgICAgICAgICAgICAgICBmeD0lZiwgZnk9JWYsIHgwPSVmLCB5MD0lZiwgcz0lZgoAAEVycm9yOiBVbmFibGUgdG8gb3BlbiBmaWxlICclcycgZm9yIHdyaXRpbmcuCgBFcnJvciBpY3BHZXRVX2Zyb21fWF9ieV9NYXRYMlUKACU3LjVmIABFcnJvciA0OiBpY3BHZXRJbml0WHcyWGMKAABBUl9QSVhFTF9GT1JNQVRfQkdSAGVycm9yAEVycm9yIGFsbG9jYXRpbmcgbWVtb3J5LgoARXJyb3I6IHVuYWJsZSB0byBvcGVuIGZpbGUgJyVzJXMnIGZvciByZWFkaW5nLgoARXJyb3I6IFVuYWJsZSB0byBvcGVuIGZpbGUgJyVzJyBmb3Igd3JpdGluZy4KACVkAHJiAE91dCBvZiBtZW1vcnkhIQoARXJyb3Igb3BlbmluZyBmaWxlICclcyc6IABGcmVhayBmZWF0dXJlcyAtICVkAHJiADogADogADogADogADogAEV4dHJhY3QgRmVhdHVyZXMAOiAAIGxpbmUgADogADogAEFVVE9fT1RTVQBCYXJjb2RlIG1hdGNoaW5nIGNvdWxkIG5vdCBmaW5kIGNvcnJlY3QgYmFyY29kZSBsb2NhdG9yIHBhdHRlcm4uAFBhdHRlcm4gRGF0YSByZWFkIGVycm9yISEKAEFSX1BJWEVMX0ZPUk1BVF9CR1JBAERpc3RvcnRpb24gZmFjdG9yID0gJWYgJWYgJWYgJWYgJWYgJWYKAHJiAHJiAEVycm9yIGljcEdldFhjX2Zyb21fWHdfYnlfTWF0WHcyWGMKAEVycm9yIDU6IGljcEdldEluaXRYdzJYYwoAJWQAQVJfUElYRUxfRk9STUFUX1JHQkEAWyVzXSAARXJyb3Igb3BlbmluZyAnJXMnLgoARXJyb3IgcmVhZGluZyBpbWFnZVNldC4KAHJiACVzAE91dCBvZiBtZW1vcnkhIQoAUmVhZCBlcnJvciEhCgAlcyVzCgBFcnJvciB3aGlsZSBhZGRpbmcgcmVmZXJlbmNlIGRhdGEgc2V0OiBrcG1HZW5SZWZEYXRhU2V0KCkgZmFpbGVkLgoAQ2FuJ3Qgb3BlbiBKUEVHIGZpbGUgJyVzJwoAUHlyYW1pZCBpcyBub3QgYWxsb2NhdGVkAEltYWdlIGlzIHRvbyBzbWFsbAB3cCBtdXN0IGJlIGF0IGxlYXN0IDEAU3RlcCBzaXplIG11c3QgYmUgZXF1YWwgdG8gd2lkdGggZm9yIG5vdwBTb3VyY2Ugd2lkdGggbXVzdCBiZSBldmVuAFslc10gWyVzXSBbJXNdIDogRm91bmQgJWQgZmVhdHVyZXMAeCBvdXQgb2YgcmFuZ2UAOiAAV2lkdGggY2Fubm90IGJlIHplcm8AQ2xvY2sgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQAQVVUT19BREFQVElWRQBCYXJjb2RlIG1hdGNoaW5nIGVycm9yIGRldGVjdGlvbi9jb3JyZWN0aW9uIGZvdW5kIHVucmVjb3ZlcmFibGUgZXJyb3IuAEVycm9yIHJlYWRpbmcgcGF0dGVybiBmaWxlICclcycuCgBBUl9QSVhFTF9GT1JNQVRfQUJHUgBEaXN0b3J0aW9uIGZhY3RvciA9ICVmICVmICVmICVmICVmCgBFcnJvciAoJWQpOiB1bmFibGUgdG8gb3BlbiBjYW1lcmEgcGFyYW1ldGVycyBmaWxlICIlcyIgZm9yIHJlYWRpbmcuCgBFcnJvcjogVW5hYmxlIHRvIG9wZW4gZmlsZSAnJXMnIGZvciByZWFkaW5nLgoARXJyb3IgPSAlZgoARXJyb3IgNjogaWNwR2V0SW5pdFh3MlhjCgBFcnJvciBwcm9jZXNzaW5nIG11bHRpbWFya2VyIGNvbmZpZyBmaWxlICclcyc6IEZpcnN0IGxpbmUgbXVzdCBiZSBudW1iZXIgb2YgbWFya2VyIGNvbmZpZ3MgdG8gcmVhZC4KAEFSX1BJWEVMX0ZPUk1BVF9CR1JBAEVycm9yIGNyZWF0aW5nIGZ1bGwgZmlsZSBwYXRoIGZyb20gJyVzJyBhbmQgJyVzJwBJbWFnZXNldCBjb250YWlucyAlZCBpbWFnZXMuCgBFcnJvcjogVW5hYmxlIHRvIG9wZW4gZmlsZSAnJXMnIGZvciByZWFkaW5nLgoAJWYAICAgICAgICAgSW1hZ2VTaXplID0gJTdkW3BpeGVsXQoAd2IAAD09PT09PT09PSAlZCA9PT09PT09PT09PQoAJXMlcwoAQXNzZXJ0aW9uIGBtSW1hZ2VzLnNpemUoKSA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBoZWlnaHQgPj0gNWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGhlaWdodCA+PSAxYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgeCA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZHN0ICE9IDBgIGZhaWxlZCBpbiAAIElORk8gIABBc3NlcnRpb24gYHggPCBtTWF4WGAgZmFpbGVkIGluIABQeXJhbWlkIGlzIE5VTEwAQXNzZXJ0aW9uIGBoZWlnaHQgPiAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbVN0b3BUaW1lID49IDBgIGZhaWxlZCBpbiAAQVVUT19CUkFDS0VUSU5HAE1hdGNoaW5nIGNvbmZpZGVuY2UgY3V0b2ZmIHZhbHVlIG5vdCByZWFjaGVkLgAlcyVzCgBBUl9QSVhFTF9GT1JNQVRfTU9OTwBEaXN0b3J0aW9uIGZhY3RvciA9ICVmICVmICVmICVmCgBFcnJvciAoJWQpOiB1bmFibGUgdG8gZGV0ZXJtaW5lIGZpbGUgbGVuZ3RoLgBFcnJvciBpY3AyR2V0VFMKAEVycm9yIDc6IGljcEdldEluaXRYdzJYYwoAT3V0IG9mIG1lbW9yeSEhCgBBUl9QSVhFTF9GT1JNQVRfQUJHUgBFcnJvciBpbiBvcGVuaW5nICclcycgaW4gemlwZmlsZS4KAEZhbGxpbmcgYmFjayB0byByZWFkaW5nICclcyVzJyBpbiBBUlRvb2xLaXQgdjQueCBmb3JtYXQuCgBFcnJvciByZWFkaW5nIEpQRUcgZmlsZS4KACVmICVmICVmICVmAEV4dHJhY3RlZCBmZWF0dXJlcyA9ICU3ZFtwaXhlbF0KAEVycm9yIHNhdmluZyBmZWF0dXJlIHNldDogZXJyb3Igd3JpdGluZyBkYXRhLgoAT3V0IG9mIG1lbW9yeSEhCgBFcnJvciB3aGlsZSBhZGRpbmcgcmVmZXJlbmNlIGRhdGEgc2V0OiBrcG1NZXJnZVJlZkRhdGFTZXQoKSBmYWlsZWQuCgAATGFwbGFjaWFuIHB5cmFtaWQgaGFzIG5vdCBiZWVuIGFsbG9jYXRlZABBc3NlcnRpb24gYGltYWdlLnR5cGUoKSA9PSBJTUFHRV9VSU5UOGAgZmFpbGVkIGluIABocCBtdXN0IGJlIGF0IGxlYXN0IDEAeCBtdXN0IGJlIHBvc2l0aXZlAERlc3RpbmF0aW9uIGlzIE5VTEwAQnVpbGQgSW5kZXgAQXNzZXJ0aW9uIGB5ID49IG1NaW5ZYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgc3RvcmUuc2l6ZSgpID09IHBvaW50cy5zaXplKClgIGZhaWxlZCBpbiAASGVpZ2h0IGNhbm5vdCBiZSB6ZXJvAENsb2NrIGhhcyBub3QgYmVlbiBzdG9wcGVkAEGgPwvDDUURAADcEwAA6hUAAI8YAABGHAAATGFiZWxpbmcgdGhyZXNob2xkIG1vZGUgc2V0IHRvICVzLgoATWF4aW11bSBhbGxvd2FibGUgcG9zZSBlcnJvciBleGNlZWRlZC4AAEFSX1BJWEVMX0ZPUk1BVF9BUkdCAEVycm9yOiBzdXBwbGllZCBmaWxlIGRvZXMgbm90IGFwcGVhciB0byBiZSBhbiBBUlRvb2xLaXQgY2FtZXJhIHBhcmFtZXRlciBmaWxlLgoAJWxsdSVjAEFSX1BJWEVMX0ZPUk1BVF9NT05PAEVycm9yIGluIG9wZW5pbmcgJyVzJyBmb3IgcmVhZGluZwoAd2IARXJyb3IgcmVhZGluZyBKUEVHIGZpbGUgaGVhZGVyLgoAIEZpbHRlcmVkIGZlYXR1cmVzID0gJTdkW3BpeGVsXQoAJWQAa3BtRGVsZXRlUmVmRGF0YVNldCgpOiBOVUxMIHJlZkRhdGFTZXRQdHIxL3JlZkRhdGFTZXRQdHIyLgoAQ2FuJ3QgcmVhZCBKUEVHIGZpbGUgJyVzJwoAQXNzZXJ0aW9uIGBweXJhbWlkLT5udW1PY3RhdmVzKCkgPiAwYCBmYWlsZWQgaW4gAEltYWdlIG11c3QgYmUgZ3JheXNjYWxlAEFzc2VydGlvbiBgaSsxK2NodW5rX3NpemUgPCB3aWR0aGAgZmFpbGVkIGluIABBc3NlcnRpb24gYHggPCBtR3JhZGllbnRzW29jdGF2ZSptTnVtU2NhbGVzUGVyT2N0YXZlK3NjYWxlXS53aWR0aCgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgc3JjICE9IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBweXJhbWlkYCBmYWlsZWQgaW4gAHkgb3V0IG9mIHJhbmdlAEZlYXR1cmUgc3RvcmUgaGFzIG5vdCBiZWVuIGFsbG9jYXRlZABBc3NlcnRpb24gYHN0ZXAgPj0gd2lkdGhgIGZhaWxlZCBpbiAAWyVzXSBbJXNdIFslc10gOiAlczogJWYgbXMARXJyb3I6IFVuc3VwcG9ydGVkIHBpeGVsIGZvcm1hdCAoJWQpIHJlcXVlc3RlZC4KAE11bHRpLW1hcmtlciBwb3NlIGVycm9yIHZhbHVlIGV4Y2VlZGVkLgBBUl9QSVhFTF9GT1JNQVRfMnZ1eQAlNy41ZiAARXJyb3IgKCVkKTogdW5hYmxlIHRvIHJlYWQgZnJvbSBmaWxlLgBFcnJvciBwcm9jZXNzaW5nIG11bHRpbWFya2VyIGNvbmZpZyBmaWxlICclcyc6IHBhdHRlcm4gJyVzJyBzcGVjaWZpZWQgaW4gbXVsdGltYXJrZXIgY29uZmlndXJhdGlvbiB3aGlsZSBpbiBiYXJjb2RlLW9ubHkgbW9kZS4KAEFSX1BJWEVMX0ZPUk1BVF9BUkdCAEVycm9yIGluIHJlYWRpbmcgJyVzJy4KAEVycm9yOiB1bmFibGUgdG8gb3BlbiBmaWxlICclcycgZm9yIHdyaXRpbmcuCgANJTRkLyU0ZC4ACiMjIyBTdXJmYWNlIE5vLiVkICMjIwoAa3BtRGVsZXRlUmVmRGF0YVNldCgpOiBOVUxMIHJlZkRhdGFTZXRQdHIuCgBrcG1TZXRSZWZEYXRhU2V0KCk6IE5VTEwga3BtSGFuZGxlL3JlZkRhdGFTZXQuCgBQeXJhbWlkIGRvZXMgbm90IGNvbnRhaW4gYW55IGxldmVscwBBc3NlcnRpb24gYGltYWdlLmNoYW5uZWxzKCkgPT0gMWAgZmFpbGVkIGluIABFeHRlbmRpbmcgYmV5b25kIHRoZSB3aWR0aCBvZiB0aGUgaW1hZ2UAeCBtdXN0IGJlIGxlc3MgdGhhbiB0aGUgaW1hZ2Ugd2lkdGgAU291cmNlIGlzIE5VTEwAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvbWF0Y2hlcnMvdmlzdWFsX2RhdGFiYXNlLmgAQXNzZXJ0aW9uIGB5IDwgbU1heFlgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBudW1fcG9pbnRzID09IHBvaW50cy5zaXplKClgIGZhaWxlZCBpbiAAU3RlcCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgd2lkdGgAIElORk8gIABB9MwAC70gAQAAAAEAAAABAAAAAAAAAP//////////////////////////AAAAAAEAAAABAAAAAQAAAAAAAAD/////UmVqZWN0ZWQgZnJlcXVlbnRseSBtaXNyZWNvZ25pc2VkIG1hdHJpeCBtYXJrZXIuAEFSX1BJWEVMX0ZPUk1BVF95dXZzAEVycm9yOiBzdXBwbGllZCBidWZmZXIgZG9lcyBub3QgYXBwZWFyIHRvIGJlIEFSVG9vbEtpdCBjYW1lcmEgcGFyYW1ldGVycy4KAEVycm9yIHByb2Nlc3NpbmcgbXVsdGltYXJrZXIgY29uZmlnIGZpbGUgJyVzJzogVW5hYmxlIHRvIGRldGVybWluZSBkaXJlY3RvcnkgbmFtZS4KAEFSX1BJWEVMX0ZPUk1BVF8ydnV5AEVycm9yIGluIHdyaXRpbmcgJyVzJyBpbiB0aGUgemlwZmlsZS4KAEVycm9yIHNhdmluZyBpbWFnZSBzZXQ6IGVycm9yIHdyaXRpbmcgZGF0YS4KAAoAJXMAa3BtU2F2ZVJlZkRhdGFTZXQoKTogTlVMTCBmaWxlbmFtZS9yZWZEYXRhU2V0LgoAa3BtU2V0UmVmRGF0YVNldCgpOiByZWZEYXRhU2V0LgoAQXNzZXJ0aW9uIGBkeW5hbWljX2Nhc3Q8Y29uc3QgQmlub21pYWxQeXJhbWlkMzJmKj4ocHlyYW1pZClgIGZhaWxlZCBpbiAASW1hZ2UgbXVzdCBoYXZlIDEgY2hhbm5lbABBc3NlcnRpb24gYGJ1Y2tldFswXS5maXJzdCA+PSBidWNrZXRbbl0uZmlyc3RgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB5ID49IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzcmNfd2lkdGggPiAwYCBmYWlsZWQgaW4gACBsaW5lIABBc3NlcnRpb24gYGFuZ2xlID4gLVBJYCBmYWlsZWQgaW4gAFNob3VsZCBiZSBzYW1lIHNpemUAQXNzZXJ0aW9uIGBjaGFubmVscyA+IDBgIGZhaWxlZCBpbiAAQXV0byB0aHJlc2hvbGQgKGJyYWNrZXQpIG1hcmtlciBjb3VudHMgLVslM2Q6ICUzZF0gWyUzZDogJTNkXSBbJTNkOiAlM2RdKy4KAEFSX1BJWEVMX0ZPUk1BVF9SR0JfNTY1AEZpZWxkLW9mLXZpZXcgdmVydGljYWwgPSAlLjFmLCBob3Jpem9udGFsID0gJS4xZiBkZWdyZWVzLCBhc3BlY3QgcmF0aW8gPSAlLjNmCgBFcnJvciAoJWQpOiB1bmFibGUgdG8gb3BlbiBleHRlcm5hbCBwYXJhbWV0ZXJzIGZpbGUgIiVzIiBmb3Igd3JpdGluZy4KAEVycm9yIHByb2Nlc3NpbmcgbXVsdGltYXJrZXIgY29uZmlnIGZpbGUgJyVzJzogVW5hYmxlIHRvIGxvYWQgcGF0dGVybiAnJXMnLgoAQVJfUElYRUxfRk9STUFUX3l1dnMARXJyb3IgaW4gY2xvc2luZyAlcyBpbiB0aGUgemlwZmlsZS4KAE1heCBmZWF0dXJlID0gJWQKACAgUmVhZCBJbWFnZVNldC4KAEVycm9yIHNhdmluZyBLUE0gZGF0YTogdW5hYmxlIHRvIG9wZW4gZmlsZSAnJXMlcyVzJyBmb3Igd3JpdGluZy4KAE91dCBvZiBtZW1vcnkhIQoAT25seSBiaW5vbWlhbCBweXJhbWlkIGlzIHN1cHBvcnRlZABBc3NlcnRpb24gYG1QeXJhbWlkLnNpemUoKSA9PSBtTnVtT2N0YXZlcyptTnVtU2NhbGVzUGVyT2N0YXZlYCBmYWlsZWQgaW4gAG50aF9lbGVtZW50IGZhaWxlZAB5IG11c3QgYmUgcG9zaXRpdmUAV2lkdGggbXVzdCBiZSBwb3NpdGl2ZQA6IABhbmdsZSBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGBvY3RhdmUgPj0gMGAgZmFpbGVkIGluIABOdW1iZXIgb2YgY2hhbm5lbHMgY2Fubm90IGJlIHplcm8AQXV0byB0aHJlc2hvbGQgKGJyYWNrZXQpIGFkanVzdGVkIHRocmVzaG9sZCB0byAlZC4KAEFSX1BJWEVMX0ZPUk1BVF9SR0JBXzU1NTEARXJyb3IgKCVkKTogdW5hYmxlIHRvIG9wZW4gZXh0ZXJuYWwgcGFyYW1ldGVycyBmaWxlICIlcyIgZm9yIHJlYWRpbmcuCgAlbGYAQVJfUElYRUxfRk9STUFUX1JHQl81NjUARXJyb3IgaW4gY2xvc2luZyAnJXMnLgoAJTNkOiAoJTNkLCUzZCkgOiAlZiBtaW49JWYgbWF4PSVmLCBzZD0lZgoARXJyb3Igb3BlbmluZyBmaWxlICclcy5pc2V0Jy4KAC4AcG9pbnRzLSVkCgBBc3NlcnRpb24gYGQudHlwZSgpID09IElNQUdFX0YzMmAgZmFpbGVkIGluIABQeXJhbWlkIGhhcyBub3QgYmVlbiBhbGxvY2F0ZWQgeWV0AEFzc2VydGlvbiBgcFswXSA+IHBtMVstMV1gIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB5IDwgbUdyYWRpZW50c1tvY3RhdmUqbU51bVNjYWxlc1Blck9jdGF2ZStzY2FsZV0uaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzcmNfaGVpZ2h0ID4gMGAgZmFpbGVkIGluIABQeXJhbWlkIGlzIE5VTEwAQXNzZXJ0aW9uIGBhbmdsZSA8PSBQSWAgZmFpbGVkIGluIAAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvZ2F1c3NpYW5fc2NhbGVfc3BhY2VfcHlyYW1pZC5oAEFzc2VydGlvbiBgbURhdGEuZ2V0KClgIGZhaWxlZCBpbiAAQXV0byB0aHJlc2hvbGQgKCVzKSBhZGp1c3RlZCB0aHJlc2hvbGQgdG8gJWQuCgBBUl9QSVhFTF9GT1JNQVRfUkdCQV80NDQ0AFslIC4zZiAlIC4zZiAlIC4zZl0gWyUgNi4xZl0KAEVycm9yICglZCk6IHVuYWJsZSB0byBvcGVuIG9wdGljYWwgcGFyYW1ldGVycyBmaWxlICIlcyIgZm9yIHdyaXRpbmcuCgBFcnJvciBwcm9jZXNzaW5nIG11bHRpbWFya2VyIGNvbmZpZyBmaWxlICclcycsIG1hcmtlciBkZWZpbml0aW9uICUzZDogRmlyc3QgbGluZSBtdXN0IGJlIHBhdHRlcm4gd2lkdGguCgBBUl9QSVhFTF9GT1JNQVRfUkdCQV81NTUxAC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAICAgIGVuZC4KAABrcG1TZXRSZWZEYXRhU2V0RmlsZSgpOiBOVUxMIGtwbUhhbmRsZS9maWxlbmFtZS4KAE9ubHkgRjMyIGltYWdlcyBzdXBwb3J0ZWQAQXNzZXJ0aW9uIGBpbWFnZS53aWR0aCgpID09IG1QeXJhbWlkWzBdLndpZHRoKClgIGZhaWxlZCBpbiAAU2hvdWxkIGJlIG1heGltYQB5IG11c3QgYmUgbGVzcyB0aGFuIHRoZSBpbWFnZSBoZWlnaHQASGVpZ2h0IG11c3QgYmUgcG9zaXRpdmUAQXNzZXJ0aW9uIGBkZXRlY3RvcmAgZmFpbGVkIGluIABBc3NlcnRpb24gYHNjYWxlID49IG1NaW5TY2FsZWAgZmFpbGVkIGluIABPY3RhdmUgbXVzdCBiZSBwb3NpdGl2ZQBEYXRhIHBvaW50ZXIgaXMgTlVMTABtZWRpYW4AQVJfUElYRUxfRk9STUFUXzQyMHYARXJyb3IgKCVkKTogdW5hYmxlIHRvIG9wZW4gb3B0aWNhbCBwYXJhbWV0ZXJzIGZpbGUgIiVzIiBmb3IgcmVhZGluZy4KACVsZiAlbGYgJWxmICVsZgBBUl9QSVhFTF9GT1JNQVRfUkdCQV80NDQ0ACUzZCwgJTNkOiBtYXhfc2ltID0gJWYKACAgUmVhZCBGZWF0dXJlU2V0LgoARXJyb3Igc2F2aW5nIEtQTSBkYXRhOiBlcnJvciB3cml0aW5nIGRhdGEuCgBDYW5ub3QgZmluZCB0aGUgcGFnZSBmb3Igc2tpcHBpbmcuCgBBc3NlcnRpb24gYGltMS50eXBlKCkgPT0gSU1BR0VfRjMyYCBmYWlsZWQgaW4gAEltYWdlIG9mIHdyb25nIHNpemUgZm9yIHB5cmFtaWQAQXNzZXJ0aW9uIGBwWzBdID4gcG0xWzBdYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZy5jaGFubmVscygpID09IDJgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzcmNfc3RlcCA+IDBgIGZhaWxlZCBpbiAARGV0ZWN0b3IgaXMgTlVMTABzY2FsZSBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGBvY3RhdmUgPCBtTnVtT2N0YXZlc2AgZmFpbGVkIGluIABVbmFibGUgdG8gYWxsb2NhdGUgaW1hZ2UgZGF0YQBPdHN1AEFSX1BJWEVMX0ZPUk1BVF80MjBmACVmICVmAEFSX1BJWEVMX0ZPUk1BVF80MjB2ACU3LjRmIABFcnJvciBvcGVuaW5nIGZpbGUgJyVzLmZzZXQnLgoAa3BtTG9hZFJlZkRhdGFTZXQoKTogTlVMTCBmaWxlbmFtZS9yZWZEYXRhU2V0UHRyLgoAa3BtTWF0Y2hpbmcoKTogTlVMTCBrcG1IYW5kbGUvaW5JbWFnZUx1bWEuCgBBc3NlcnRpb24gYGltMi50eXBlKCkgPT0gSU1BR0VfRjMyYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaW1hZ2UuaGVpZ2h0KCkgPT0gbVB5cmFtaWRbMF0uaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBwWzBdID4gcG0xWzFdYCBmYWlsZWQgaW4gAE51bWJlciBvZiBjaGFubmVscyBzaG91bGQgYmUgMgBTdGVwIG11c3QgYmUgcG9zaXRpdmUAQXNzZXJ0aW9uIGBweXJhbWlkLT5pbWFnZXMoKS5zaXplKCkgPiAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgc2NhbGUgPCBtTWF4U2NhbGVgIGZhaWxlZCBpbiAAT2N0YXZlIG11c3QgYmUgbGVzcyB0aGFuIG51bWJlciBvZiBvY3RhdmVzAEludmFsaWQgaW1hZ2UgdHlwZQABAAAACQAAAAUAAAAEAAAAAwAAAAIAQcPtAAuBfgEAAQEBAAIE//8FAwEAAv8GB/8DAQICAwIDAgMDAP8EBgcF/wEE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M2QsIGFmdDolM2QsIGVycm9yID0gJWYKAEFzc2VydGlvbiBgZC5jaGFubmVscygpID09IDFgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBkc3QudHlwZSgpID09IElNQUdFX0YzMmAgZmFpbGVkIGluIABBc3NlcnRpb24gYHBbMF0gPiBwWy0xXWAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1heF9oZWlnaHQgPiAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZHN0X3dpZHRoID4gMGAgZmFpbGVkIGluIABQeXJhbWlkIGlzIGVtcHR5AEFzc2VydGlvbiBgc2l6ZSA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzY2FsZSA+PSAwYCBmYWlsZWQgaW4gAGFyVXRpbEdldFBpeGVsRm9ybWF0TmFtZTogRXJyb3IsIHVucmVjb2duaXNlZCBwaXhlbCBmb3JtYXQgKCVkKS4KAEFSX1BJWEVMX0ZPUk1BVF9OVjIxAG1yawBFcnJvciBsb2FkaW5nIEtQTSBkYXRhOiBlcnJvciByZWFkaW5nIGRhdGEuCgBKUEVHIGZpbGUgaGFzIHVuc3VwcG9ydGVkICVkLWNvbXBvbmVudCBwaXhlbHMKAE9ubHkgc2luZ2xlIGNoYW5uZWwgaW1hZ2VzIHN1cHBvcnRlZABEZXN0aW5hdGlvbiBpbWFnZSBzaG91bGQgYmUgYSBmbG9hdABBc3NlcnRpb24gYHBbMF0gPiBwWzFdYCBmYWlsZWQgaW4gAE1heGltdW0gYmluIHNob3VsZCBiZSBwb3NpdGl2ZQBBc3NlcnRpb24gYGRzdF9zdGVwID4gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYHB5cmFtaWQtPmltYWdlcygpWzBdLndpZHRoKCkgPT0gZGV0ZWN0b3ItPndpZHRoKClgIGZhaWxlZCBpbiAAc2l6ZSBtdXN0IGJlIHBvc2l0aXZlAFNjYWxlIG11c3QgYmUgcG9zaXRpdmUAT3V0IG9mIG1lbW9yeS4KAGFyVmlkZW9VdGlsR2V0UGl4ZWxGb3JtYXROYW1lOiBFcnJvciwgdW5yZWNvZ25pc2VkIHBpeGVsIGZvcm1hdCAoJWQpLgoARXJyb3Igb3BlbmluZyBmaWxlICclcy5tcmsnLgoAa3BtQ2hhbmdlUGFnZU5vT2ZSZWZEYXRhU2V0KCk6IE5VTEwgcmVmRGF0YVNldC4KAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUAQXNzZXJ0aW9uIGBpbTEuY2hhbm5lbHMoKSA9PSAxYCBmYWlsZWQgaW4gAFVua25vd24gaW1hZ2UgdHlwZQBBc3NlcnRpb24gYHBbMF0gPiBwcDFbLTFdYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaGlzdCAhPSBOVUxMYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKHNyY193aWR0aCUyKSA9PSAxYCBmYWlsZWQgaW4gAFB5cmFtaWQgYW5kIGRldGVjdG9yIHNpemUgbWlzbWF0Y2gAQXNzZXJ0aW9uIGBtUmVmSW1hZ2VXaWR0aCA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzY2FsZSA8IG1OdW1TY2FsZXNQZXJPY3RhdmVgIGZhaWxlZCBpbiAAJSUlMDJ4ACVmICVmICVmICVmAEFzc2VydGlvbiBgaW0yLmNoYW5uZWxzKCkgPT0gMWAgZmFpbGVkIGluIABVbnN1cHBvcnRlZCBpbWFnZSB0eXBlAEFzc2VydGlvbiBgcFswXSA+IHBwMVswXWAgZmFpbGVkIGluIAAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvb3JpZW50YXRpb25fYXNzaWdubWVudC5oAFNvdXJjZSB3aWR0aCBtdXN0IGJlIG9kZABBc3NlcnRpb24gYHB5cmFtaWQtPmltYWdlcygpWzBdLmhlaWdodCgpID09IGRldGVjdG9yLT5oZWlnaHQoKWAgZmFpbGVkIGluIAB3aWR0aCBtdXN0IGJlIHBvc2l0aXZlAFNjYWxlIG11c3QgYmUgbGVzcyB0aGFuIG51bWJlciBvZiBzY2FsZSBwZXIgb2N0YXZlAC9wcm9jL3NlbGYvZXhlAFRyYW5zZm9ybWF0aW9uIG1hdHJpeCByZWFkIGVycm9yISEKAEFzc2VydGlvbiBgZC53aWR0aCgpID09IGltMi53aWR0aCgpYCBmYWlsZWQgaW4gAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUAQXNzZXJ0aW9uIGBwWzBdID4gcHAxWzFdYCBmYWlsZWQgaW4gAEhpc3RvZ3JhbSBwb2ludGVyIGlzIE5VTEwAQXNzZXJ0aW9uIGAoY2h1bmtfc2l6ZSUyKT09MGAgZmFpbGVkIGluIABBc3NlcnRpb24gYGFzc2lnbm1lbnQuc2l6ZSgpID09IG51bV9pbmRpY2VzYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbVJlZkltYWdlSGVpZ2h0ID4gMGAgZmFpbGVkIGluIABPY3RhdmUgb3V0IG9mIHJhbmdlACVzJXMKAGpwZwBJbWFnZXMgbXVzdCBoYXZlIHRoZSBzYW1lIHdpZHRoAEFzc2VydGlvbiBgIWlzaW5mKHVbMF0pYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKGZiaW4rMC41ZikgPiAwICYmIChmYmluLTAuNWYpIDwgbnVtX2JpbnNgIGZhaWxlZCBpbiAAVW50ZXN0ZWQgYmVoYXZpb3IgZm9yIG9kZCBjaHVuayBzaXplAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL21hdGNoZXJzL2JpbmFyeV9oaWVyYXJjaGljYWxfY2x1c3RlcmluZy5oAGhlaWdodCBtdXN0IGJlIHBvc2l0aXZlAFNjYWxlIG91dCBvZiByYW5nZQAAQXNzZXJ0aW9uIGBkLmhlaWdodCgpID09IGltMi5oZWlnaHQoKWAgZmFpbGVkIGluIABJTkYARGVjaW1hbCBiaW4gcG9zaXRpb24gaW5kZXggb3V0IG9mIHJhbmdlAFdpZHRoIGlzIHplcm8AQXNzaWdubWVudCBzaXplIHdyb25nAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL21hdGNoZXJzL2hvdWdoX3NpbWlsYXJpdHlfdm90aW5nLmgAQXNzZXJ0aW9uIGAoaW50KXN0ZDo6Zmxvb3IoeCkgPT0gKGludCl4YCBmYWlsZWQgaW4gAC8uLi9zaGFyZS8lcwBJbWFnZXMgbXVzdCBoYXZlIHRoZSBzYW1lIGhlaWdodABBc3NlcnRpb24gYCFpc2luZih1WzFdKWAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1hZ25pdHVkZSA+PSAwYCBmYWlsZWQgaW4gAEhlaWdodCBpcyB6ZXJvAEFzc2VydGlvbiBgYXNzaWdubWVudFtpXSAhPSAtMWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGluZGV4ID49IDBgIGZhaWxlZCBpbiAAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL2ludGVycG9sYXRlLmgASE9NRQBBc3NlcnRpb24gYGltMS53aWR0aCgpID09IGltMi53aWR0aCgpYCBmYWlsZWQgaW4gAE1hZ25pdHVkZSBjYW5ub3QgYmUgbmVnYXRpdmUAU3RlcCBpcyB6ZXJvAEFzc2lnbm1lbnQgaXMgaW52YWxpZABpbmRleCBvdXQgb2YgcmFuZ2UAZmxvb3IoKSBhbmQgY2FzdCBub3QgdGhlIHNhbWUAL3Byb2Mvc2VsZi9jbWRsaW5lAEFzc2VydGlvbiBgaW0xLmhlaWdodCgpID09IGltMi5oZWlnaHQoKWAgZmFpbGVkIGluIAAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvaGFycmlzLWlubGluZS5oAEFzc2VydGlvbiBgbnVtX2JpbnMgPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYChpPj4xKSA8IHN0ZDo6Y2VpbCgoc3JjX2hlaWdodC0xKS8yLmYpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYXNzaWdubWVudFtpXSA8IG51bV9pbmRpY2VzYCBmYWlsZWQgaW4gAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUAQXNzZXJ0aW9uIGAoaW50KXN0ZDo6Zmxvb3IoeSkgPT0gKGludCl5YCBmYWlsZWQgaW4gAHJiAERvRyBQeXJhbWlkAE91dCBvZiByYW5nZQBOdW1iZXIgYmlucyBtdXN0IGJlIHBvc2l0aXZlAEluZGV4IGlzIG91dCBvZiBib3VuZHMAQXNzaWdubWVudCBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGBiaW5YID49IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB5cCA+PSAwICYmIHlwIDwgaGVpZ2h0YCBmYWlsZWQgaW4gACVzOiAlcwoATm9uLW1heCBzdXBwcmVzc2lvbgBBc3NlcnRpb24gYHcxID49IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBpbWFnZS50eXBlKCkgPT0gSU1BR0VfVUlOVDhgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBpbmRpY2VzW2Fzc2lnbm1lbnRbaV1dIDwgbnVtX2ZlYXR1cmVzYCBmYWlsZWQgaW4gAGJpblggb3V0IG9mIHJhbmdlAHlwIG91dCBvZiBib3VuZHMAVW5hYmxlIHRvIGRldGVybWluZSBwcm9jZXNzIG5hbWUAU3VicGl4ZWwAdzEgbXVzdCBiZSBwb3NpdGl2ZQBPbmx5IGdyYXkgc2NhbGUgaW1hZ2VzIGFyZSBzdXBwb3J0ZWQAQXNzZXJ0aW9uIGBpdC0+c2Vjb25kLnNpemUoKSAhPSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYmluWCA8IG1OdW1YQmluc2AgZmFpbGVkIGluIABBc3NlcnRpb24gYHlwX3BsdXNfMSA+PSAwICYmIHlwX3BsdXNfMSA8IGhlaWdodGAgZmFpbGVkIGluIAAlcyVzAHBydW5lRmVhdHVyZXMAQXNzZXJ0aW9uIGB3MiA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgb2N0YXZlIDwgbU51bU9jdGF2ZXNgIGZhaWxlZCBpbiAAQ2x1c3RlciBtdXN0IGhhdmUgYXRsZWFzZXQgMSBmZWF0dXJlAEFzc2VydGlvbiBgYmluWSA+PSAwYCBmYWlsZWQgaW4gAHlwX3BsdXNfMSBvdXQgb2YgYm91bmRzAC92YXIvY2FjaGUARmluZCBPcmllbnRhdGlvbnMAQXNzZXJ0aW9uIGBkc3RbaV0gPj0gLTI1ODA2NGAgZmFpbGVkIGluIAB3MiBtdXN0IGJlIHBvc2l0aXZlAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2RldGVjdG9ycy9nYXVzc2lhbl9zY2FsZV9zcGFjZV9weXJhbWlkLmgAQXNzZXJ0aW9uIGBtSyA9PSBtQ2VudGVycy5zaXplKClgIGZhaWxlZCBpbiAAYmluWSBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGB4cCA+PSAwICYmIHhwIDwgd2lkdGhgIGZhaWxlZCBpbiAALy5jYWNoZQBBc3NlcnRpb24gYGltMC5oZWlnaHQoKSA9PSBpbTEuaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBkc3RbaV0gPD0gMjU4MDY0YCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYjEgPj0gMCAmJiBiMSA8IG51bV9iaW5zYCBmYWlsZWQgaW4gAE9jdGF2ZSBvdXQgb2YgcmFuZ2UAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvbWF0Y2hlcnMva21lZG9pZHMuaABBc3NlcnRpb24gYGJpblkgPCBtTnVtWUJpbnNgIGZhaWxlZCBpbiAAeHAgb3V0IG9mIGJvdW5kcwAlcy8lcwBIZWlnaHQgaXMgaW5jb25zaXN0ZW50AEFzc2VydGlvbiBgZHN0W2ldIDw9IDQxMjkwMjRgIGZhaWxlZCBpbiAAYjEgYmluIGluZGV4IG91dCBvZiByYW5nZQBBc3NlcnRpb24gYHNjYWxlIDwgbU51bVNjYWxlc1Blck9jdGF2ZWAgZmFpbGVkIGluIABrIHNob3VsZCBtYXRjaCB0aGUgbnVtYmVyIG9mIGNsdXN0ZXIgY2VudGVycwBBc3NlcnRpb24gYGJpbkFuZ2xlID49IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB4cF9wbHVzXzEgPj0gMCAmJiB4cF9wbHVzXzEgPCB3aWR0aGAgZmFpbGVkIGluIAAvdmFyL2xpYgBBc3NlcnRpb24gYGltMC5oZWlnaHQoKSA9PSBpbTIuaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBkc3RbaV0gPj0gLTQxMjkwMjRgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBiMiA+PSAwICYmIGIyIDwgbnVtX2JpbnNgIGZhaWxlZCBpbiAAU2NhbGUgb3V0IG9mIHJhbmdlAEFzc2VydGlvbiBgbnVtX2ZlYXR1cmVzID4gMGAgZmFpbGVkIGluIABiaW5BbmdsZSBvdXQgb2YgcmFuZ2UAeHBfcGx1c18xIG91dCBvZiBib3VuZHMALy5jb25maWcAQXNzZXJ0aW9uIGAoaW0xLmhlaWdodCgpPj4xKSA9PSBpbTIuaGVpZ2h0KClgIGZhaWxlZCBpbiAAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQBiMiBiaW4gaW5kZXggb3V0IG9mIHJhbmdlAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUATnVtYmVyIG9mIGZlYXR1cmVzIG11c3QgYmUgcG9zaXRpdmUAQXNzZXJ0aW9uIGBiaW5BbmdsZSA8IG1OdW1BbmdsZUJpbnNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB3MCA+PSAwICYmIHcwIDw9IDEuMDAwMWAgZmFpbGVkIGluIABUTVBESVIAQXNzZXJ0aW9uIGAoaW0wLmhlaWdodCgpPj4xKSA9PSBpbTEuaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBneHggPD0gNDEyOTAyNGAgZmFpbGVkIGluIABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAEFzc2VydGlvbiBgbnVtX2luZGljZXMgPD0gbnVtX2ZlYXR1cmVzYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYmluU2NhbGUgPj0gMGAgZmFpbGVkIGluIABPdXQgb2YgcmFuZ2UAL3RtcABBc3NlcnRpb24gYChpbTAuaGVpZ2h0KCk+PjEpID09IGltMi5oZWlnaHQoKWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGd4eCA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgcm93IDwgbUhlaWdodGAgZmFpbGVkIGluIABNb3JlIGluZGljZXMgdGhhbiBmZWF0dXJlcwBiaW5TY2FsZSBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGB3MSA+PSAwICYmIHcxIDw9IDEuMDAwMWAgZmFpbGVkIGluIABFcnJvciBsb29raW5nIGZvciByZXNvdXJjZXMgZGlyZWN0b3J5IHBhdGgAQXNzZXJ0aW9uIGBtQnVja2V0cy5zaXplKCkgPT0gbU51bUJ1Y2tldHNYYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZ3l5IDw9IDQxMjkwMjRgIGZhaWxlZCBpbiAAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZnJhbWV3b3JrL2ltYWdlLmgAQXNzZXJ0aW9uIGBudW1faW5kaWNlcyA+PSBtS2AgZmFpbGVkIGluIABBc3NlcnRpb24gYGJpblNjYWxlIDwgbU51bVNjYWxlQmluc2AgZmFpbGVkIGluIABBc3NlcnRpb24gYHcyID49IDAgJiYgdzIgPD0gMS4wMDAxYCBmYWlsZWQgaW4gAEVycm9yIGNyZWF0aW5nIHJlc291cmNlcyBkaXJlY3RvcnkgcGF0aABCdWNrZXRzIGFyZSBub3QgYWxsb2NhdGVkAEFzc2VydGlvbiBgZ3l5ID49IDBgIGZhaWxlZCBpbiAAcm93IG91dCBvZiBib3VuZHMATm90IGVub3VnaCBmZWF0dXJlcwBBc3NlcnRpb24gYGluZGV4IDw9IChiaW5YICsgYmluWSptTnVtWEJpbnMgKyBiaW5BbmdsZSptTnVtWEJpbnMqbU51bVlCaW5zICsgYmluU2NhbGUqbU51bVhCaW5zKm1OdW1ZQmlucyptTnVtQW5nbGVCaW5zKWAgZmFpbGVkIGluIABBc3NlcnRpb24gYHczID49IDAgJiYgdzMgPD0gMS4wMDAxYCBmYWlsZWQgaW4gAEVycm9yOiBVbmFibGUgdG8gY2hhbmdlIHdvcmtpbmcgZGlyZWN0b3J5IHRvICclcycuCgBBc3NlcnRpb24gYG1CdWNrZXRzWzBdLnNpemUoKSA9PSBtTnVtQnVja2V0c1lgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBneHkgPD0gNDEyOTAyNGAgZmFpbGVkIGluIABBc3NpZ25tZW50IHNpemUgaXMgaW5jb3JyZWN0AEFzc2VydGlvbiBgbiA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAodzArdzErdzIrdzMpIDw9IDEuMDAwMWAgZmFpbGVkIGluIABbJSAuM2YgJSAuM2YgJSAuM2ZdIFslIDYuMWZdCgBBc3NlcnRpb24gYG1GZWF0dXJlUG9pbnRzLnNpemUoKSA8PSBtTWF4TnVtRmVhdHVyZVBvaW50c2AgZmFpbGVkIGluIABBc3NlcnRpb24gYGd4eSA+PSAtNDEyOTAyNGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG51bV9jZW50ZXJzID4gMGAgZmFpbGVkIGluIAAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci91dGlscy9wYXJ0aWFsX3NvcnQuaABBc3NlcnRpb24gYHBvcyA9PSA2NjZgIGZhaWxlZCBpbiAAAAMAAAADAAAABAAAAAQAAAAEAAAAAQAAAAQAAAACAAAAAgAAAAIAAAACAAAAAgAAAAEAAAABAAAAAQAAAAQAAACIAAAABQAAAJAAAAAGAAAAmAAAAAkAAACwAAAAZAcAAHMMAABsEgAA9BQAAC5pc2V0AHJiAE42dmlzaW9uMjVHYXVzc2lhblNjYWxlU3BhY2VQeXJhbWlkRQAAANz4AACZXQAAVG9vIG1hbnkgZmVhdHVyZSBwb2ludHMAVGhlcmUgbXVzdCBiZSBhdCBsZWFzdCAxIGNlbnRlcgBuIG11c3QgYmUgcG9zaXRpdmUAUG9zaXRpb24gaXMgbm90IHdpdGhpbiByYW5nZQBBc3NlcnRpb24gYGtwLnNjYWxlIDwgbUxhcGxhY2lhblB5cmFtaWQubnVtU2NhbGVQZXJPY3RhdmUoKWAgZmFpbGVkIGluIABbJXNdIFslc10gWyVzXSA6IEZvdW5kICVkIGZlYXR1cmVzIGluIHF1ZXJ5AEFzc2VydGlvbiBgayA+IDBgIGZhaWxlZCBpbiAARmVhdHVyZSBwb2ludCBzY2FsZSBpcyBvdXQgb2YgYm91bmRzAEZpbmQgTWF0Y2hlcyAoMSkAayBtdXN0IGJlIHBvc2l0aXZlAEFzc2VydGlvbiBga3Auc2NvcmUgPT0gbGFwMS5nZXQ8ZmxvYXQ+KHkpW3hdYCBmYWlsZWQgaW4gAEhvdWdoIFZvdGluZyAoMSkAU2NvcmUgaXMgbm90IGNvbnNpc3RlbnQgd2l0aCB0aGUgRG9HIGltYWdlAEZpbmQgSG91Z2ggTWF0Y2hlcyAoMSkAQXNzZXJ0aW9uIGBidWNrZXRbMF0uZmlyc3QgPj0gYnVja2V0W25dLmZpcnN0YCBmYWlsZWQgaW4gAEVzdGltYXRlIEhvbW9ncmFwaHkgKDEpAG50aF9lbGVtZW50IGZhaWxlZABGaW5kIElubGllcnMgKDEpAEFzc2VydGlvbiBgb2N0YXZlIDwgbU51bU9jdGF2ZXNgIGZhaWxlZCBpbiAARmluZCBNYXRjaGVzICgyKQAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvZ2F1c3NpYW5fc2NhbGVfc3BhY2VfcHlyYW1pZC5oAEhvdWdoIFZvdGluZyAoMikAT2N0YXZlIG91dCBvZiByYW5nZQBGaW5kIEhvdWdoIE1hdGNoZXMgKDIpAEFzc2VydGlvbiBgc2NhbGUgPCBtTnVtU2NhbGVzUGVyT2N0YXZlYCBmYWlsZWQgaW4gAEVzdGltYXRlIEhvbW9ncmFwaHkgKDIpAFNjYWxlIG91dCBvZiByYW5nZQBGaW5kIElubGllcnMgKDIpAEFzc2VydGlvbiBgaW5kZXggPCBtSW1hZ2VzLnNpemUoKWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGJlc3RfaW5kZXggIT0gc3RkOjpudW1lcmljX2xpbWl0czxzaXplX3Q+OjptYXgoKWAgZmFpbGVkIGluIAAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvRG9HX3NjYWxlX2ludmFyaWFudF9kZXRlY3Rvci5oAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL21hdGNoZXJzL2ZlYXR1cmVfbWF0Y2hlci1pbmxpbmUuaABJbmRleCBpcyBvdXQgb2YgcmFuZ2UAU29tZXRoaW5nIHN0cmFuZ2UAQXNzZXJ0aW9uIGBzY2FsZSA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbU1hdGNoZXMuc2l6ZSgpIDw9IGZlYXR1cmVzMS0+c2l6ZSgpYCBmYWlsZWQgaW4gAFNjYWxlIG11c3QgYmUgcG9zaXRpdmUATnVtYmVyIG9mIG1hdGNoZXMgc2hvdWxkIGJlIGxvd2VyAFNjYWxlIG11c3QgYmUgbGVzcyB0aGFuIG51bWJlciBvZiBzY2FsZSBwZXIgb2N0YXZlAEFzc2VydGlvbiBgbVJvb3QuZ2V0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBsYXAwLmhlaWdodCgpID09IGxhcDEuaGVpZ2h0KCkgPT0gbGFwMi5oZWlnaHQoKWAgZmFpbGVkIGluIABSb290IGNhbm5vdCBiZSBOVUxMAFdpZHRoL2hlaWdodCBhcmUgbm90IGNvbnNpc3RlbnQAQXNzZXJ0aW9uIGBtaW5pICE9IC0xYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKGxhcDAuaGVpZ2h0KCkgPT0gbGFwMS5oZWlnaHQoKSkgJiYgKChsYXAxLmhlaWdodCgpPj4xKSA9PSBsYXAyLmhlaWdodCgpKWAgZmFpbGVkIGluIABNaW5pbXVtIGluZGV4IG5vdCBzZXQAQXNzZXJ0aW9uIGAoKGxhcDAud2lkdGgoKT4+MSkgPT0gbGFwMS53aWR0aCgpKSAmJiAobGFwMS53aWR0aCgpID09IGxhcDIud2lkdGgoKSlgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBuIDw9IGluX21hdGNoZXMuc2l6ZSgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgMGAgZmFpbGVkIGluIABTaG91bGQgYmUgdGhlIHNhbWUASW1hZ2Ugc2l6ZXMgYXJlIGluY29uc2lzdGVudABBc3NlcnRpb24gYGJpblggPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYCh4LTEpID49IDAgJiYgKHgrMSkgPCBsYXAxLndpZHRoKClgIGZhaWxlZCBpbiAAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvbWF0Y2hlcnMvaG91Z2hfc2ltaWxhcml0eV92b3RpbmcuaAB4IG91dCBvZiBib3VuZHMAYmluWCBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGAoeS0xKSA+PSAwICYmICh5KzEpIDwgbGFwMS5oZWlnaHQoKWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGJpblggPCBtTnVtWEJpbnNgIGZhaWxlZCBpbiAAeSBvdXQgb2YgYm91bmRzAEFzc2VydGlvbiBgYmluWSA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbGFwMC53aWR0aCgpID09IGxhcDEud2lkdGgoKWAgZmFpbGVkIGluIABiaW5ZIG91dCBvZiByYW5nZQBJbWFnZSBkaW1lbnNpb25zIGluY29uc2lzdGVudABBc3NlcnRpb24gYGJpblkgPCBtTnVtWUJpbnNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBsYXAwLndpZHRoKCkgPT0gbGFwMi53aWR0aCgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYmluQW5nbGUgPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYGxhcDAuaGVpZ2h0KCkgPT0gbGFwMS5oZWlnaHQoKWAgZmFpbGVkIGluIABiaW5BbmdsZSBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGBsYXAwLmhlaWdodCgpID09IGxhcDIuaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBiaW5BbmdsZSA8IG1OdW1BbmdsZUJpbnNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAoeC0xKSA+PSAwICYmICh4KzEpIDwgaW0ud2lkdGgoKWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGJpblNjYWxlID49IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAoeS0xKSA+PSAwICYmICh5KzEpIDwgaW0uaGVpZ2h0KClgIGZhaWxlZCBpbiAAYmluU2NhbGUgb3V0IG9mIHJhbmdlAEFzc2VydGlvbiBgKGxhcDAud2lkdGgoKT4+MSkgPT0gbGFwMi53aWR0aCgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYmluU2NhbGUgPCBtTnVtU2NhbGVCaW5zYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKGxhcDAuaGVpZ2h0KCk+PjEpID09IGxhcDIuaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBkaXN0QmluQW5nbGUgPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYHhfZGl2XzItMC41ZiA+PSAwYCBmYWlsZWQgaW4gAGRpc3RCaW5BbmdsZSBtdXN0IG5vdCBiZSBuZWdhdGl2ZQB4X2Rpdl8yIG91dCBvZiBib3VuZHMgb3V0IG9mIGJvdW5kcyBmb3IgaW50ZXJwb2xhdGlvbgBBc3NlcnRpb24gYGh5cC5zaXplKCkgPj0gOSptYXhfbnVtX2h5cG90aGVzZXNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB5X2Rpdl8yLTAuNWYgPj0gMGAgZmFpbGVkIGluIAAvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvQVIuanMtZ2l0aHViLW9yZy9hcnRvb2xraXQ1LWpzL2xpYi9hcnRvb2xraXQ1L2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9ob21vZ3JhcGh5X2VzdGltYXRpb24vcm9idXN0X2hvbW9ncmFwaHkuaAB5X2Rpdl8yIG91dCBvZiBib3VuZHMgb3V0IG9mIGJvdW5kcyBmb3IgaW50ZXJwb2xhdGlvbgBoeXAgdmVjdG9yIHNob3VsZCBiZSBvZiBzaXplIDkqbWF4X251bV9oeXBvdGhlc2VzAEFzc2VydGlvbiBgeF9kaXZfMiswLjVmIDwgbGFwMi53aWR0aCgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgdG1wX2kuc2l6ZSgpID49IG51bV9wb2ludHNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB5X2Rpdl8yKzAuNWYgPCBsYXAyLmhlaWdodCgpYCBmYWlsZWQgaW4gAHRtcF9pIHZlY3RvciBzaG91bGQgYmUgb2Ygc2l6ZSBudW1fcG9pbnRzAEFzc2VydGlvbiBgKGxhcDAud2lkdGgoKT4+MSkgPT0gbGFwMS53aWR0aCgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaHlwX2Nvc3RzLnNpemUoKSA+PSBtYXhfbnVtX2h5cG90aGVzZXNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAobGFwMC5oZWlnaHQoKT4+MSkgPT0gbGFwMS5oZWlnaHQoKWAgZmFpbGVkIGluIABoeXBfY29zdHMgdmVjdG9yIHNob3VsZCBiZSBvZiBzaXplIG1heF9udW1faHlwb3RoZXNlcwBhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAEFzc2VydGlvbiBgbiA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGByb3cgPCBtSGVpZ2h0YCBmYWlsZWQgaW4gAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL3V0aWxzL3BhcnRpYWxfc29ydC5oAC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9BUi5qcy1naXRodWItb3JnL2FydG9vbGtpdDUtanMvbGliL2FydG9vbGtpdDUvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2ZyYW1ld29yay9pbWFnZS5oAG4gbXVzdCBiZSBwb3NpdGl2ZQByb3cgb3V0IG9mIGJvdW5kcwBBc3NlcnRpb24gYGsgPiAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKGludClzdGQ6OmZsb29yKHgpID09IChpbnQpeGAgZmFpbGVkIGluIABrIG11c3QgYmUgcG9zaXRpdmUAL2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL0FSLmpzLWdpdGh1Yi1vcmcvYXJ0b29sa2l0NS1qcy9saWIvYXJ0b29sa2l0NS9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL2ludGVycG9sYXRlLmgAQXNzZXJ0aW9uIGAwYCBmYWlsZWQgaW4gAGZsb29yKCkgYW5kIGNhc3Qgbm90IHRoZSBzYW1lAEZhaWxlZCB0byBjb21wdXRlIG1hdHJpeCBpbnZlcnNlAEFzc2VydGlvbiBgKGludClzdGQ6OmZsb29yKHkpID09IChpbnQpeWAgZmFpbGVkIGluIABBc3NlcnRpb24gYHlwID49IDAgJiYgeXAgPCBoZWlnaHRgIGZhaWxlZCBpbiAAeXAgb3V0IG9mIGJvdW5kcwBBc3NlcnRpb24gYHlwX3BsdXNfMSA+PSAwICYmIHlwX3BsdXNfMSA8IGhlaWdodGAgZmFpbGVkIGluIAB5cF9wbHVzXzEgb3V0IG9mIGJvdW5kcwBBc3NlcnRpb24gYHhwID49IDAgJiYgeHAgPCB3aWR0aGAgZmFpbGVkIGluIAB4cCBvdXQgb2YgYm91bmRzAEFzc2VydGlvbiBgeHBfcGx1c18xID49IDAgJiYgeHBfcGx1c18xIDwgd2lkdGhgIGZhaWxlZCBpbiAAeHBfcGx1c18xIG91dCBvZiBib3VuZHMAQXNzZXJ0aW9uIGB3MCA+PSAwICYmIHcwIDw9IDEuMDAwMWAgZmFpbGVkIGluIABPdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGB3MSA+PSAwICYmIHcxIDw9IDEuMDAwMWAgZmFpbGVkIGluIABBc3NlcnRpb24gYHcyID49IDAgJiYgdzIgPD0gMS4wMDAxYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgdzMgPj0gMCAmJiB3MyA8PSAxLjAwMDFgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAodzArdzErdzIrdzMpIDw9IDEuMDAwMWAgZmFpbGVkIGluIAAAAAAAAADAXQAAEAAAABEAAAAAAAAAsHMAABIAAAATAAAATjZ2aXNpb245RXhjZXB0aW9uRQAE+QAAcHMAAOz2AABONnZpc2lvbjE4Qmlub21pYWxQeXJhbWlkMzJmRQAAAAT5AACQcwAAwF0AAAAAAACEcwAADgAAABQAAAAVAAAAuVKMPo5a5z65Uow+AAAAAAAAAABkdAAAFgAAABcAAAAYAAAAGQAAABoAAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQTjZ2aXNpb244S2V5ZnJhbWVJTGk5NkVFRU5TXzE0ZGVmYXVsdF9kZWxldGVJUzNfRUVOU185YWxsb2NhdG9ySVMzX0VFRUUAAAT5AAD8cwAAQPYAAE5TdDNfXzIxNGRlZmF1bHRfZGVsZXRlSU42dmlzaW9uOEtleWZyYW1lSUxpOTZFRUVFRQBib29sIHZpc2lvbjo6VmlzdWFsRGF0YWJhc2U8dmlzaW9uOjpGUkVBS0V4dHJhY3RvciwgdmlzaW9uOjpCaW5hcnlGZWF0dXJlU3RvcmUsIHZpc2lvbjo6QmluYXJ5RmVhdHVyZU1hdGNoZXI8OTY+Pjo6cXVlcnkoY29uc3QgdmlzaW9uOjpHYXVzc2lhblNjYWxlU3BhY2VQeXJhbWlkICopIFtGRUFUVVJFX0VYVFJBQ1RPUiA9IHZpc2lvbjo6RlJFQUtFeHRyYWN0b3IsIFNUT1JFID0gdmlzaW9uOjpCaW5hcnlGZWF0dXJlU3RvcmUsIE1BVENIRVIgPSB2aXNpb246OkJpbmFyeUZlYXR1cmVNYXRjaGVyPDk2Pl0AQdTrAQvxC7K+uT4S3KC+kL45PhLcoL6Qvjm+AAAAgLK+ub4S3KA+kL45vhLcoD6Qvjk+0nIYvwAAAADScpi+OgYEv9JymD46BgS/0nIYPwAAAIDScpg+OgYEP9JymL46BgQ/AAAAgFa4Pb9mTSQ/Vri9vmZNJD9WuL0+AAAAAFa4PT9mTSS/Vri9PmZNJL9WuL2+DOlYPwAAAIAM6dg+mdk7Pwzp2L6Z2Ts/DOlYvwAAAAAM6di+mdk7vwzp2D6Z2Tu/AAAAAPxTbj/xZU6/DVTuPvFlTr8NVO6+AAAAgPxTbr/xZU4/DVTuvvFlTj8NVO4+AACAvwAAAAAAAAC/0LNdvwAAAD/Qs12/AACAPwAAAIAAAAA/0LNdPwAAAL/Qs10/AAAAAFh3AAAWAAAAGwAAABwAAAAdAAAAHgAAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVBoMTZOdWxsQXJyYXlEZWxldGVySWhFTlNfOWFsbG9jYXRvckloRUVFRQAAAAAE+QAADHcAAED2AAAxNk51bGxBcnJheURlbGV0ZXJJaEUAAAAAAAAA5HcAABYAAAAfAAAAIAAAACEAAAAiAAAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUGhOU18xNGRlZmF1bHRfZGVsZXRlSWhFRU5TXzlhbGxvY2F0b3JJaEVFRUUAAAT5AACYdwAAQPYAAE5TdDNfXzIxNGRlZmF1bHRfZGVsZXRlSWhFRQB2aXNpb246OlNjb3BlZFRpbWVyOjp+U2NvcGVkVGltZXIoKQBUcmFja2luZyBsb3N0LiAlZAoAVHJhY2tlZCBwYWdlICVkIChtYXggJWQpLgoAaWRkZGRkZGRkZGRkZGQAaQBFcnJvcjogYXIyQ3JlYXRlSGFuZGxlLgoAUmVhZGluZyAlcy5mc2V0MwoAZnNldDMARXJyb3IgcmVhZGluZyBLUE0gZGF0YSBmcm9tICVzLmZzZXQzCgAgIEFzc2lnbmVkIHBhZ2Ugbm8uICVkLgoARXJyb3I6IGtwbUNoYW5nZVBhZ2VOb09mUmVmRGF0YVNldAoARXJyb3I6IGtwbU1lcmdlUmVmRGF0YVNldAoAICBEb25lLgoAUmVhZGluZyAlcy5mc2V0CgBmc2V0AEVycm9yIHJlYWRpbmcgZGF0YSBmcm9tICVzLmZzZXQKAEVycm9yOiBrcG1TZXRSZWZEYXRhU2V0CgBMb2FkaW5nIG9mIE5GVCBkYXRhIGNvbXBsZXRlLgoAbG9hZENhbWVyYSgpOiBFcnJvciBsb2FkaW5nIHBhcmFtZXRlciBmaWxlICVzIGZvciBjYW1lcmEuCgAqKiogQ2FtZXJhIFBhcmFtZXRlciByZXNpemVkIGZyb20gJWQsICVkLiAqKioKAHNldENhbWVyYSgpOiBFcnJvcjogYXJQYXJhbUxUQ3JlYXRlLgoAc2V0Q2FtZXJhKCk6IEVycm9yOiBhckNyZWF0ZUhhbmRsZS4KAHNldENhbWVyYSgpOiBFcnJvciBjcmVhdGluZyAzRCBoYW5kbGUAQVJUb29sS2l0SlMoKTogVW5hYmxlIHRvIHNldCB1cCBBUiBtYXJrZXIuCgBBUlRvb2xLaXRKUygpOiBVbmFibGUgdG8gc2V0IHVwIE5GVCBtYXJrZXIuCgBBUlRvb2xLaXRKUygpOiBVbmFibGUgdG8gc2V0IHVwIEFSIG11bHRpbWFya2VyLgoAUGF0dGVybiBkZXRlY3Rpb24gbW9kZSBzZXQgdG8gJWQuCgBQYXR0ZXJuIHJhdGlvIHNpemUgc2V0IHRvICVmLgoATGFiZWxpbmcgbW9kZSBzZXQgdG8gJWQKAFRocmVzaG9sZCBzZXQgdG8gJWQKAFRocmVzaG9sZCBtb2RlIHNldCB0byAlZAoARGVidWcgbW9kZSBzZXQgdG8gJXMKAG9uLgBvZmYuAEltYWdlIHByb2MuIG1vZGUgc2V0IHRvICVkLgoAaWlpZABB0PcBC7QTaWlpaWlpaWRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRpAHNldHVwKCk6IEVycm9yOiBhclBhdHRDcmVhdGVIYW5kbGUuCgBBbGxvY2F0ZWQgdmlkZW9GcmFtZVNpemUgJWQKAGlpaWlpaQBzZXR1cAB0ZWFyZG93bgBzZXR1cEFSMgBfYWRkTWFya2VyAF9hZGRNdWx0aU1hcmtlcgBfYWRkTkZUTWFya2VyAGdldE11bHRpTWFya2VyTnVtAGdldE11bHRpTWFya2VyQ291bnQAX2xvYWRDYW1lcmEAc2V0TWFya2VySW5mb0RpcgBzZXRNYXJrZXJJbmZvVmVydGV4AGdldFRyYW5zTWF0U3F1YXJlAGdldFRyYW5zTWF0U3F1YXJlQ29udABnZXRUcmFuc01hdE11bHRpU3F1YXJlAGdldFRyYW5zTWF0TXVsdGlTcXVhcmVSb2J1c3QAZGV0ZWN0TWFya2VyAGdldE1hcmtlck51bQBkZXRlY3RORlRNYXJrZXIAZ2V0TXVsdGlFYWNoTWFya2VyAGdldE1hcmtlcgBnZXRORlRNYXJrZXIAc2V0RGVidWdNb2RlAGdldERlYnVnTW9kZQBnZXRQcm9jZXNzaW5nSW1hZ2UAc2V0TG9nTGV2ZWwAZ2V0TG9nTGV2ZWwAc2V0UHJvamVjdGlvbk5lYXJQbGFuZQBnZXRQcm9qZWN0aW9uTmVhclBsYW5lAHNldFByb2plY3Rpb25GYXJQbGFuZQBnZXRQcm9qZWN0aW9uRmFyUGxhbmUAc2V0VGhyZXNob2xkTW9kZQBnZXRUaHJlc2hvbGRNb2RlAHNldFRocmVzaG9sZABnZXRUaHJlc2hvbGQAc2V0UGF0dGVybkRldGVjdGlvbk1vZGUAZ2V0UGF0dGVybkRldGVjdGlvbk1vZGUAc2V0UGF0dFJhdGlvAGdldFBhdHRSYXRpbwBzZXRNYXRyaXhDb2RlVHlwZQBnZXRNYXRyaXhDb2RlVHlwZQBzZXRMYWJlbGluZ01vZGUAZ2V0TGFiZWxpbmdNb2RlAHNldEltYWdlUHJvY01vZGUAZ2V0SW1hZ2VQcm9jTW9kZQBFUlJPUl9BUkNPTlRST0xMRVJfTk9UX0ZPVU5EAEVSUk9SX01VTFRJTUFSS0VSX05PVF9GT1VORABFUlJPUl9NQVJLRVJfSU5ERVhfT1VUX09GX0JPVU5EUwBBUl9ERUJVR19ESVNBQkxFAEFSX0RFQlVHX0VOQUJMRQBBUl9ERUZBVUxUX0RFQlVHX01PREUAQVJfTEFCRUxJTkdfV0hJVEVfUkVHSU9OAEFSX0xBQkVMSU5HX0JMQUNLX1JFR0lPTgBBUl9ERUZBVUxUX0xBQkVMSU5HX01PREUAQVJfREVGQVVMVF9MQUJFTElOR19USFJFU0gAQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRQBBUl9JTUFHRV9QUk9DX0ZJRUxEX0lNQUdFAEFSX0RFRkFVTFRfSU1BR0VfUFJPQ19NT0RFAEFSX1RFTVBMQVRFX01BVENISU5HX0NPTE9SAEFSX1RFTVBMQVRFX01BVENISU5HX01PTk8AQVJfTUFUUklYX0NPREVfREVURUNUSU9OAEFSX1RFTVBMQVRFX01BVENISU5HX0NPTE9SX0FORF9NQVRSSVgAQVJfVEVNUExBVEVfTUFUQ0hJTkdfTU9OT19BTkRfTUFUUklYAEFSX0RFRkFVTFRfUEFUVEVSTl9ERVRFQ1RJT05fTU9ERQBBUl9VU0VfVFJBQ0tJTkdfSElTVE9SWQBBUl9OT1VTRV9UUkFDS0lOR19ISVNUT1JZAEFSX1VTRV9UUkFDS0lOR19ISVNUT1JZX1YyAEFSX0RFRkFVTFRfTUFSS0VSX0VYVFJBQ1RJT05fTU9ERQBBUl9NQVhfTE9PUF9DT1VOVABBUl9MT09QX0JSRUFLX1RIUkVTSABBUl9MT0dfTEVWRUxfREVCVUcAQVJfTE9HX0xFVkVMX0lORk8AQVJfTE9HX0xFVkVMX1dBUk4AQVJfTE9HX0xFVkVMX0VSUk9SAEFSX0xPR19MRVZFTF9SRUxfSU5GTwBBUl9NQVRSSVhfQ09ERV8zeDMAQVJfTUFUUklYX0NPREVfM3gzX0hBTU1JTkc2MwBBUl9NQVRSSVhfQ09ERV8zeDNfUEFSSVRZNjUAQVJfTUFUUklYX0NPREVfNHg0AEFSX01BVFJJWF9DT0RFXzR4NF9CQ0hfMTNfOV8zAEFSX01BVFJJWF9DT0RFXzR4NF9CQ0hfMTNfNV81AEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX01BTlVBTABBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX01FRElBTgBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX09UU1UAQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRQBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTk9ORQBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfUEFUVEVSTl9FWFRSQUNUSU9OAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9HRU5FUklDAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9DT05UUkFTVABBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQkFSQ09ERV9OT1RfRk9VTkQAQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0JBUkNPREVfRURDX0ZBSUwAQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0NPTkZJREVOQ0UAQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX1BPU0VfRVJST1IAQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX1BPU0VfRVJST1JfTVVMVEkAQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX0hFVVJJU1RJQ19UUk9VQkxFU09NRV9NQVRSSVhfQ09ERVMAbG9hZE1hcmtlcigpOiBFcnJvciBsb2FkaW5nIHBhdHRlcm4gZmlsZSAlcy4KAGNvbmZpZyBkYXRhIGxvYWQgZXJyb3IgISEKAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAEGQiwIL0yd4+AAAePgAAHj4AAB4+AAAaWlpaWkAAAB4+AAAePgAAGlpaQB4+AAAePgAADCGAABOU3QzX18yMTJiYXNpY19zdHJpbmdJY05TXzExY2hhcl90cmFpdHNJY0VFTlNfOWFsbG9jYXRvckljRUVFRQBOU3QzX18yMjFfX2Jhc2ljX3N0cmluZ19jb21tb25JTGIxRUVFAAAAANz4AAD/hQAAYPkAAMCFAAAAAAAAAQAAACiGAAAAAAAAaWlpaQAAAAB4+AAAePgAAHj4AAB4+AAAMIYAACT4AAB4+AAAdmlpAHj4AABpaQAAJPgAAHj4AADM+AAAdmlpZAAAAADM+AAAePgAAGRpaQAk+AAAePgAAHj4AAB2aWlpAAAAACT4AAB4+AAAwPgAAHZpaWYAT3V0IG9mIG1lbW9yeSEhCgAjIyMgRmVhdHVyZSBjYW5kaWRhdGVzIGZvciB0cmFja2luZyBhcmUgb3ZlcmZsb3cuCgBFcnJvcjogbWFsbG9jCgBCb2d1cyBtZXNzYWdlIGNvZGUgJWQAQUxJR05fVFlQRSBpcyB3cm9uZywgcGxlYXNlIGZpeABNQVhfQUxMT0NfQ0hVTksgaXMgd3JvbmcsIHBsZWFzZSBmaXgAQm9ndXMgYnVmZmVyIGNvbnRyb2wgbW9kZQBJbnZhbGlkIGNvbXBvbmVudCBJRCAlZCBpbiBTT1MASW52YWxpZCBjcm9wIHJlcXVlc3QARENUIGNvZWZmaWNpZW50IG91dCBvZiByYW5nZQBEQ1Qgc2NhbGVkIGJsb2NrIHNpemUgJWR4JWQgbm90IHN1cHBvcnRlZABDb21wb25lbnQgaW5kZXggJWQ6IG1pc21hdGNoaW5nIHNhbXBsaW5nIHJhdGlvICVkOiVkLCAlZDolZCwgJWMAQm9ndXMgSHVmZm1hbiB0YWJsZSBkZWZpbml0aW9uAEJvZ3VzIGlucHV0IGNvbG9yc3BhY2UAQm9ndXMgSlBFRyBjb2xvcnNwYWNlAEJvZ3VzIG1hcmtlciBsZW5ndGgAV3JvbmcgSlBFRyBsaWJyYXJ5IHZlcnNpb246IGxpYnJhcnkgaXMgJWQsIGNhbGxlciBleHBlY3RzICVkAFNhbXBsaW5nIGZhY3RvcnMgdG9vIGxhcmdlIGZvciBpbnRlcmxlYXZlZCBzY2FuAEludmFsaWQgbWVtb3J5IHBvb2wgY29kZSAlZABVbnN1cHBvcnRlZCBKUEVHIGRhdGEgcHJlY2lzaW9uICVkAEludmFsaWQgcHJvZ3Jlc3NpdmUgcGFyYW1ldGVycyBTcz0lZCBTZT0lZCBBaD0lZCBBbD0lZABJbnZhbGlkIHByb2dyZXNzaXZlIHBhcmFtZXRlcnMgYXQgc2NhbiBzY3JpcHQgZW50cnkgJWQAQm9ndXMgc2FtcGxpbmcgZmFjdG9ycwBJbnZhbGlkIHNjYW4gc2NyaXB0IGF0IGVudHJ5ICVkAEltcHJvcGVyIGNhbGwgdG8gSlBFRyBsaWJyYXJ5IGluIHN0YXRlICVkAEpQRUcgcGFyYW1ldGVyIHN0cnVjdCBtaXNtYXRjaDogbGlicmFyeSB0aGlua3Mgc2l6ZSBpcyAldSwgY2FsbGVyIGV4cGVjdHMgJXUAQm9ndXMgdmlydHVhbCBhcnJheSBhY2Nlc3MAQnVmZmVyIHBhc3NlZCB0byBKUEVHIGxpYnJhcnkgaXMgdG9vIHNtYWxsAFN1c3BlbnNpb24gbm90IGFsbG93ZWQgaGVyZQBDQ0lSNjAxIHNhbXBsaW5nIG5vdCBpbXBsZW1lbnRlZCB5ZXQAVG9vIG1hbnkgY29sb3IgY29tcG9uZW50czogJWQsIG1heCAlZABVbnN1cHBvcnRlZCBjb2xvciBjb252ZXJzaW9uIHJlcXVlc3QAQm9ndXMgREFDIGluZGV4ICVkAEJvZ3VzIERBQyB2YWx1ZSAweCV4AEJvZ3VzIERIVCBpbmRleCAlZABCb2d1cyBEUVQgaW5kZXggJWQARW1wdHkgSlBFRyBpbWFnZSAoRE5MIG5vdCBzdXBwb3J0ZWQpAFJlYWQgZnJvbSBFTVMgZmFpbGVkAFdyaXRlIHRvIEVNUyBmYWlsZWQARGlkbid0IGV4cGVjdCBtb3JlIHRoYW4gb25lIHNjYW4ASW5wdXQgZmlsZSByZWFkIGVycm9yAE91dHB1dCBmaWxlIHdyaXRlIGVycm9yIC0tLSBvdXQgb2YgZGlzayBzcGFjZT8ARnJhY3Rpb25hbCBzYW1wbGluZyBub3QgaW1wbGVtZW50ZWQgeWV0AEh1ZmZtYW4gY29kZSBzaXplIHRhYmxlIG92ZXJmbG93AE1pc3NpbmcgSHVmZm1hbiBjb2RlIHRhYmxlIGVudHJ5AE1heGltdW0gc3VwcG9ydGVkIGltYWdlIGRpbWVuc2lvbiBpcyAldSBwaXhlbHMARW1wdHkgaW5wdXQgZmlsZQBQcmVtYXR1cmUgZW5kIG9mIGlucHV0IGZpbGUAQ2Fubm90IHRyYW5zY29kZSBkdWUgdG8gbXVsdGlwbGUgdXNlIG9mIHF1YW50aXphdGlvbiB0YWJsZSAlZABTY2FuIHNjcmlwdCBkb2VzIG5vdCB0cmFuc21pdCBhbGwgZGF0YQBJbnZhbGlkIGNvbG9yIHF1YW50aXphdGlvbiBtb2RlIGNoYW5nZQBOb3QgaW1wbGVtZW50ZWQgeWV0AFJlcXVlc3RlZCBmZWF0dXJlIHdhcyBvbWl0dGVkIGF0IGNvbXBpbGUgdGltZQBBcml0aG1ldGljIHRhYmxlIDB4JTAyeCB3YXMgbm90IGRlZmluZWQAQmFja2luZyBzdG9yZSBub3Qgc3VwcG9ydGVkAEh1ZmZtYW4gdGFibGUgMHglMDJ4IHdhcyBub3QgZGVmaW5lZABKUEVHIGRhdGFzdHJlYW0gY29udGFpbnMgbm8gaW1hZ2UAUXVhbnRpemF0aW9uIHRhYmxlIDB4JTAyeCB3YXMgbm90IGRlZmluZWQATm90IGEgSlBFRyBmaWxlOiBzdGFydHMgd2l0aCAweCUwMnggMHglMDJ4AEluc3VmZmljaWVudCBtZW1vcnkgKGNhc2UgJWQpAENhbm5vdCBxdWFudGl6ZSBtb3JlIHRoYW4gJWQgY29sb3IgY29tcG9uZW50cwBDYW5ub3QgcXVhbnRpemUgdG8gZmV3ZXIgdGhhbiAlZCBjb2xvcnMAQ2Fubm90IHF1YW50aXplIHRvIG1vcmUgdGhhbiAlZCBjb2xvcnMASW52YWxpZCBKUEVHIGZpbGUgc3RydWN0dXJlOiAlcyBiZWZvcmUgU09GAEludmFsaWQgSlBFRyBmaWxlIHN0cnVjdHVyZTogdHdvIFNPRiBtYXJrZXJzAEludmFsaWQgSlBFRyBmaWxlIHN0cnVjdHVyZTogbWlzc2luZyBTT1MgbWFya2VyAFVuc3VwcG9ydGVkIEpQRUcgcHJvY2VzczogU09GIHR5cGUgMHglMDJ4AEludmFsaWQgSlBFRyBmaWxlIHN0cnVjdHVyZTogdHdvIFNPSSBtYXJrZXJzAEZhaWxlZCB0byBjcmVhdGUgdGVtcG9yYXJ5IGZpbGUgJXMAUmVhZCBmYWlsZWQgb24gdGVtcG9yYXJ5IGZpbGUAU2VlayBmYWlsZWQgb24gdGVtcG9yYXJ5IGZpbGUAV3JpdGUgZmFpbGVkIG9uIHRlbXBvcmFyeSBmaWxlIC0tLSBvdXQgb2YgZGlzayBzcGFjZT8AQXBwbGljYXRpb24gdHJhbnNmZXJyZWQgdG9vIGZldyBzY2FubGluZXMAVW5zdXBwb3J0ZWQgbWFya2VyIHR5cGUgMHglMDJ4AFZpcnR1YWwgYXJyYXkgY29udHJvbGxlciBtZXNzZWQgdXAASW1hZ2UgdG9vIHdpZGUgZm9yIHRoaXMgaW1wbGVtZW50YXRpb24AUmVhZCBmcm9tIFhNUyBmYWlsZWQAV3JpdGUgdG8gWE1TIGZhaWxlZABDb3B5cmlnaHQgKEMpIDIwMTgsIFRob21hcyBHLiBMYW5lLCBHdWlkbyBWb2xsYmVkaW5nADljICAxNC1KYW4tMjAxOABDYXV0aW9uOiBxdWFudGl6YXRpb24gdGFibGVzIGFyZSB0b28gY29hcnNlIGZvciBiYXNlbGluZSBKUEVHAEFkb2JlIEFQUDE0IG1hcmtlcjogdmVyc2lvbiAlZCwgZmxhZ3MgMHglMDR4IDB4JTA0eCwgdHJhbnNmb3JtICVkAFVua25vd24gQVBQMCBtYXJrZXIgKG5vdCBKRklGKSwgbGVuZ3RoICV1AFVua25vd24gQVBQMTQgbWFya2VyIChub3QgQWRvYmUpLCBsZW5ndGggJXUARGVmaW5lIEFyaXRobWV0aWMgVGFibGUgMHglMDJ4OiAweCUwMngARGVmaW5lIEh1ZmZtYW4gVGFibGUgMHglMDJ4AERlZmluZSBRdWFudGl6YXRpb24gVGFibGUgJWQgIHByZWNpc2lvbiAlZABEZWZpbmUgUmVzdGFydCBJbnRlcnZhbCAldQBGcmVlZCBFTVMgaGFuZGxlICV1AE9idGFpbmVkIEVNUyBoYW5kbGUgJXUARW5kIE9mIEltYWdlACAgICAgICAgJTNkICUzZCAlM2QgJTNkICUzZCAlM2QgJTNkICUzZABKRklGIEFQUDAgbWFya2VyOiB2ZXJzaW9uICVkLiUwMmQsIGRlbnNpdHkgJWR4JWQgICVkAFdhcm5pbmc6IHRodW1ibmFpbCBpbWFnZSBzaXplIGRvZXMgbm90IG1hdGNoIGRhdGEgbGVuZ3RoICV1AEpGSUYgZXh0ZW5zaW9uIG1hcmtlcjogdHlwZSAweCUwMngsIGxlbmd0aCAldQAgICAgd2l0aCAlZCB4ICVkIHRodW1ibmFpbCBpbWFnZQBNaXNjZWxsYW5lb3VzIG1hcmtlciAweCUwMngsIGxlbmd0aCAldQBVbmV4cGVjdGVkIG1hcmtlciAweCUwMngAICAgICAgICAlNHUgJTR1ICU0dSAlNHUgJTR1ICU0dSAlNHUgJTR1AFF1YW50aXppbmcgdG8gJWQgPSAlZColZColZCBjb2xvcnMAUXVhbnRpemluZyB0byAlZCBjb2xvcnMAU2VsZWN0ZWQgJWQgY29sb3JzIGZvciBxdWFudGl6YXRpb24AQXQgbWFya2VyIDB4JTAyeCwgcmVjb3ZlcnkgYWN0aW9uICVkAFJTVCVkAFNtb290aGluZyBub3Qgc3VwcG9ydGVkIHdpdGggbm9uc3RhbmRhcmQgc2FtcGxpbmcgcmF0aW9zAFN0YXJ0IE9mIEZyYW1lIDB4JTAyeDogd2lkdGg9JXUsIGhlaWdodD0ldSwgY29tcG9uZW50cz0lZAAgICAgQ29tcG9uZW50ICVkOiAlZGh4JWR2IHE9JWQAU3RhcnQgb2YgSW1hZ2UAU3RhcnQgT2YgU2NhbjogJWQgY29tcG9uZW50cwAgICAgQ29tcG9uZW50ICVkOiBkYz0lZCBhYz0lZAAgIFNzPSVkLCBTZT0lZCwgQWg9JWQsIEFsPSVkAENsb3NlZCB0ZW1wb3JhcnkgZmlsZSAlcwBPcGVuZWQgdGVtcG9yYXJ5IGZpbGUgJXMASkZJRiBleHRlbnNpb24gbWFya2VyOiBKUEVHLWNvbXByZXNzZWQgdGh1bWJuYWlsIGltYWdlLCBsZW5ndGggJXUASkZJRiBleHRlbnNpb24gbWFya2VyOiBwYWxldHRlIHRodW1ibmFpbCBpbWFnZSwgbGVuZ3RoICV1AEpGSUYgZXh0ZW5zaW9uIG1hcmtlcjogUkdCIHRodW1ibmFpbCBpbWFnZSwgbGVuZ3RoICV1AFVucmVjb2duaXplZCBjb21wb25lbnQgSURzICVkICVkICVkLCBhc3N1bWluZyBZQ2JDcgBGcmVlZCBYTVMgaGFuZGxlICV1AE9idGFpbmVkIFhNUyBoYW5kbGUgJXUAVW5rbm93biBBZG9iZSBjb2xvciB0cmFuc2Zvcm0gY29kZSAlZABDb3JydXB0IEpQRUcgZGF0YTogYmFkIGFyaXRobWV0aWMgY29kZQBJbmNvbnNpc3RlbnQgcHJvZ3Jlc3Npb24gc2VxdWVuY2UgZm9yIGNvbXBvbmVudCAlZCBjb2VmZmljaWVudCAlZABDb3JydXB0IEpQRUcgZGF0YTogJXUgZXh0cmFuZW91cyBieXRlcyBiZWZvcmUgbWFya2VyIDB4JTAyeABDb3JydXB0IEpQRUcgZGF0YTogcHJlbWF0dXJlIGVuZCBvZiBkYXRhIHNlZ21lbnQAQ29ycnVwdCBKUEVHIGRhdGE6IGJhZCBIdWZmbWFuIGNvZGUAV2FybmluZzogdW5rbm93biBKRklGIHJldmlzaW9uIG51bWJlciAlZC4lMDJkAFByZW1hdHVyZSBlbmQgb2YgSlBFRyBmaWxlAENvcnJ1cHQgSlBFRyBkYXRhOiBmb3VuZCBtYXJrZXIgMHglMDJ4IGluc3RlYWQgb2YgUlNUJWQASW52YWxpZCBTT1MgcGFyYW1ldGVycyBmb3Igc2VxdWVudGlhbCBKUEVHAEFwcGxpY2F0aW9uIHRyYW5zZmVycmVkIHRvbyBtYW55IHNjYW5saW5lcwBB8LICC4MEEIcAACaHAABGhwAAa4cAAIWHAACkhwAAuYcAANaHAAAAiAAAQIgAAF+IAAB2iAAAjIgAAKCIAADdiAAADYkAACmJAABMiQAAg4kAALqJAADRiQAA8YkAABuKAABoigAAg4oAAK6KAADKigAA74oAABWLAAA6iwAATYsAAGKLAAB1iwAAiIsAAK2LAADCiwAA1osAAPeLAAANjAAAPIwAAGSMAACFjAAApowAANWMAADmjAAAAo0AAECNAABnjQAAjo0AAKKNAADQjQAA+I0AABSOAAA5jgAAW44AAIWOAACwjgAAzo4AAPyOAAAkjwAAS48AAHaPAACjjwAA048AAP2PAAAqkAAATZAAAGuQAACJkAAAv5AAAOmQAAAIkQAAK5EAAFKRAABnkQAAe5EAALCRAADAkQAA/pEAAECSAABqkgAAlpIAAL2SAADZkgAABJMAAB+TAAAzkwAASpMAAFeTAAB/kwAAtJMAAPCTAAAelAAAP5QAAGaUAAB/lAAAp5QAAMqUAADilAAABpUAACuVAAAxlQAAapUAAKSVAADDlQAA0pUAAO+VAAANlgAAKpYAAEOWAABclgAAnpYAANiWAAAOlwAAQpcAAFaXAABtlwAAk5cAALqXAAD8lwAAOJgAAGmYAACNmAAAu5gAANaYAAAOmQAAOZkAAAAAAAAlcwoAQYS3Agu9BAEAAAAIAAAAEAAAAAkAAAACAAAAAwAAAAoAAAARAAAAGAAAACAAAAAZAAAAEgAAAAsAAAAEAAAABQAAAAwAAAATAAAAGgAAACEAAAAoAAAAMAAAACkAAAAiAAAAGwAAABQAAAANAAAABgAAAAcAAAAOAAAAFQAAABwAAAAjAAAAKgAAADEAAAA4AAAAOQAAADIAAAArAAAAJAAAAB0AAAAWAAAADwAAABcAAAAeAAAAJQAAACwAAAAzAAAAOgAAADsAAAA0AAAALQAAACYAAAAfAAAAJwAAAC4AAAA1AAAAPAAAAD0AAAA2AAAALwAAADcAAAA+AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAAAAAAAAQAAAAgAAAAQAAAACQAAAAIAAAADAAAACgAAABEAAAAYAAAAIAAAABkAAAASAAAACwAAAAQAAAAFAAAADAAAABMAAAAaAAAAIQAAACgAAAAwAAAAKQAAACIAAAAbAAAAFAAAAA0AAAAGAAAADgAAABUAAAAcAAAAIwAAACoAAAAxAAAAMgAAACsAAAAkAAAAHQAAABYAAAAeAAAAJQAAACwAAAAzAAAANAAAAC0AAAAmAAAALgAAADUAAAA2AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwBB1LsCC+0CAQAAAAgAAAAQAAAACQAAAAIAAAADAAAACgAAABEAAAAYAAAAIAAAABkAAAASAAAACwAAAAQAAAAFAAAADAAAABMAAAAaAAAAIQAAACgAAAApAAAAIgAAABsAAAAUAAAADQAAABUAAAAcAAAAIwAAACoAAAArAAAAJAAAAB0AAAAlAAAALAAAAC0AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAAAAAAAEAAAAIAAAAEAAAAAkAAAACAAAAAwAAAAoAAAARAAAAGAAAACAAAAAZAAAAEgAAAAsAAAAEAAAADAAAABMAAAAaAAAAIQAAACIAAAAbAAAAFAAAABwAAAAjAAAAJAAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AQdS+AgvdAQEAAAAIAAAAEAAAAAkAAAACAAAAAwAAAAoAAAARAAAAGAAAABkAAAASAAAACwAAABMAAAAaAAAAGwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAAAAAAAAQAAAAgAAAAQAAAACQAAAAIAAAAKAAAAEQAAABIAAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AEHEwAILTwEAAAAIAAAACQAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAABTT1MAQeHBAgsDTFNFAEHBwgIL2APAMPAMzDz8A8Mz8w/PP/+AQLBwjEy8fINDs3OPT79/IOAQ0CzsHNwj4xPTL+8f36BgkFCsbJxco2OTU69vn18IyDj4BMQ09AvLO/sHxzf3iEi4eIREtHSLS7t7h0e3dyjoGNgk5BTUK+sb2yfnF9eoaJhYpGSUVKtrm1unZ5dXAsIy8g7OPv4BwTHxDc09/YJCsnKOTr5+gUGxcY1NvX0i4hLSLu4e3iHhEdEt7R3domKSUq5unl6hYZFRrW2dXQrKOvoGxjb2Cck5+QXFNfWKSrp6hka2dolJuXmFRbV1Kuoa2ibmFtYp6RnZJeUV1apqmlqmZpZWqWmZWaVllVUBAAAAAAAAAAIAAAAAAAAAAEDFWJ9TQksAQEkyoyKoEcVYIXv8c2JoxVi/RQswfhifU/xzQW1UYp9Ts0FBLRIXQktiaFRiflhCSyE7uijDFABAxVifU0JLAEBJMqMiqBFJMr9Fs0EhO0kygic3G+ANoyILMEEtuiijIjcbvxKOCagRfhgSF8MUqBHgDY4J3wQAAAAAAADwP+9hSLFQMfY/ym9Nka7n9D+qEWzvYtDyPwAAAAAAAPA/O7+nwGkk6T+7IMd7elHhP12rct5VqNE/uQAAALoAAAC7AEGkxgILLQEAAAACAAAAAwAAAAAAAAABAAAABQAAAAIAAAAEAAAABgAAAAMAAAAHAAAACABB5MYCC50BAQAAAAUAAAAGAAAAAgAAAAQAAAAHAAAADAAAAAMAAAAIAAAACwAAAA0AAAAJAAAACgAAAA4AAAAPAAAAAAAAAAEAAAAFAAAABgAAAA4AAAACAAAABAAAAAcAAAANAAAADwAAAAMAAAAIAAAADAAAABAAAAAVAAAACQAAAAsAAAARAAAAFAAAABYAAAAKAAAAEgAAABMAAAAXAAAAGABBlMgCC80CAQAAAAUAAAAGAAAADgAAAA8AAAACAAAABAAAAAcAAAANAAAAEAAAABkAAAADAAAACAAAAAwAAAARAAAAGAAAABoAAAAJAAAACwAAABIAAAAXAAAAGwAAACAAAAAKAAAAEwAAABYAAAAcAAAAHwAAACEAAAAUAAAAFQAAAB0AAAAeAAAAIgAAACMAAAAAAAAAAQAAAAUAAAAGAAAADgAAAA8AAAAbAAAAAgAAAAQAAAAHAAAADQAAABAAAAAaAAAAHAAAAAMAAAAIAAAADAAAABEAAAAZAAAAHQAAACYAAAAJAAAACwAAABIAAAAYAAAAHgAAACUAAAAnAAAACgAAABMAAAAXAAAAHwAAACQAAAAoAAAALQAAABQAAAAWAAAAIAAAACMAAAApAAAALAAAAC4AAAAVAAAAIQAAACIAAAAqAAAAKwAAAC8AAAAwAEH0ygILgxQBAAAABQAAAAYAAAAOAAAADwAAABsAAAAcAAAAAgAAAAQAAAAHAAAADQAAABAAAAAaAAAAHQAAACoAAAADAAAACAAAAAwAAAARAAAAGQAAAB4AAAApAAAAKwAAAAkAAAALAAAAEgAAABgAAAAfAAAAKAAAACwAAAA1AAAACgAAABMAAAAXAAAAIAAAACcAAAAtAAAANAAAADYAAAAUAAAAFgAAACEAAAAmAAAALgAAADMAAAA3AAAAPAAAABUAAAAiAAAAJQAAAC8AAAAyAAAAOAAAADsAAAA9AAAAIwAAACQAAAAwAAAAMQAAADkAAAA6AAAAPgAAAD8AAAAAAAAAAQAAAAMAAAAHAAAADwAAAB8AAAA/AAAAfwAAAP8AAAD/AQAA/wMAAP8HAAD/DwAA/x8AAP8/AAD/fwAAAQAAAAMAAAADAAAABAAAAAQAAAADAAAAAwAAAEpQRUdNRU0AJWxkJWMAAABABgAAgD4AAAAAAACIEwAAAAAAAIEBHVoOAoYlEAMUERIECwgUBdgDFwbaARkH5QAcCG8AHgk2ACEKGgAjCw0ACQwGAAoNAwAMDQEAjw9/WiQQJT8mEfIsJxJ8ICgTuRcqFIIRKxXvDC0WoQkuFy8HMBhcBTEZBgQzGgMDNBtAAjYcsQE4HUQBOR71ADsftwA8IIoAPiFoAD8iTgAgIzsAIQksAKUl4VpAJkxIQScNOkMo8S5EKR8mRSozH0YrqBlILBgVSS13EUoudA5LL/sLTTD4CU4xYQhPMgYHMDPNBTI03gQyNQ8EMzZjAzQ31AI1OFwCNjn4ATc6pAE4O2ABOTwlATo99gA7PssAPT+rAD0gjwDBQRJbUEIETVFDLEFSRNg3U0XoL1RGPClWR3kjV0jfHldJqRpISk4XSEskFEpMnBFKTWsPS05RDU1PtgtNMEAK0FEyWFhSHE1ZU45DWlTdO1tV7jRcVq4uXVeaKVZHFiXYWXBVX1qpTGBb2URhXCI+Y10kOGNetDJdVhcu32CoVmVhRk9mYuVHZ2PPQWhkPTxjXV43aWYxUmpnD0xraDlGZ2NeQelqJ1Zsa+dQbWeFS25tl1Vva09Q7m8QWnBtIlXwb+tZcXEdWnZvaWQAYm9vbABjaGFyAHNpZ25lZCBjaGFyAHVuc2lnbmVkIGNoYXIAc2hvcnQAdW5zaWduZWQgc2hvcnQAaW50AHVuc2lnbmVkIGludABsb25nAHVuc2lnbmVkIGxvbmcAaW50NjRfdAB1aW50NjRfdABmbG9hdABkb3VibGUAc3RkOjpzdHJpbmcAc3RkOjpiYXNpY19zdHJpbmc8dW5zaWduZWQgY2hhcj4Ac3RkOjp3c3RyaW5nAHN0ZDo6dTE2c3RyaW5nAHN0ZDo6dTMyc3RyaW5nAGVtc2NyaXB0ZW46OnZhbABlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8bG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgbG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50MTZfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGZsb2F0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxkb3VibGU+AE5TdDNfXzIxMmJhc2ljX3N0cmluZ0loTlNfMTFjaGFyX3RyYWl0c0loRUVOU185YWxsb2NhdG9ySWhFRUVFAAAAYPkAAN+rAAAAAAAAAQAAACiGAAAAAAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSXdOU18xMWNoYXJfdHJhaXRzSXdFRU5TXzlhbGxvY2F0b3JJd0VFRUUAAGD5AAA4rAAAAAAAAAEAAAAohgAAAAAAAE5TdDNfXzIxMmJhc2ljX3N0cmluZ0lEc05TXzExY2hhcl90cmFpdHNJRHNFRU5TXzlhbGxvY2F0b3JJRHNFRUVFAAAAYPkAAJCsAAAAAAAAAQAAACiGAAAAAAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSURpTlNfMTFjaGFyX3RyYWl0c0lEaUVFTlNfOWFsbG9jYXRvcklEaUVFRUUAAABg+QAA7KwAAAAAAAABAAAAKIYAAAAAAABOMTBlbXNjcmlwdGVuM3ZhbEUAANz4AABIrQAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJY0VFAADc+AAAZK0AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWFFRQAA3PgAAIytAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0loRUUAANz4AAC0rQAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJc0VFAADc+AAA3K0AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXRFRQAA3PgAAASuAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lpRUUAANz4AAAsrgAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJakVFAADc+AAAVK4AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWxFRQAA3PgAAHyuAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0ltRUUAANz4AACkrgAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJZkVFAADc+AAAzK4AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWRFRQAA3PgAAPSuAAAAAAAAGRJEOwI/LEcUPTMwChsGRktFNw9JDo4XA0AdPGkrNh9KLRwBICUpIQgMFRYiLhA4Pgs0MRhkdHV2L0EJfzkRI0MyQomKiwUEJignDSoeNYwHGkiTE5SVAEGA3wILpA5JbGxlZ2FsIGJ5dGUgc2VxdWVuY2UARG9tYWluIGVycm9yAFJlc3VsdCBub3QgcmVwcmVzZW50YWJsZQBOb3QgYSB0dHkAUGVybWlzc2lvbiBkZW5pZWQAT3BlcmF0aW9uIG5vdCBwZXJtaXR0ZWQATm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQBObyBzdWNoIHByb2Nlc3MARmlsZSBleGlzdHMAVmFsdWUgdG9vIGxhcmdlIGZvciBkYXRhIHR5cGUATm8gc3BhY2UgbGVmdCBvbiBkZXZpY2UAT3V0IG9mIG1lbW9yeQBSZXNvdXJjZSBidXN5AEludGVycnVwdGVkIHN5c3RlbSBjYWxsAFJlc291cmNlIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlAEludmFsaWQgc2VlawBDcm9zcy1kZXZpY2UgbGluawBSZWFkLW9ubHkgZmlsZSBzeXN0ZW0ARGlyZWN0b3J5IG5vdCBlbXB0eQBDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXIAT3BlcmF0aW9uIHRpbWVkIG91dABDb25uZWN0aW9uIHJlZnVzZWQASG9zdCBpcyBkb3duAEhvc3QgaXMgdW5yZWFjaGFibGUAQWRkcmVzcyBpbiB1c2UAQnJva2VuIHBpcGUASS9PIGVycm9yAE5vIHN1Y2ggZGV2aWNlIG9yIGFkZHJlc3MAQmxvY2sgZGV2aWNlIHJlcXVpcmVkAE5vIHN1Y2ggZGV2aWNlAE5vdCBhIGRpcmVjdG9yeQBJcyBhIGRpcmVjdG9yeQBUZXh0IGZpbGUgYnVzeQBFeGVjIGZvcm1hdCBlcnJvcgBJbnZhbGlkIGFyZ3VtZW50AEFyZ3VtZW50IGxpc3QgdG9vIGxvbmcAU3ltYm9saWMgbGluayBsb29wAEZpbGVuYW1lIHRvbyBsb25nAFRvbyBtYW55IG9wZW4gZmlsZXMgaW4gc3lzdGVtAE5vIGZpbGUgZGVzY3JpcHRvcnMgYXZhaWxhYmxlAEJhZCBmaWxlIGRlc2NyaXB0b3IATm8gY2hpbGQgcHJvY2VzcwBCYWQgYWRkcmVzcwBGaWxlIHRvbyBsYXJnZQBUb28gbWFueSBsaW5rcwBObyBsb2NrcyBhdmFpbGFibGUAUmVzb3VyY2UgZGVhZGxvY2sgd291bGQgb2NjdXIAU3RhdGUgbm90IHJlY292ZXJhYmxlAFByZXZpb3VzIG93bmVyIGRpZWQAT3BlcmF0aW9uIGNhbmNlbGVkAEZ1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZABObyBtZXNzYWdlIG9mIGRlc2lyZWQgdHlwZQBJZGVudGlmaWVyIHJlbW92ZWQARGV2aWNlIG5vdCBhIHN0cmVhbQBObyBkYXRhIGF2YWlsYWJsZQBEZXZpY2UgdGltZW91dABPdXQgb2Ygc3RyZWFtcyByZXNvdXJjZXMATGluayBoYXMgYmVlbiBzZXZlcmVkAFByb3RvY29sIGVycm9yAEJhZCBtZXNzYWdlAEZpbGUgZGVzY3JpcHRvciBpbiBiYWQgc3RhdGUATm90IGEgc29ja2V0AERlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQATWVzc2FnZSB0b28gbGFyZ2UAUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0AFByb3RvY29sIG5vdCBhdmFpbGFibGUAUHJvdG9jb2wgbm90IHN1cHBvcnRlZABTb2NrZXQgdHlwZSBub3Qgc3VwcG9ydGVkAE5vdCBzdXBwb3J0ZWQAUHJvdG9jb2wgZmFtaWx5IG5vdCBzdXBwb3J0ZWQAQWRkcmVzcyBmYW1pbHkgbm90IHN1cHBvcnRlZCBieSBwcm90b2NvbABBZGRyZXNzIG5vdCBhdmFpbGFibGUATmV0d29yayBpcyBkb3duAE5ldHdvcmsgdW5yZWFjaGFibGUAQ29ubmVjdGlvbiByZXNldCBieSBuZXR3b3JrAENvbm5lY3Rpb24gYWJvcnRlZABObyBidWZmZXIgc3BhY2UgYXZhaWxhYmxlAFNvY2tldCBpcyBjb25uZWN0ZWQAU29ja2V0IG5vdCBjb25uZWN0ZWQAQ2Fubm90IHNlbmQgYWZ0ZXIgc29ja2V0IHNodXRkb3duAE9wZXJhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzAE9wZXJhdGlvbiBpbiBwcm9ncmVzcwBTdGFsZSBmaWxlIGhhbmRsZQBSZW1vdGUgSS9PIGVycm9yAFF1b3RhIGV4Y2VlZGVkAE5vIG1lZGl1bSBmb3VuZABXcm9uZyBtZWRpdW0gdHlwZQBObyBl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3QCalBkAqCmVAGjOKAAJ7bQARJ8gAE6YygBwgmMAfnwjAA+5MgCn9Y4AFFbnACHxCAC1nSoAb35NAKUZUQC1+asAgt/WAJbdYQAWNgIAxDqfAIOioQBy7W0AOY16AIK4qQBrMlwARidbAAA07QDSAHcA/PRVAAFZTQDgcYAAQZODAwtdQPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQAAAAAAAPA/AAAAAAAA+D8AAAAAAAAAAAbQz0Pr/Uw+AEH7gwMLTEADuOI/OGPtPtoPST9emHs/2g/JP2k3rDFoISIztA8UM2ghojPbD0k/2w9Jv+TLFkDkyxbAAAAAAAAAAIDbD0lA2w9JwHJ3YQByd2EAQeyEAwsB6ABBk4UDCwX//////wBB2IUDC1ktKyAgIDBYMHgAKG51bGwpAAAAAAAAAAARAAoAERERAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABEADwoREREDCgcAAQAJCwsAAAkGCwAACwAGEQAAABEREQBBwYYDCyELAAAAAAAAAAARAAoKERERAAoAAAIACQsAAAAJAAsAAAsAQfuGAwsBDABBh4cDCxUMAAAAAAwAAAAACQwAAAAAAAwAAAwAQbWHAwsBDgBBwYcDCxUNAAAABA0AAAAACQ4AAAAAAA4AAA4AQe+HAwsBEABB+4cDCx4PAAAAAA8AAAAACRAAAAAAABAAABAAABIAAAASEhIAQbKIAwsOEgAAABISEgAAAAAAAAkAQeOIAwsBCwBB74gDCxUKAAAAAAoAAAAACQsAAAAAAAsAAAsAQZ2JAwsBDABBqYkDC5kFDAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAuAAAAAMj5AABg+gAAaW5maW5pdHkAbmFuAAAAANF0ngBXnb0qgHBSD///PicKAAAAZAAAAOgDAAAQJwAAoIYBAEBCDwCAlpgAAOH1BRgAAAA1AAAAcQAAAGv////O+///kr///wAAAAAAAAAA/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNN2ZWN0b3IAQdSOAwufDgIAAAADAAAABQAAAAcAAAALAAAADQAAABEAAAATAAAAFwAAAB0AAAAfAAAAJQAAACkAAAArAAAALwAAADUAAAA7AAAAPQAAAEMAAABHAAAASQAAAE8AAABTAAAAWQAAAGEAAABlAAAAZwAAAGsAAABtAAAAcQAAAH8AAACDAAAAiQAAAIsAAACVAAAAlwAAAJ0AAACjAAAApwAAAK0AAACzAAAAtQAAAL8AAADBAAAAxQAAAMcAAADTAAAAAQAAAAsAAAANAAAAEQAAABMAAAAXAAAAHQAAAB8AAAAlAAAAKQAAACsAAAAvAAAANQAAADsAAAA9AAAAQwAAAEcAAABJAAAATwAAAFMAAABZAAAAYQAAAGUAAABnAAAAawAAAG0AAABxAAAAeQAAAH8AAACDAAAAiQAAAIsAAACPAAAAlQAAAJcAAACdAAAAowAAAKcAAACpAAAArQAAALMAAAC1AAAAuwAAAL8AAADBAAAAxQAAAMcAAADRAAAAX19uZXh0X3ByaW1lIG92ZXJmbG93AAAA2PsAAAAAAABEyQAA7wAAAPAAAADxAAAA8gAAAPMAAAD0AAAA9QAAAPYAAAD3AAAA+AAAAPkAAAD6AAAA+wAAAPwAAABO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\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile);}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary);}var binary=tryParseAsDataURI(file);if(binary){return binary;}if(readBinary){return readBinary(file);}else{throw\"both async and sync fetching of the wasm failed\";}}catch(err){abort(err);}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\";}return response[\"arrayBuffer\"]();})[\"catch\"](function(){return getBinary(wasmBinaryFile);});}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response));},reject);});}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile);});}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"P\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"U\"];addOnInit(Module[\"asm\"][\"Q\"]);removeRunDependency(\"wasm-instantiate\");}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"]);}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){var result=WebAssembly.instantiate(binary,info);return result;}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason);});}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult);});});}else{return instantiateArrayBuffer(receiveInstantiationResult);}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports;}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false;}}instantiateAsync()[\"catch\"](readyPromiseReject);return{};}var tempDouble;var tempI64;var ASM_CONSTS={64620:function _(){var $a=arguments;var i=0;if(!artoolkit[\"NFTMarkerInfo\"]){artoolkit[\"NFTMarkerInfo\"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]};}var markerInfo=artoolkit[\"NFTMarkerInfo\"];markerInfo[\"id\"]=$a[i++];markerInfo[\"error\"]=$a[i++];markerInfo[\"found\"]=1;markerInfo[\"pose\"][0]=$a[i++];markerInfo[\"pose\"][1]=$a[i++];markerInfo[\"pose\"][2]=$a[i++];markerInfo[\"pose\"][3]=$a[i++];markerInfo[\"pose\"][4]=$a[i++];markerInfo[\"pose\"][5]=$a[i++];markerInfo[\"pose\"][6]=$a[i++];markerInfo[\"pose\"][7]=$a[i++];markerInfo[\"pose\"][8]=$a[i++];markerInfo[\"pose\"][9]=$a[i++];markerInfo[\"pose\"][10]=$a[i++];markerInfo[\"pose\"][11]=$a[i++];},65317:function _(){var $a=arguments;var i=0;if(!artoolkit[\"NFTMarkerInfo\"]){artoolkit[\"NFTMarkerInfo\"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]};}var markerInfo=artoolkit[\"NFTMarkerInfo\"];markerInfo[\"id\"]=$a[i++];markerInfo[\"error\"]=-1;markerInfo[\"found\"]=0;markerInfo[\"pose\"][0]=0;markerInfo[\"pose\"][1]=0;markerInfo[\"pose\"][2]=0;markerInfo[\"pose\"][3]=0;markerInfo[\"pose\"][4]=0;markerInfo[\"pose\"][5]=0;markerInfo[\"pose\"][6]=0;markerInfo[\"pose\"][7]=0;markerInfo[\"pose\"][8]=0;markerInfo[\"pose\"][9]=0;markerInfo[\"pose\"][10]=0;markerInfo[\"pose\"][11]=0;},65937:function _($0,$1,$2,$3){if(!artoolkit[\"multiEachMarkerInfo\"]){artoolkit[\"multiEachMarkerInfo\"]={};}var multiEachMarker=artoolkit[\"multiEachMarkerInfo\"];multiEachMarker[\"visible\"]=$0;multiEachMarker[\"pattId\"]=$1;multiEachMarker[\"pattType\"]=$2;multiEachMarker[\"width\"]=$3;},66211:function _($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11){var $a=arguments;var i=12;if(!artoolkit[\"markerInfo\"]){artoolkit[\"markerInfo\"]={pos:[0,0],line:[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],vertex:[[0,0],[0,0],[0,0],[0,0]]};}var markerInfo=artoolkit[\"markerInfo\"];markerInfo[\"area\"]=$0;markerInfo[\"id\"]=$1;markerInfo[\"idPatt\"]=$2;markerInfo[\"idMatrix\"]=$3;markerInfo[\"dir\"]=$4;markerInfo[\"dirPatt\"]=$5;markerInfo[\"dirMatrix\"]=$6;markerInfo[\"cf\"]=$7;markerInfo[\"cfPatt\"]=$8;markerInfo[\"cfMatrix\"]=$9;markerInfo[\"pos\"][0]=$10;markerInfo[\"pos\"][1]=$11;markerInfo[\"line\"][0][0]=$a[i++];markerInfo[\"line\"][0][1]=$a[i++];markerInfo[\"line\"][0][2]=$a[i++];markerInfo[\"line\"][1][0]=$a[i++];markerInfo[\"line\"][1][1]=$a[i++];markerInfo[\"line\"][1][2]=$a[i++];markerInfo[\"line\"][2][0]=$a[i++];markerInfo[\"line\"][2][1]=$a[i++];markerInfo[\"line\"][2][2]=$a[i++];markerInfo[\"line\"][3][0]=$a[i++];markerInfo[\"line\"][3][1]=$a[i++];markerInfo[\"line\"][3][2]=$a[i++];markerInfo[\"vertex\"][0][0]=$a[i++];markerInfo[\"vertex\"][0][1]=$a[i++];markerInfo[\"vertex\"][1][0]=$a[i++];markerInfo[\"vertex\"][1][1]=$a[i++];markerInfo[\"vertex\"][2][0]=$a[i++];markerInfo[\"vertex\"][2][1]=$a[i++];markerInfo[\"vertex\"][3][0]=$a[i++];markerInfo[\"vertex\"][3][1]=$a[i++];markerInfo[\"errorCorrected\"]=$a[i++];},67546:function _($0,$1,$2,$3,$4,$5){if(!artoolkit[\"frameMalloc\"]){artoolkit[\"frameMalloc\"]={};}var frameMalloc=artoolkit[\"frameMalloc\"];frameMalloc[\"framepointer\"]=$1;frameMalloc[\"framesize\"]=$2;frameMalloc[\"camera\"]=$3;frameMalloc[\"transform\"]=$4;frameMalloc[\"videoLumaPointer\"]=$5;}};function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue;}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)();}else{wasmTable.get(func)(callback.arg);}}else{func(callback.arg===undefined?null:callback.arg);}}}var runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0;}var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size){return _malloc(size+ExceptionInfoAttrs.SIZE)+ExceptionInfoAttrs.SIZE;}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-ExceptionInfoAttrs.SIZE;this.set_type=function(type){HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]=type;};this.get_type=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2];};this.set_destructor=function(destructor){HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]=destructor;};this.get_destructor=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2];};this.set_refcount=function(refcount){HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=refcount;};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]=caught;};this.get_caught=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]!=0;};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]=rethrown;};this.get_rethrown=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]!=0;};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false);};this.add_ref=function(){var value=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=value+1;};this.release_ref=function(){var prev=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=prev-1;return prev===1;};}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr;}function _tzset(){if(_tzset.called)return;_tzset.called=true;var currentYear=new Date().getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[__get_timezone()>>2]=stdTimezoneOffset*60;HEAP32[__get_daylight()>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return match?match[1]:\"GMT\";}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr;}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr;}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr;}function ___localtime_r(a0,a1){return _localtime_r(a0,a1);}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value;}var PATH={splitPath:function splitPath(filename){var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;return splitPathRe.exec(filename).slice(1);},normalizeArray:function normalizeArray(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last===\".\"){parts.splice(i,1);}else if(last===\"..\"){parts.splice(i,1);up++;}else if(up){parts.splice(i,1);up--;}}if(allowAboveRoot){for(;up;up--){parts.unshift(\"..\");}}return parts;},normalize:function normalize(path){var isAbsolute=path.charAt(0)===\"/\",trailingSlash=path.substr(-1)===\"/\";path=PATH.normalizeArray(path.split(\"/\").filter(function(p){return!!p;}),!isAbsolute).join(\"/\");if(!path&&!isAbsolute){path=\".\";}if(path&&trailingSlash){path+=\"/\";}return(isAbsolute?\"/\":\"\")+path;},dirname:function dirname(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return\".\";}if(dir){dir=dir.substr(0,dir.length-1);}return root+dir;},basename:function basename(path){if(path===\"/\")return\"/\";path=PATH.normalize(path);path=path.replace(/\\/$/,\"\");var lastSlash=path.lastIndexOf(\"/\");if(lastSlash===-1)return path;return path.substr(lastSlash+1);},extname:function extname(path){return PATH.splitPath(path)[3];},join:function join(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join(\"/\"));},join2:function join2(l,r){return PATH.normalize(l+\"/\"+r);}};function getRandomDevice(){if((typeof crypto===\"undefined\"?\"undefined\":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(crypto))===\"object\"&&typeof crypto[\"getRandomValues\"]===\"function\"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0];};}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=__webpack_require__(/*! crypto */ \"?9d41\");return function(){return crypto_module[\"randomBytes\"](1)[0];};}catch(e){}}return function(){abort(\"randomDevice\");};}var PATH_FS={resolve:function resolve(){var resolvedPath=\"\",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!==\"string\"){throw new TypeError(\"Arguments to path.resolve must be strings\");}else if(!path){return\"\";}resolvedPath=path+\"/\"+resolvedPath;resolvedAbsolute=path.charAt(0)===\"/\";}resolvedPath=PATH.normalizeArray(resolvedPath.split(\"/\").filter(function(p){return!!p;}),!resolvedAbsolute).join(\"/\");return(resolvedAbsolute?\"/\":\"\")+resolvedPath||\".\";},relative:function relative(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!==\"\")break;}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!==\"\")break;}if(start>end)return[];return arr.slice(start,end-start+1);}var fromParts=trim(from.split(\"/\"));var toParts=trim(to.split(\"/\"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break;}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push(\"..\");}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join(\"/\");}};var TTY={ttys:[],init:function init(){},shutdown:function shutdown(){},register:function register(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops);},stream_ops:{open:function open(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43);}stream.tty=tty;stream.seekable=false;},close:function close(stream){stream.tty.ops.flush(stream.tty);},flush:function flush(stream){stream.tty.ops.flush(stream.tty);},read:function read(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60);}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty);}catch(e){throw new FS.ErrnoError(29);}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6);}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead;},write:function write(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60);}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i]);}}catch(e){throw new FS.ErrnoError(29);}if(length){stream.node.timestamp=Date.now();}return i;}},default_tty_ops:{get_char:function get_char(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc?Buffer.alloc(BUFSIZE):new Buffer(BUFSIZE);var bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,BUFSIZE,null);}catch(e){if(e.toString().includes(\"EOF\"))bytesRead=0;else throw e;}if(bytesRead>0){result=buf.slice(0,bytesRead).toString(\"utf-8\");}else{result=null;}}else if(typeof window!=\"undefined\"&&typeof window.prompt==\"function\"){result=window.prompt(\"Input: \");if(result!==null){result+=\"\\n\";}}else if(typeof readline==\"function\"){result=readline();if(result!==null){result+=\"\\n\";}}if(!result){return null;}tty.input=intArrayFromString(result,true);}return tty.input.shift();},put_char:function put_char(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[];}else{if(val!=0)tty.output.push(val);}},flush:function flush(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[];}}},default_tty1_ops:{put_char:function put_char(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[];}else{if(val!=0)tty.output.push(val);}},flush:function flush(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[];}}}};function mmapAlloc(size){var alignedSize=alignMemory(size,65536);var ptr=_malloc(alignedSize);while(size<alignedSize){HEAP8[ptr+size++]=0;}return ptr;}var MEMFS={ops_table:null,mount:function mount(_mount){return MEMFS.createNode(null,\"/\",16384|511,0);},createNode:function createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63);}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={};}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null;}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream;}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream;}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp;}return node;},getFileDataAsTypedArray:function getFileDataAsTypedArray(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents);},expandFileStorage:function expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);},resizeFileStorage:function resizeFileStorage(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)));}node.usedBytes=newSize;}},node_ops:{getattr:function getattr(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096;}else if(FS.isFile(node.mode)){attr.size=node.usedBytes;}else if(FS.isLink(node.mode)){attr.size=node.link.length;}else{attr.size=0;}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr;},setattr:function setattr(node,attr){if(attr.mode!==undefined){node.mode=attr.mode;}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp;}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size);}},lookup:function lookup(parent,name){throw FS.genericErrors[44];},mknod:function mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev);},rename:function rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55);}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp;old_node.parent=new_dir;},unlink:function unlink(parent,name){delete parent.contents[name];parent.timestamp=Date.now();},rmdir:function rmdir(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55);}delete parent.contents[name];parent.timestamp=Date.now();},readdir:function readdir(node){var entries=[\".\",\"..\"];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue;}entries.push(key);}return entries;},symlink:function symlink(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node;},readlink:function readlink(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28);}return node.link;}},stream_ops:{read:function read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset);}else{for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i];}}return size;},write:function write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false;}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length;}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length;}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length;}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position);}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i];}}node.usedBytes=Math.max(node.usedBytes,position+length);return length;},llseek:function llseek(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position;}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes;}}if(position<0){throw new FS.ErrnoError(28);}return position;},allocate:function allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length);},mmap:function mmap(stream,address,length,position,prot,flags){if(address!==0){throw new FS.ErrnoError(28);}if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43);}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset;}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length);}else{contents=Array.prototype.slice.call(contents,position,position+length);}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48);}HEAP8.set(contents,ptr);}return{ptr:ptr,allocated:allocated};},msync:function msync(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43);}if(mmapFlags&2){return 0;}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0;}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:\"/\",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function lookupPath(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:\"\",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key];}}if(opts.recurse_count>8){throw new FS.ErrnoError(32);}var parts=PATH.normalizeArray(path.split(\"/\").filter(function(p){return!!p;}),false);var current=FS.root;var current_path=\"/\";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break;}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root;}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32);}}}}return{path:current_path,node:current};},getPath:function getPath(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!==\"/\"?mount+\"/\"+path:mount+path;}path=path?node.name+\"/\"+path:node.name;node=node.parent;}},hashName:function hashName(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0;}return(parentid+hash>>>0)%FS.nameTable.length;},hashAddNode:function hashAddNode(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node;},hashRemoveNode:function hashRemoveNode(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next;}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break;}current=current.name_next;}}},lookupNode:function lookupNode(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent);}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node;}}return FS.lookup(parent,name);},createNode:function createNode(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node;},destroyNode:function destroyNode(node){FS.hashRemoveNode(node);},isRoot:function isRoot(node){return node===node.parent;},isMountpoint:function isMountpoint(node){return!!node.mounted;},isFile:function isFile(mode){return(mode&61440)===32768;},isDir:function isDir(mode){return(mode&61440)===16384;},isLink:function isLink(mode){return(mode&61440)===40960;},isChrdev:function isChrdev(mode){return(mode&61440)===8192;},isBlkdev:function isBlkdev(mode){return(mode&61440)===24576;},isFIFO:function isFIFO(mode){return(mode&61440)===4096;},isSocket:function isSocket(mode){return(mode&49152)===49152;},flagModes:{\"r\":0,\"r+\":2,\"w\":577,\"w+\":578,\"a\":1089,\"a+\":1090},modeStringToFlags:function modeStringToFlags(str){var flags=FS.flagModes[str];if(typeof flags===\"undefined\"){throw new Error(\"Unknown file open mode: \"+str);}return flags;},flagsToPermissionString:function flagsToPermissionString(flag){var perms=[\"r\",\"w\",\"rw\"][flag&3];if(flag&512){perms+=\"w\";}return perms;},nodePermissions:function nodePermissions(node,perms){if(FS.ignorePermissions){return 0;}if(perms.includes(\"r\")&&!(node.mode&292)){return 2;}else if(perms.includes(\"w\")&&!(node.mode&146)){return 2;}else if(perms.includes(\"x\")&&!(node.mode&73)){return 2;}return 0;},mayLookup:function mayLookup(dir){var errCode=FS.nodePermissions(dir,\"x\");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0;},mayCreate:function mayCreate(dir,name){try{var node=FS.lookupNode(dir,name);return 20;}catch(e){}return FS.nodePermissions(dir,\"wx\");},mayDelete:function mayDelete(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name);}catch(e){return e.errno;}var errCode=FS.nodePermissions(dir,\"wx\");if(errCode){return errCode;}if(isdir){if(!FS.isDir(node.mode)){return 54;}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10;}}else{if(FS.isDir(node.mode)){return 31;}}return 0;},mayOpen:function mayOpen(node,flags){if(!node){return 44;}if(FS.isLink(node.mode)){return 32;}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!==\"r\"||flags&512){return 31;}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags));},MAX_OPEN_FDS:4096,nextfd:function nextfd(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd;}}throw new FS.ErrnoError(33);},getStream:function getStream(fd){return FS.streams[fd];},createStream:function createStream(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function get(){return this.node;},set:function set(val){this.node=val;}},isRead:{get:function get(){return(this.flags&2097155)!==1;}},isWrite:{get:function get(){return(this.flags&2097155)!==0;}},isAppend:{get:function get(){return this.flags&1024;}}};}var newStream=new FS.FSStream();for(var p in stream){newStream[p]=stream[p];}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream;},closeStream:function closeStream(fd){FS.streams[fd]=null;},chrdev_stream_ops:{open:function open(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream);}},llseek:function llseek(){throw new FS.ErrnoError(70);}},major:function major(dev){return dev>>8;},minor:function minor(dev){return dev&255;},makedev:function makedev(ma,mi){return ma<<8|mi;},registerDevice:function registerDevice(dev,ops){FS.devices[dev]={stream_ops:ops};},getDevice:function getDevice(dev){return FS.devices[dev];},getMounts:function getMounts(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts);}return mounts;},syncfs:function syncfs(populate,callback){if(typeof populate===\"function\"){callback=populate;populate=false;}FS.syncFSRequests++;if(FS.syncFSRequests>1){err(\"warning: \"+FS.syncFSRequests+\" FS.syncfs operations in flight at once, probably just doing extra work\");}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode);}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode);}return;}if(++completed>=mounts.length){doCallback(null);}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null);}mount.type.syncfs(mount,populate,done);});},mount:function mount(type,opts,mountpoint){var root=mountpoint===\"/\";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10);}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10);}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54);}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot;}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount);}}return mountRoot;},unmount:function unmount(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28);}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current);}current=next;}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1);},lookup:function lookup(parent,name){return parent.node_ops.lookup(parent,name);},mknod:function mknod(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name===\".\"||name===\"..\"){throw new FS.ErrnoError(28);}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode);}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63);}return parent.node_ops.mknod(parent,name,mode,dev);},create:function create(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0);},mkdir:function mkdir(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0);},mkdirTree:function mkdirTree(path,mode){var dirs=path.split(\"/\");var d=\"\";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+=\"/\"+dirs[i];try{FS.mkdir(d,mode);}catch(e){if(e.errno!=20)throw e;}}},mkdev:function mkdev(path,mode,dev){if(typeof dev===\"undefined\"){dev=mode;mode=438;}mode|=8192;return FS.mknod(path,mode,dev);},symlink:function symlink(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44);}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44);}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode);}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63);}return parent.node_ops.symlink(parent,newname,oldpath);},rename:function rename(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75);}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!==\".\"){throw new FS.ErrnoError(28);}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!==\".\"){throw new FS.ErrnoError(55);}var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(old_node===new_node){return;}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode);}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode);}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63);}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10);}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,\"w\");if(errCode){throw new FS.ErrnoError(errCode);}}try{if(FS.trackingDelegate[\"willMovePath\"]){FS.trackingDelegate[\"willMovePath\"](old_path,new_path);}}catch(e){err(\"FS.trackingDelegate['willMovePath']('\"+old_path+\"', '\"+new_path+\"') threw an exception: \"+e.message);}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);}catch(e){throw e;}finally{FS.hashAddNode(old_node);}try{if(FS.trackingDelegate[\"onMovePath\"])FS.trackingDelegate[\"onMovePath\"](old_path,new_path);}catch(e){err(\"FS.trackingDelegate['onMovePath']('\"+old_path+\"', '\"+new_path+\"') threw an exception: \"+e.message);}},rmdir:function rmdir(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode);}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63);}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10);}try{if(FS.trackingDelegate[\"willDeletePath\"]){FS.trackingDelegate[\"willDeletePath\"](path);}}catch(e){err(\"FS.trackingDelegate['willDeletePath']('\"+path+\"') threw an exception: \"+e.message);}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate[\"onDeletePath\"])FS.trackingDelegate[\"onDeletePath\"](path);}catch(e){err(\"FS.trackingDelegate['onDeletePath']('\"+path+\"') threw an exception: \"+e.message);}},readdir:function readdir(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54);}return node.node_ops.readdir(node);},unlink:function unlink(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode);}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63);}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10);}try{if(FS.trackingDelegate[\"willDeletePath\"]){FS.trackingDelegate[\"willDeletePath\"](path);}}catch(e){err(\"FS.trackingDelegate['willDeletePath']('\"+path+\"') threw an exception: \"+e.message);}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate[\"onDeletePath\"])FS.trackingDelegate[\"onDeletePath\"](path);}catch(e){err(\"FS.trackingDelegate['onDeletePath']('\"+path+\"') threw an exception: \"+e.message);}},readlink:function readlink(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44);}if(!link.node_ops.readlink){throw new FS.ErrnoError(28);}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link));},stat:function stat(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44);}if(!node.node_ops.getattr){throw new FS.ErrnoError(63);}return node.node_ops.getattr(node);},lstat:function lstat(path){return FS.stat(path,true);},chmod:function chmod(path,mode,dontFollow){var node;if(typeof path===\"string\"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else{node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63);}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()});},lchmod:function lchmod(path,mode){FS.chmod(path,mode,true);},fchmod:function fchmod(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8);}FS.chmod(stream.node,mode);},chown:function chown(path,uid,gid,dontFollow){var node;if(typeof path===\"string\"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else{node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63);}node.node_ops.setattr(node,{timestamp:Date.now()});},lchown:function lchown(path,uid,gid){FS.chown(path,uid,gid,true);},fchown:function fchown(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8);}FS.chown(stream.node,uid,gid);},truncate:function truncate(path,len){if(len<0){throw new FS.ErrnoError(28);}var node;if(typeof path===\"string\"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;}else{node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63);}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31);}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28);}var errCode=FS.nodePermissions(node,\"w\");if(errCode){throw new FS.ErrnoError(errCode);}node.node_ops.setattr(node,{size:len,timestamp:Date.now()});},ftruncate:function ftruncate(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8);}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28);}FS.truncate(stream.node,len);},utime:function utime(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)});},open:function open(path,flags,mode,fd_start,fd_end){if(path===\"\"){throw new FS.ErrnoError(44);}flags=typeof flags===\"string\"?FS.modeStringToFlags(flags):flags;mode=typeof mode===\"undefined\"?438:mode;if(flags&64){mode=mode&4095|32768;}else{mode=0;}var node;if((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(path)===\"object\"){node=path;}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node;}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20);}}else{node=FS.mknod(path,mode,0);created=true;}}if(!node){throw new FS.ErrnoError(44);}if(FS.isChrdev(node.mode)){flags&=~512;}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54);}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode);}}if(flags&512){FS.truncate(node,0);}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream);}if(Module[\"logReadFiles\"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err(\"FS.trackingDelegate error on read file: \"+path);}}try{if(FS.trackingDelegate[\"onOpenFile\"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ;}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE;}FS.trackingDelegate[\"onOpenFile\"](path,trackingFlags);}}catch(e){err(\"FS.trackingDelegate['onOpenFile']('\"+path+\"', flags) threw an exception: \"+e.message);}return stream;},close:function close(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream);}}catch(e){throw e;}finally{FS.closeStream(stream.fd);}stream.fd=null;},isClosed:function isClosed(stream){return stream.fd===null;},llseek:function llseek(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70);}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28);}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position;},read:function read(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28);}if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8);}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31);}if(!stream.stream_ops.read){throw new FS.ErrnoError(28);}var seeking=typeof position!==\"undefined\";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70);}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead;},write:function write(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28);}if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8);}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31);}if(!stream.stream_ops.write){throw new FS.ErrnoError(28);}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2);}var seeking=typeof position!==\"undefined\";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70);}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate[\"onWriteToFile\"])FS.trackingDelegate[\"onWriteToFile\"](stream.path);}catch(e){err(\"FS.trackingDelegate['onWriteToFile']('\"+stream.path+\"') threw an exception: \"+e.message);}return bytesWritten;},allocate:function allocate(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if(offset<0||length<=0){throw new FS.ErrnoError(28);}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8);}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43);}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138);}stream.stream_ops.allocate(stream,offset,length);},mmap:function mmap(stream,address,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2);}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2);}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43);}return stream.stream_ops.mmap(stream,address,length,position,prot,flags);},msync:function msync(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0;}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags);},munmap:function munmap(stream){return 0;},ioctl:function ioctl(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59);}return stream.stream_ops.ioctl(stream,cmd,arg);},readFile:function readFile(path,opts){opts=opts||{};opts.flags=opts.flags||0;opts.encoding=opts.encoding||\"binary\";if(opts.encoding!==\"utf8\"&&opts.encoding!==\"binary\"){throw new Error('Invalid encoding type \"'+opts.encoding+'\"');}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding===\"utf8\"){ret=UTF8ArrayToString(buf,0);}else if(opts.encoding===\"binary\"){ret=buf;}FS.close(stream);return ret;},writeFile:function writeFile(path,data,opts){opts=opts||{};opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data===\"string\"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn);}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn);}else{throw new Error(\"Unsupported data type\");}FS.close(stream);},cwd:function cwd(){return FS.currentPath;},chdir:function chdir(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44);}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54);}var errCode=FS.nodePermissions(lookup.node,\"x\");if(errCode){throw new FS.ErrnoError(errCode);}FS.currentPath=lookup.path;},createDefaultDirectories:function createDefaultDirectories(){FS.mkdir(\"/tmp\");FS.mkdir(\"/home\");FS.mkdir(\"/home/web_user\");},createDefaultDevices:function createDefaultDevices(){FS.mkdir(\"/dev\");FS.registerDevice(FS.makedev(1,3),{read:function read(){return 0;},write:function write(stream,buffer,offset,length,pos){return length;}});FS.mkdev(\"/dev/null\",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev(\"/dev/tty\",FS.makedev(5,0));FS.mkdev(\"/dev/tty1\",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice(\"/dev\",\"random\",random_device);FS.createDevice(\"/dev\",\"urandom\",random_device);FS.mkdir(\"/dev/shm\");FS.mkdir(\"/dev/shm/tmp\");},createSpecialDirectories:function createSpecialDirectories(){FS.mkdir(\"/proc\");var proc_self=FS.mkdir(\"/proc/self\");FS.mkdir(\"/proc/self/fd\");FS.mount({mount:function mount(){var node=FS.createNode(proc_self,\"fd\",16384|511,73);node.node_ops={lookup:function lookup(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:\"fake\"},node_ops:{readlink:function readlink(){return stream.path;}}};ret.parent=ret;return ret;}};return node;}},{},\"/proc/self/fd\");},createStandardStreams:function createStandardStreams(){if(Module[\"stdin\"]){FS.createDevice(\"/dev\",\"stdin\",Module[\"stdin\"]);}else{FS.symlink(\"/dev/tty\",\"/dev/stdin\");}if(Module[\"stdout\"]){FS.createDevice(\"/dev\",\"stdout\",null,Module[\"stdout\"]);}else{FS.symlink(\"/dev/tty\",\"/dev/stdout\");}if(Module[\"stderr\"]){FS.createDevice(\"/dev\",\"stderr\",null,Module[\"stderr\"]);}else{FS.symlink(\"/dev/tty1\",\"/dev/stderr\");}var stdin=FS.open(\"/dev/stdin\",0);var stdout=FS.open(\"/dev/stdout\",1);var stderr=FS.open(\"/dev/stderr\",1);},ensureErrnoError:function ensureErrnoError(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno;};this.setErrno(errno);this.message=\"FS error\";};FS.ErrnoError.prototype=new Error();FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack=\"<generic error, no stack>\";});},staticInit:function staticInit(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},\"/\");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={\"MEMFS\":MEMFS};},init:function init(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module[\"stdin\"]=input||Module[\"stdin\"];Module[\"stdout\"]=output||Module[\"stdout\"];Module[\"stderr\"]=error||Module[\"stderr\"];FS.createStandardStreams();},quit:function quit(){FS.init.initialized=false;var fflush=Module[\"_fflush\"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue;}FS.close(stream);}},getMode:function getMode(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode;},findObject:function findObject(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object;}else{return null;}},analyzePath:function analyzePath(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path;}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path===\"/\";}catch(e){ret.error=e.errno;}return ret;},createPath:function createPath(parent,path,canRead,canWrite){parent=typeof parent===\"string\"?parent:FS.getPath(parent);var parts=path.split(\"/\").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current);}catch(e){}parent=current;}return current;},createFile:function createFile(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent===\"string\"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode);},createDataFile:function createDataFile(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent===\"string\"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data===\"string\"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i){arr[i]=data.charCodeAt(i);}data=arr;}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode);}return node;},createDevice:function createDevice(parent,name,input,output){var path=PATH.join2(typeof parent===\"string\"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function open(stream){stream.seekable=false;},close:function close(stream){if(output&&output.buffer&&output.buffer.length){output(10);}},read:function read(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input();}catch(e){throw new FS.ErrnoError(29);}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6);}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead;},write:function write(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i]);}catch(e){throw new FS.ErrnoError(29);}}if(length){stream.node.timestamp=Date.now();}return i;}});return FS.mkdev(path,mode,dev);},forceLoadFile:function forceLoadFile(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!==\"undefined\"){throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length;}catch(e){throw new FS.ErrnoError(29);}}else{throw new Error(\"Cannot load without read() or XMLHttpRequest.\");}},createLazyFile:function createLazyFile(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[];}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined;}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset];};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter;};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest();xhr.open(\"HEAD\",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error(\"Couldn't load \"+url+\". Status: \"+xhr.status);var datalength=Number(xhr.getResponseHeader(\"Content-length\"));var header;var hasByteServing=(header=xhr.getResponseHeader(\"Accept-Ranges\"))&&header===\"bytes\";var usesGzip=(header=xhr.getResponseHeader(\"Content-Encoding\"))&&header===\"gzip\";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function doXHR(from,to){if(from>to)throw new Error(\"invalid range (\"+from+\", \"+to+\") or no bytes requested!\");if(to>datalength-1)throw new Error(\"only \"+datalength+\" bytes available! programmer error!\");var xhr=new XMLHttpRequest();xhr.open(\"GET\",url,false);if(datalength!==chunkSize)xhr.setRequestHeader(\"Range\",\"bytes=\"+from+\"-\"+to);if(typeof Uint8Array!=\"undefined\")xhr.responseType=\"arraybuffer\";if(xhr.overrideMimeType){xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error(\"Couldn't load \"+url+\". Status: \"+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[]);}else{return intArrayFromString(xhr.responseText||\"\",true);}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]===\"undefined\"){lazyArray.chunks[chunkNum]=doXHR(start,end);}if(typeof lazyArray.chunks[chunkNum]===\"undefined\")throw new Error(\"doXHR failed!\");return lazyArray.chunks[chunkNum];});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out(\"LazyFiles on gzip forces download of the whole file when length is accessed\");}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true;};if(typeof XMLHttpRequest!==\"undefined\"){if(!ENVIRONMENT_IS_WORKER)throw\"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";var lazyArray=new LazyUint8Array();Object.defineProperties(lazyArray,{length:{get:function get(){if(!this.lengthKnown){this.cacheLength();}return this._length;}},chunkSize:{get:function get(){if(!this.lengthKnown){this.cacheLength();}return this._chunkSize;}}});var properties={isDevice:false,contents:lazyArray};}else{var properties={isDevice:false,url:url};}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents;}else if(properties.url){node.contents=null;node.url=properties.url;}Object.defineProperties(node,{usedBytes:{get:function get(){return this.contents.length;}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){FS.forceLoadFile(node);return fn.apply(null,arguments);};});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){FS.forceLoadFile(node);var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i];}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i);}}return size;};node.stream_ops=stream_ops;return node;},createPreloadedFile:function createPreloadedFile(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency(\"cp \"+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn);}if(onload)onload();removeRunDependency(dep);}var handled=false;Module[\"preloadPlugins\"].forEach(function(plugin){if(handled)return;if(plugin[\"canHandle\"](fullname)){plugin[\"handle\"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep);});handled=true;}});if(!handled)finish(byteArray);}addRunDependency(dep);if(typeof url==\"string\"){Browser.asyncLoad(url,function(byteArray){processData(byteArray);},onerror);}else{processData(url);}},indexedDB:function indexedDB(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;},DB_NAME:function DB_NAME(){return\"EM_FS_\"+window.location.pathname;},DB_VERSION:20,DB_STORE_NAME:\"FILE_DATA\",saveFilesToDB:function saveFilesToDB(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e);}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out(\"creating db\");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME);};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],\"readwrite\");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish();};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;},loadFilesFromDB:function loadFilesFromDB(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e);}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],\"readonly\");}catch(e){onerror(e);return;}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path);}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish();};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function calculateAt(dirfd,path,allowEmpty){if(path[0]===\"/\"){return path;}var dir;if(dirfd===-100){dir=FS.cwd();}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path;}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44);}return dir;}return PATH.join2(dir,path);},doStat:function doStat(func,path,buf){try{var stat=func(path);}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54;}throw e;}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0;},doMsync:function doMsync(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags);},doMkdir:function doMkdir(path,mode){path=PATH.normalize(path);if(path[path.length-1]===\"/\")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0;},doMknod:function doMknod(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28;}FS.mknod(path,mode,dev);return 0;},doReadlink:function doReadlink(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len;},doAccess:function doAccess(path,amode){if(amode&~7){return-28;}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-44;}var perms=\"\";if(amode&4)perms+=\"r\";if(amode&2)perms+=\"w\";if(amode&1)perms+=\"x\";if(perms&&FS.nodePermissions(node,perms)){return-2;}return 0;},doDup:function doDup(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd;},doReadv:function doReadv(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break;}return ret;},doWritev:function doWritev(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;}return ret;},varargs:undefined,get:function get(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret;},getStr:function getStr(ptr){var ret=UTF8ToString(ptr);return ret;},getStreamFromFD:function getStreamFromFD(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream;},get64:function get64(low,high){return low;}};function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28;}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd;}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0;}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0;}case 13:case 14:return 0;case 16:case 8:return-28;case 9:setErrNo(28);return-1;default:{return-28;}}}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno;}}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0;}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0;}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0;}case 21520:{if(!stream.tty)return-59;return-28;}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp);}case 21523:{if(!stream.tty)return-59;return 0;}case 21524:{if(!stream.tty)return-59;return 0;}default:abort(\"bad ioctl syscall \"+op);}}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno;}}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path);var mode=varargs?SYSCALLS.get():0;var stream=FS.open(pathname,flags,mode);return stream.fd;}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno;}}function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+size);}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i);}embind_charCodes=codes;}var embind_charCodes=undefined;function readLatin1String(ptr){var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]];}return ret;}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return\"_unknown\";}name=name.replace(/[^a-zA-Z0-9_]/g,\"$\");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return\"_\"+name;}else{return name;}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function(\"body\",\"return function \"+name+\"() {\\n\"+'    \"use strict\";'+\"    return body.apply(this, arguments);\\n\"+\"};\\n\")(body);}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+\"\\n\"+stack.replace(/^Error(:[^\\n]*)?\\n/,\"\");}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name;}else{return this.name+\": \"+this.message;}};return errorClass;}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message);}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message);}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes;});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError(\"Mismatched type converter count\");}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i]);}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt];}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[];}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters);}});}});if(0===unregisteredTypes.length){onComplete(typeConverters);}}function registerType(rawType,registeredInstance,options){options=options||{};if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");}var name=registeredInstance.name;if(!rawType){throwBindingError('type \"'+name+'\" must have a positive integer typeid pointer');}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return;}else{throwBindingError(\"Cannot register type '\"+name+\"' twice\");}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb();});}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function fromWireType(wt){return!!wt;},\"toWireType\":function toWireType(destructors,o){return o?trueValue:falseValue;},\"argPackAdvance\":8,\"readValueFromPointer\":function readValueFromPointer(pointer){var heap;if(size===1){heap=HEAP8;}else if(size===2){heap=HEAP16;}else if(size===4){heap=HEAP32;}else{throw new TypeError(\"Unknown boolean type size: \"+name);}return this[\"fromWireType\"](heap[pointer>>shift]);},destructorFunction:null});}function __embind_register_constant(name,type,value){name=readLatin1String(name);whenDependentTypesAreResolved([],[type],function(type){type=type[0];Module[name]=type[\"fromWireType\"](value);return[];});}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle);}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count;}}return count;}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i];}}return null;}function init_emval(){Module[\"count_emval_handles\"]=count_emval_handles;Module[\"get_first_emval\"]=get_first_emval;}function __emval_register(value){switch(value){case undefined:{return 1;}case null:{return 2;}case true:{return 3;}case false:{return 4;}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle;}}}function simpleReadValueFromPointer(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2]);}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function fromWireType(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv;},\"toWireType\":function toWireType(destructors,value){return __emval_register(value);},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:null});}function _embind_repr(v){if(v===null){return\"null\";}var t=(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(v);if(t===\"object\"||t===\"array\"||t===\"function\"){return v.toString();}else{return\"\"+v;}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2]);};case 3:return function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3]);};default:throw new TypeError(\"Unknown float type: \"+name);}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function fromWireType(value){return value;},\"toWireType\":function toWireType(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name);}return value;},\"argPackAdvance\":8,\"readValueFromPointer\":floatReadValueFromPointer(name,shift),destructorFunction:null});}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError(\"new_ called with constructor type \"+(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(constructor)+\" which is not a function\");}var dummy=createNamedFunction(constructor.name||\"unknownFunctionName\",function(){});dummy.prototype=constructor.prototype;var obj=new dummy();var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj;}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr);}}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break;}}var returns=argTypes[0].name!==\"void\";var argsList=\"\";var argsListWired=\"\";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?\", \":\"\")+\"arg\"+i;argsListWired+=(i!==0?\", \":\"\")+\"arg\"+i+\"Wired\";}var invokerFnBody=\"return function \"+makeLegalFunctionName(humanName)+\"(\"+argsList+\") {\\n\"+\"if (arguments.length !== \"+(argCount-2)+\") {\\n\"+\"throwBindingError('function \"+humanName+\" called with ' + arguments.length + ' arguments, expected \"+(argCount-2)+\" args!');\\n\"+\"}\\n\";if(needsDestructorStack){invokerFnBody+=\"var destructors = [];\\n\";}var dtorStack=needsDestructorStack?\"destructors\":\"null\";var args1=[\"throwBindingError\",\"invoker\",\"fn\",\"runDestructors\",\"retType\",\"classParam\"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+=\"var thisWired = classParam.toWireType(\"+dtorStack+\", this);\\n\";}for(var i=0;i<argCount-2;++i){invokerFnBody+=\"var arg\"+i+\"Wired = argType\"+i+\".toWireType(\"+dtorStack+\", arg\"+i+\"); // \"+argTypes[i+2].name+\"\\n\";args1.push(\"argType\"+i);args2.push(argTypes[i+2]);}if(isClassMethodFunc){argsListWired=\"thisWired\"+(argsListWired.length>0?\", \":\"\")+argsListWired;}invokerFnBody+=(returns?\"var rv = \":\"\")+\"invoker(fn\"+(argsListWired.length>0?\", \":\"\")+argsListWired+\");\\n\";if(needsDestructorStack){invokerFnBody+=\"runDestructors(destructors);\\n\";}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?\"thisWired\":\"arg\"+(i-2)+\"Wired\";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+\"_dtor(\"+paramName+\"); // \"+argTypes[i].name+\"\\n\";args1.push(paramName+\"_dtor\");args2.push(argTypes[i].destructorFunction);}}}if(returns){invokerFnBody+=\"var ret = retType.fromWireType(rv);\\n\"+\"return ret;\\n\";}else{}invokerFnBody+=\"}\\n\";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction;}function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError(\"Function '\"+humanName+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+proto[methodName].overloadTable+\")!\");}return proto[methodName].overloadTable[arguments.length].apply(this,arguments);};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc;}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(\"Cannot register public name '\"+name+\"' twice\");}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\"+numArguments+\")!\");}Module[name].overloadTable[numArguments]=value;}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments;}}}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i]);}return array;}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError(\"Replacing nonexistant public symbol\");}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value;}else{Module[name]=value;Module[name].argCount=numArguments;}}function dynCallLegacy(sig,ptr,args){var f=Module[\"dynCall_\"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr);}function dynCall(sig,ptr,args){if(sig.includes(\"j\")){return dynCallLegacy(sig,ptr,args);}return wasmTable.get(ptr).apply(null,args);}function getDynCaller(sig,ptr){var argCache=[];return function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++){argCache[i]=arguments[i];}return dynCall(sig,ptr,argCache);};}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes(\"j\")){return getDynCaller(signature,rawFunction);}return wasmTable.get(rawFunction);}var fp=makeDynCaller();if(typeof fp!==\"function\"){throwBindingError(\"unknown function pointer with signature \"+signature+\": \"+rawFunction);}return fp;}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv;}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return;}if(registeredTypes[type]){return;}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return;}unboundTypes.push(type);seen[type]=true;}types.forEach(visit);throw new UnboundTypeError(message+\": \"+unboundTypes.map(getTypeName).join([\", \"]));}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError(\"Cannot call \"+name+\" due to unbound types\",argTypes);},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[];});}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer];}:function readU8FromPointer(pointer){return HEAPU8[pointer];};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1];}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1];};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2];}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2];};default:throw new TypeError(\"Unknown integer type: \"+name);}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295;}var shift=getShiftFromSize(size);var fromWireType=function fromWireType(value){return value;};if(minRange===0){var bitshift=32-8*size;fromWireType=function fromWireType(value){return value<<bitshift>>>bitshift;};}var isUnsignedType=name.includes(\"unsigned\");registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":function toWireType(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name);}if(value<minRange||value>maxRange){throw new TypeError('Passing a number \"'+_embind_repr(value)+'\" from JS side to C/C++ side to an argument of type \"'+name+'\", which is outside the valid range ['+minRange+\", \"+maxRange+\"]!\");}return isUnsignedType?value>>>0:value|0;},\"argPackAdvance\":8,\"readValueFromPointer\":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null});}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size);}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":8,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true});}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name:name,\"fromWireType\":function fromWireType(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment;}else{str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+1;}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i]);}str=a.join(\"\");}_free(value);return str;},\"toWireType\":function toWireType(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value);}var getLength;var valueIsOfTypeString=typeof value===\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\");}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function getLength(){return lengthBytesUTF8(value);};}else{getLength=function getLength(){return value.length;};}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1);}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\");}HEAPU8[ptr+4+i]=charCode;}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i];}}}if(destructors!==null){destructors.push(_free,ptr);}return ptr;},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function destructorFunction(ptr){_free(ptr);}});}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=function getHeap(){return HEAPU16;};shift=1;}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=function getHeap(){return HEAPU32;};shift=2;}registerType(rawType,{name:name,\"fromWireType\":function fromWireType(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment;}else{str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+charSize;}}_free(value);return str;},\"toWireType\":function toWireType(destructors,value){if(!(typeof value===\"string\")){throwBindingError(\"Cannot pass non-string to C++ string type \"+name);}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr);}return ptr;},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function destructorFunction(ptr){_free(ptr);}});}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":function fromWireType(){return undefined;},\"toWireType\":function toWireType(destructors,o){return undefined;}});}function _abort(){abort();}var readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr,buf){readAsmConstArgsArray.length=0;var ch;buf>>=2;while(ch=HEAPU8[sigPtr++]){var _double=ch<105;if(_double&&buf&1)buf++;readAsmConstArgsArray.push(_double?HEAPF64[buf++>>1]:HEAP32[buf]);++buf;}return readAsmConstArgsArray;}function _emscripten_asm_const_int(code,sigPtr,argbuf){var args=readAsmConstArgs(sigPtr,argbuf);return ASM_CONSTS[code].apply(null,args);}function _longjmp(env,value){_setThrew(env,value||1);throw\"longjmp\";}function _emscripten_longjmp(a0,a1){return _longjmp(a0,a1);}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1;}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false;}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true;}}return false;}var ENV={};function getExecutableName(){return thisProgram||\"./this.program\";}function getEnvStrings(){if(!getEnvStrings.strings){var lang=((typeof navigator===\"undefined\"?\"undefined\":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(navigator))===\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":lang,\"_\":getExecutableName()};for(var x in ENV){env[x]=ENV[x];}var strings=[];for(var x in env){strings.push(x+\"=\"+env[x]);}getEnvStrings.strings=strings;}return getEnvStrings.strings;}function _environ_get(__environ,environ_buf){try{var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1;});return 0;}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _environ_sizes_get(penviron_count,penviron_buf_size){try{var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1;});HEAP32[penviron_buf_size>>2]=bufSize;return 0;}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _exit(status){exit(status);}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0;}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0;}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61;}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0;}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0;}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _getTempRet0(){return getTempRet0();}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0;}function _setTempRet0(val){setTempRet0(val);}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0);}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum;}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1);}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1);}}else{newDate.setDate(newDate.getDate()+days);return newDate;}}return newDate;}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule]);}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str;}return str;}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\");}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0;}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate());}}return compare;}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30);}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1;}else{return thisDate.getFullYear();}}else{return thisDate.getFullYear()-1;}}var EXPANSION_RULES_2={\"%a\":function a(date){return WEEKDAYS[date.tm_wday].substring(0,3);},\"%A\":function A(date){return WEEKDAYS[date.tm_wday];},\"%b\":function b(date){return MONTHS[date.tm_mon].substring(0,3);},\"%B\":function B(date){return MONTHS[date.tm_mon];},\"%C\":function C(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2);},\"%d\":function d(date){return leadingNulls(date.tm_mday,2);},\"%e\":function e(date){return leadingSomething(date.tm_mday,2,\" \");},\"%g\":function g(date){return getWeekBasedYear(date).toString().substring(2);},\"%G\":function G(date){return getWeekBasedYear(date);},\"%H\":function H(date){return leadingNulls(date.tm_hour,2);},\"%I\":function I(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2);},\"%j\":function j(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3);},\"%m\":function m(date){return leadingNulls(date.tm_mon+1,2);},\"%M\":function M(date){return leadingNulls(date.tm_min,2);},\"%n\":function n(){return\"\\n\";},\"%p\":function p(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\";}else{return\"PM\";}},\"%S\":function S(date){return leadingNulls(date.tm_sec,2);},\"%t\":function t(){return\"\\t\";},\"%u\":function u(date){return date.tm_wday||7;},\"%U\":function U(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2);}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\";},\"%V\":function V(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\";}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\";}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate();}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate();}return leadingNulls(Math.ceil(daysDifference/7),2);},\"%w\":function w(date){return date.tm_wday;},\"%W\":function W(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2);}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\";},\"%y\":function y(date){return(date.tm_year+1900).toString().substring(2);},\"%Y\":function Y(date){return date.tm_year+1900;},\"%z\":function z(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4);},\"%Z\":function Z(date){return date.tm_zone;},\"%%\":function _(){return\"%\";}};for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date));}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0;}writeArrayToMemory(bytes,s);return bytes.length-1;}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm);}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret;}return ret;}var FSNode=function FSNode(parent,name,mode,rdev){if(!parent){parent=this;}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev;};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function get(){return(this.mode&readMode)===readMode;},set:function set(val){val?this.mode|=readMode:this.mode&=~readMode;}},write:{get:function get(){return(this.mode&writeMode)===writeMode;},set:function set(val){val?this.mode|=writeMode:this.mode&=~writeMode;}},isFolder:{get:function get(){return FS.isDir(this.mode);}},isDevice:{get:function get(){return FS.isChrdev(this.mode);}}});FS.FSNode=FSNode;FS.staticInit();embind_init_charCodes();BindingError=Module[\"BindingError\"]=extendError(Error,\"BindingError\");InternalError=Module[\"InternalError\"]=extendError(Error,\"InternalError\");init_emval();UnboundTypeError=Module[\"UnboundTypeError\"]=extendError(Error,\"UnboundTypeError\");var ASSERTIONS=false;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array;}function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,\"Character code \"+chr+\" (\"+String.fromCharCode(chr)+\")  at offset \"+i+\" not in 0x00-0xFF.\");}chr&=255;}ret.push(String.fromCharCode(chr));}return ret.join(\"\");}var decodeBase64=typeof atob===\"function\"?atob:function(input){var keyStr=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";var output=\"\";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2);}if(enc4!==64){output=output+String.fromCharCode(chr3);}}while(i<input.length);return output;};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE===\"boolean\"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,\"base64\");}catch(_){buf=new Buffer(s,\"base64\");}return new Uint8Array(buf[\"buffer\"],buf[\"byteOffset\"],buf[\"byteLength\"]);}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i);}return bytes;}catch(_){throw new Error(\"Converting base64 string to bytes failed.\");}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return;}return intArrayFromBase64(filename.slice(dataURIPrefix.length));}var asmLibraryArg={\"i\":___cxa_allocate_exception,\"h\":___cxa_throw,\"G\":___localtime_r,\"p\":___sys_fcntl64,\"I\":___sys_ioctl,\"J\":___sys_open,\"B\":__embind_register_bigint,\"L\":__embind_register_bool,\"t\":__embind_register_constant,\"K\":__embind_register_emval,\"r\":__embind_register_float,\"f\":__embind_register_function,\"g\":__embind_register_integer,\"e\":__embind_register_memory_view,\"s\":__embind_register_std_string,\"n\":__embind_register_std_wstring,\"M\":__embind_register_void,\"a\":_abort,\"k\":_emscripten_asm_const_int,\"j\":_emscripten_longjmp,\"C\":_emscripten_resize_heap,\"E\":_environ_get,\"F\":_environ_sizes_get,\"b\":_exit,\"q\":_fd_close,\"H\":_fd_read,\"A\":_fd_seek,\"o\":_fd_write,\"d\":_getTempRet0,\"u\":_gettimeofday,\"w\":invoke_ii,\"x\":invoke_iii,\"O\":invoke_iiii,\"l\":invoke_vi,\"y\":invoke_vii,\"z\":invoke_viii,\"m\":invoke_viiii,\"c\":_setTempRet0,\"N\":_strftime,\"D\":_strftime_l,\"v\":_time};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"Q\"]).apply(null,arguments);};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"R\"]).apply(null,arguments);};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"S\"]).apply(null,arguments);};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"T\"]).apply(null,arguments);};var ___getTypeName=Module[\"___getTypeName\"]=function(){return(___getTypeName=Module[\"___getTypeName\"]=Module[\"asm\"][\"V\"]).apply(null,arguments);};var ___embind_register_native_and_builtin_types=Module[\"___embind_register_native_and_builtin_types\"]=function(){return(___embind_register_native_and_builtin_types=Module[\"___embind_register_native_and_builtin_types\"]=Module[\"asm\"][\"W\"]).apply(null,arguments);};var __get_tzname=Module[\"__get_tzname\"]=function(){return(__get_tzname=Module[\"__get_tzname\"]=Module[\"asm\"][\"X\"]).apply(null,arguments);};var __get_daylight=Module[\"__get_daylight\"]=function(){return(__get_daylight=Module[\"__get_daylight\"]=Module[\"asm\"][\"Y\"]).apply(null,arguments);};var __get_timezone=Module[\"__get_timezone\"]=function(){return(__get_timezone=Module[\"__get_timezone\"]=Module[\"asm\"][\"Z\"]).apply(null,arguments);};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"_\"]).apply(null,arguments);};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"$\"]).apply(null,arguments);};var _setThrew=Module[\"_setThrew\"]=function(){return(_setThrew=Module[\"_setThrew\"]=Module[\"asm\"][\"aa\"]).apply(null,arguments);};var dynCall_jiji=Module[\"dynCall_jiji\"]=function(){return(dynCall_jiji=Module[\"dynCall_jiji\"]=Module[\"asm\"][\"ba\"]).apply(null,arguments);};var dynCall_viijii=Module[\"dynCall_viijii\"]=function(){return(dynCall_viijii=Module[\"dynCall_viijii\"]=Module[\"asm\"][\"ca\"]).apply(null,arguments);};var dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=function(){return(dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=Module[\"asm\"][\"da\"]).apply(null,arguments);};var dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=function(){return(dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=Module[\"asm\"][\"ea\"]).apply(null,arguments);};var dynCall_iiiiiijj=Module[\"dynCall_iiiiiijj\"]=function(){return(dynCall_iiiiiijj=Module[\"dynCall_iiiiiijj\"]=Module[\"asm\"][\"fa\"]).apply(null,arguments);};function invoke_ii(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1);}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0);}}function invoke_vi(index,a1){var sp=stackSave();try{wasmTable.get(index)(a1);}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0);}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3);}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0);}}function invoke_vii(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2);}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0);}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2);}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0);}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4);}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0);}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3);}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0);}}Module[\"FS\"]=FS;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status;}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller;};function run(args){args=args||arguments_;if(runDependencies>0){return;}preRun();if(runDependencies>0){return;}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun();}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\");},1);doRun();},1);}else{doRun();}}Module[\"run\"]=run;function exit(status,implicit){EXITSTATUS=status;if(implicit&&keepRuntimeAlive()&&status===0){return;}if(keepRuntimeAlive()){}else{exitRuntime();if(Module[\"onExit\"])Module[\"onExit\"](status);ABORT=true;}quit_(status,new ExitStatus(status));}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()();}}run();return Module.ready;};}();/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Module);\n\n//# sourceURL=webpack://ARToolkit/./src/artoolkit5/artoolkit_wasm.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ARToolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ARToolkit */ \"./src/ARToolkit.js\");\n/* harmony import */ var _ARController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ARController */ \"./src/ARController.js\");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  ARToolkit: _ARToolkit__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  ARController: _ARController__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n});\n\n//# sourceURL=webpack://ARToolkit/./src/index.js?");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n\n\n//# sourceURL=webpack://ARToolkit/./node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "?9d41":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://ARToolkit/crypto_(ignored)?");

/***/ }),

/***/ "?8f32":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://ARToolkit/fs_(ignored)?");

/***/ }),

/***/ "?8c11":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://ARToolkit/path_(ignored)?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _asyncToGenerator)\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\n//# sourceURL=webpack://ARToolkit/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _classCallCheck)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n//# sourceURL=webpack://ARToolkit/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _createClass)\n/* harmony export */ });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n//# sourceURL=webpack://ARToolkit/./node_modules/@babel/runtime/helpers/esm/createClass.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _defineProperty)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n//# sourceURL=webpack://ARToolkit/./node_modules/@babel/runtime/helpers/esm/defineProperty.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _typeof)\n/* harmony export */ });\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n//# sourceURL=webpack://ARToolkit/./node_modules/@babel/runtime/helpers/esm/typeof.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_961696__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_961696__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__nested_webpack_require_961696__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__nested_webpack_require_961696__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_961696__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_961696__.o(definition, key) && !__nested_webpack_require_961696__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__nested_webpack_require_961696__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__nested_webpack_require_961696__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nested_webpack_require_961696__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __nested_webpack_require_961696__("./src/index.js");
/******/ 	__webpack_exports__ = __webpack_exports__["default"];
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "./three.js/src/markers-area/arjs-markersareacontrols.js":
/*!***************************************************************!*\
  !*** ./three.js/src/markers-area/arjs-markersareacontrols.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _threex_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../threex/threex-arbasecontrols */ "./three.js/src/threex/threex-arbasecontrols.js");
/* harmony import */ var _threex_arjs_markercontrols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../threex/arjs-markercontrols */ "./three.js/src/threex/arjs-markercontrols.js");
/* harmony import */ var _arjs_markersareacontrols__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./arjs-markersareacontrols */ "./three.js/src/markers-area/arjs-markersareacontrols.js");





const MarkersAreaControls = function(arToolkitContext, object3d, parameters){
	var _this = this
	_threex_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__["default"].call(this, object3d)

	if( arguments.length > 3 )	console.assert('wrong api for', MarkersAreaControls)

	// have a parameters in argument
	this.parameters = {
		// list of controls for each subMarker
		subMarkersControls: parameters.subMarkersControls,
		// list of pose for each subMarker relative to the origin
		subMarkerPoses: parameters.subMarkerPoses,
		// change matrix mode - [modelViewMatrix, cameraTransformMatrix]
		changeMatrixMode : parameters.changeMatrixMode !== undefined ? parameters.changeMatrixMode : 'modelViewMatrix',
	}
	
	this.object3d.visible = false
	// honor obsolete stuff - add a warning to use
	this.subMarkersControls = this.parameters.subMarkersControls
	this.subMarkerPoses = this.parameters.subMarkerPoses

	// listen to arToolkitContext event 'sourceProcessed'
	// - after we fully processed one image, aka when we know all detected poses in it
	arToolkitContext.addEventListener('sourceProcessed', function(){
		_this._onSourceProcessed()
	})
}

MarkersAreaControls.prototype = Object.create( _threex_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__["default"].prototype );
MarkersAreaControls.prototype.constructor = MarkersAreaControls;

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////


/**
 * What to do when a image source is fully processed
 */
MarkersAreaControls.prototype._onSourceProcessed = function(){
	var _this = this
	var stats = {
		count: 0,
		position : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
		},
		quaternion : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(0,0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(0,0,0,0),
		},
		scale : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
		},
	}

	var firstQuaternion = _this.parameters.subMarkersControls[0].object3d.quaternion

	this.parameters.subMarkersControls.forEach(function(markerControls, markerIndex){
		
		var markerObject3d = markerControls.object3d
		// if this marker is not visible, ignore it
		if( markerObject3d.visible === false )	return

		// transformation matrix of this.object3d according to this sub-markers
		var matrix = markerObject3d.matrix.clone()
		var markerPose = _this.parameters.subMarkerPoses[markerIndex]
		matrix.multiply(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().getInverse(markerPose))

		// decompose the matrix into .position, .quaternion, .scale
		var position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		var quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion()
		var scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		matrix.decompose(position, quaternion, scale)

		// http://wiki.unity3d.com/index.php/Averaging_Quaternions_and_Vectors
		stats.count++

		MarkersAreaControls.averageVector3(stats.position.sum, position, stats.count, stats.position.average)
		MarkersAreaControls.averageQuaternion(stats.quaternion.sum, quaternion, firstQuaternion, stats.count, stats.quaternion.average)
		MarkersAreaControls.averageVector3(stats.scale.sum, scale, stats.count, stats.scale.average)
	})

	// honor _this.object3d.visible
	if( stats.count > 0 ){
		_this.object3d.visible = true
	}else{
		_this.object3d.visible = false			
	}

	// if at least one sub-marker has been detected, make the average of all detected markers
	if( stats.count > 0 ){
		// compute modelViewMatrix
		var modelViewMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()
		modelViewMatrix.compose(stats.position.average, stats.quaternion.average, stats.scale.average)

		// change _this.object3d.matrix based on parameters.changeMatrixMode
		if( this.parameters.changeMatrixMode === 'modelViewMatrix' ){
			_this.object3d.matrix.copy(modelViewMatrix)
		}else if( this.parameters.changeMatrixMode === 'cameraTransformMatrix' ){
			_this.object3d.matrix.getInverse( modelViewMatrix )
		}else {
			console.assert(false)
		}

		// decompose - the matrix into .position, .quaternion, .scale
		_this.object3d.matrix.decompose(_this.object3d.position, _this.object3d.quaternion, _this.object3d.scale)
	}

}

//////////////////////////////////////////////////////////////////////////////
//		Utility functions
//////////////////////////////////////////////////////////////////////////////

/**
 * from http://wiki.unity3d.com/index.php/Averaging_Quaternions_and_Vectors
 */
MarkersAreaControls.averageQuaternion = function(quaternionSum, newQuaternion, firstQuaternion, count, quaternionAverage){
	quaternionAverage = quaternionAverage || new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion()
	// sanity check
	console.assert(firstQuaternion instanceof three__WEBPACK_IMPORTED_MODULE_0__.Quaternion === true)
	
	// from http://wiki.unity3d.com/index.php/Averaging_Quaternions_and_Vectors
	if( newQuaternion.dot(firstQuaternion) > 0 ){
		newQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(-newQuaternion.x, -newQuaternion.y, -newQuaternion.z, -newQuaternion.w)
	}

	quaternionSum.x += newQuaternion.x
	quaternionSum.y += newQuaternion.y
	quaternionSum.z += newQuaternion.z
	quaternionSum.w += newQuaternion.w
	
	quaternionAverage.x = quaternionSum.x/count
	quaternionAverage.y = quaternionSum.y/count
	quaternionAverage.z = quaternionSum.z/count
	quaternionAverage.w = quaternionSum.w/count
	
	quaternionAverage.normalize()

	return quaternionAverage
}


MarkersAreaControls.averageVector3 = function(vector3Sum, vector3, count, vector3Average){
	vector3Average = vector3Average || new three__WEBPACK_IMPORTED_MODULE_0__.Vector3()
	
	vector3Sum.x += vector3.x
	vector3Sum.y += vector3.y
	vector3Sum.z += vector3.z
	
	vector3Average.x = vector3Sum.x / count
	vector3Average.y = vector3Sum.y / count
	vector3Average.z = vector3Sum.z / count
	
	return vector3Average
}

//////////////////////////////////////////////////////////////////////////////
//		Utility function
//////////////////////////////////////////////////////////////////////////////

/**
 * compute the center of this multimarker file
 */
MarkersAreaControls.computeCenter = function(jsonData){
	var multiMarkerFile = JSON.parse(jsonData)
	var stats = {
		count : 0,
		position : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),						
		},
		quaternion : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(0,0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(0,0,0,0),						
		},
		scale : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),						
		},
	}
	var firstQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion() // FIXME ???
	
	multiMarkerFile.subMarkersControls.forEach(function(item){
		var poseMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(item.poseMatrix)
		
		var position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		var quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion
		var scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		poseMatrix.decompose(position, quaternion, scale)
		
		// http://wiki.unity3d.com/index.php/Averaging_Quaternions_and_Vectors
		stats.count++

		MarkersAreaControls.averageVector3(stats.position.sum, position, stats.count, stats.position.average)
		MarkersAreaControls.averageQuaternion(stats.quaternion.sum, quaternion, firstQuaternion, stats.count, stats.quaternion.average)
		MarkersAreaControls.averageVector3(stats.scale.sum, scale, stats.count, stats.scale.average)
	})
	
	var averageMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()
	averageMatrix.compose(stats.position.average, stats.quaternion.average, stats.scale.average)

	return averageMatrix
}

MarkersAreaControls.computeBoundingBox = function(jsonData){
	var multiMarkerFile = JSON.parse(jsonData)
	var boundingBox = new three__WEBPACK_IMPORTED_MODULE_0__.Box3()

	multiMarkerFile.subMarkersControls.forEach(function(item){
		var poseMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(item.poseMatrix)
		
		var position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		var quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion
		var scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		poseMatrix.decompose(position, quaternion, scale)

		boundingBox.expandByPoint(position)
	})

	return boundingBox
}
//////////////////////////////////////////////////////////////////////////////
//		updateSmoothedControls
//////////////////////////////////////////////////////////////////////////////

MarkersAreaControls.prototype.updateSmoothedControls = function(smoothedControls, lerpsValues){
	// handle default values
	if( lerpsValues === undefined ){
		// FIXME this parameter format is uselessly cryptic
		// lerpValues = [
		// {lerpPosition: 0.5, lerpQuaternion: 0.2, lerpQuaternion: 0.7}
		// ]
		lerpsValues = [
			[0.3+.1, 0.1, 0.3],
			[0.4+.1, 0.1, 0.4],
			[0.4+.1, 0.2, 0.5],
			[0.5+.1, 0.2, 0.7],
			[0.5+.1, 0.2, 0.7],
		]
	}
	// count how many subMarkersControls are visible
	var nVisible = 0
	this.parameters.subMarkersControls.forEach(function(markerControls, markerIndex){
		var markerObject3d = markerControls.object3d
		if( markerObject3d.visible === true )	nVisible ++
	})

	// find the good lerpValues
	if( lerpsValues[nVisible-1] !== undefined ){
		var lerpValues = lerpsValues[nVisible-1]
	}else{
		var lerpValues = lerpsValues[lerpsValues.length-1]
	}

	// modify lerpValues in smoothedControls
	smoothedControls.parameters.lerpPosition = lerpValues[0]
	smoothedControls.parameters.lerpQuaternion = lerpValues[1]
	smoothedControls.parameters.lerpScale = lerpValues[2]
}


//////////////////////////////////////////////////////////////////////////////
//		Create ArMultiMarkerControls from JSON
//////////////////////////////////////////////////////////////////////////////

MarkersAreaControls.fromJSON = function(arToolkitContext, parent3D, markerRoot, jsonData, parameters){
	var multiMarkerFile = JSON.parse(jsonData)
	// declare variables
	var subMarkersControls = []
	var subMarkerPoses = []
	// handle default arguments
	parameters = parameters || {}

	// prepare the parameters
	multiMarkerFile.subMarkersControls.forEach(function(item){
		// create a markerRoot
		var markerRoot = new three__WEBPACK_IMPORTED_MODULE_0__.Object3D()
		parent3D.add(markerRoot)

		// create markerControls for our markerRoot
		var subMarkerControls = new _threex_arjs_markercontrols__WEBPACK_IMPORTED_MODULE_2__["default"](arToolkitContext, markerRoot, item.parameters)

// if( true ){
		// store it in the parameters
		subMarkersControls.push(subMarkerControls)
		subMarkerPoses.push(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(item.poseMatrix))	
// }else{
// 		// build a smoothedControls
// 		var smoothedRoot = new THREE.Group()
// 		parent3D.add(smoothedRoot)
// 		var smoothedControls = new THREEx.ArSmoothedControls(smoothedRoot, {
// 			lerpPosition : 0.1,
// 			lerpQuaternion : 0.1, 
// 			lerpScale : 0.1,
// 			minVisibleDelay: 0,
// 			minUnvisibleDelay: 0,
// 		})
// 		onRenderFcts.push(function(delta){
// 			smoothedControls.update(markerRoot)	// TODO this is a global
// 		})
// 	
// 
// 		// store it in the parameters
// 		subMarkersControls.push(smoothedControls)
// 		subMarkerPoses.push(new THREE.Matrix4().fromArray(item.poseMatrix))
// }
	})
	
	parameters.subMarkersControls = subMarkersControls
	parameters.subMarkerPoses = subMarkerPoses
	// create a new ArMultiMarkerControls
	var multiMarkerControls = new _arjs_markersareacontrols__WEBPACK_IMPORTED_MODULE_3__["default"](arToolkitContext, markerRoot, parameters)

	// return it
	return multiMarkerControls	
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MarkersAreaControls);

/***/ }),

/***/ "./three.js/src/markers-area/arjs-markersareautils.js":
/*!************************************************************!*\
  !*** ./three.js/src/markers-area/arjs-markersareautils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../threex/arjs-context */ "./three.js/src/threex/arjs-context.js");

 // TODO context build-dependent

const MarkersAreaUtils = {};

//////////////////////////////////////////////////////////////////////////////
//		navigateToLearnerPage
//////////////////////////////////////////////////////////////////////////////

/**
 * Navigate to the multi-marker learner page
 *
 * @param {String} learnerBaseURL  - the base url for the learner
 * @param {String} trackingBackend - the tracking backend to use
 */
MarkersAreaUtils.navigateToLearnerPage = function(learnerBaseURL, trackingBackend){
	var learnerParameters = {
		backURL : location.href,
		trackingBackend: trackingBackend,
		markersControlsParameters: MarkersAreaUtils.createDefaultMarkersControlsParameters(trackingBackend),
	}
	location.href = learnerBaseURL + '?' + encodeURIComponent(JSON.stringify(learnerParameters))
}

//////////////////////////////////////////////////////////////////////////////
//		DefaultMultiMarkerFile
//////////////////////////////////////////////////////////////////////////////

/**
 * Create and store a default multi-marker file
 *
 * @param {String} trackingBackend - the tracking backend to use
 */
MarkersAreaUtils.storeDefaultMultiMarkerFile = function(trackingBackend){
	var file = MarkersAreaUtils.createDefaultMultiMarkerFile(trackingBackend)
	// json.strinfy the value and store it in localStorage
	localStorage.setItem('ARjsMultiMarkerFile', JSON.stringify(file))
}



/**
 * Create a default multi-marker file
 * @param {String} trackingBackend - the tracking backend to use
 * @return {Object} - json object of the multi-marker file
 */
MarkersAreaUtils.createDefaultMultiMarkerFile = function(trackingBackend){
	console.assert(trackingBackend)
	if( trackingBackend === undefined )	debugger

	// create absoluteBaseURL
	var link = document.createElement('a')
	link.href = _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__["default"].baseURL
	var absoluteBaseURL = link.href

	// create the base file
	var file = {
		meta : {
			createdBy : 'AR.js ' + _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__["default"].REVISION + ' - Default Marker',
			createdAt : new Date().toJSON(),
		},
		trackingBackend : trackingBackend,
		subMarkersControls : [
			// empty for now... being filled
		]
	}
	// add a subMarkersControls
	file.subMarkersControls[0] = {
		parameters: {},
		poseMatrix: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeTranslation(0,0, 0).toArray(),
	}
	if( trackingBackend === 'artoolkit' ){
		file.subMarkersControls[0].parameters.type = 'pattern'
		file.subMarkersControls[0].parameters.patternUrl = absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-hiro.patt'
	}else console.assert(false)

	// json.strinfy the value and store it in localStorage
	return file
}

//////////////////////////////////////////////////////////////////////////////
//		createDefaultMarkersControlsParameters
//////////////////////////////////////////////////////////////////////////////

/**
 * Create a default controls parameters for the multi-marker learner
 *
 * @param {String} trackingBackend - the tracking backend to use
 * @return {Object} - json object containing the controls parameters
 */
MarkersAreaUtils.createDefaultMarkersControlsParameters = function(trackingBackend){
	// create absoluteBaseURL
	var link = document.createElement('a')
	link.href = _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__["default"].baseURL
	var absoluteBaseURL = link.href


	if( trackingBackend === 'artoolkit' ){
		// pattern hiro/kanji/a/b/c/f
		var markersControlsParameters = [
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-hiro.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-kanji.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterA.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterB.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterC.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterF.patt',
			},
		]
	}else console.assert(false)
	return markersControlsParameters
}


//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////
/**
 * generate areaFile
 */
MarkersAreaUtils.storeMarkersAreaFileFromResolution = function (trackingBackend, resolutionW, resolutionH) {
	// generate areaFile
	var areaFile = this.buildMarkersAreaFileFromResolution(trackingBackend, resolutionW, resolutionH)
	// store areaFile in localStorage
	localStorage.setItem('ARjsMultiMarkerFile', JSON.stringify(areaFile))
}


//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////

MarkersAreaUtils.buildMarkersAreaFileFromResolution = function(trackingBackend, resolutionW, resolutionH){
	// create the base file
	var file = {
		meta : {
			createdBy : 'AR.js - Augmented Website',
			createdAt : new Date().toJSON(),
		},
		trackingBackend : trackingBackend,
		subMarkersControls : [
			// empty for now...
		]
	}

	var whiteMargin = 0.1
	if( resolutionW > resolutionH ){
		var markerImageSize = 0.4 * resolutionH
	}else if( resolutionW < resolutionH ){
		var markerImageSize = 0.4 * resolutionW
	}else if( resolutionW === resolutionH ){
		// specific for twitter player - https://dev.twitter.com/cards/types/player
		var markerImageSize = 0.33 * resolutionW
	}else console.assert(false)

	// console.warn('using new markerImageSize computation')
	var actualMarkerSize = markerImageSize * (1 - 2*whiteMargin)

	var deltaX = (resolutionW - markerImageSize)/2 / actualMarkerSize
	var deltaZ = (resolutionH - markerImageSize)/2 / actualMarkerSize

	var subMarkerControls = buildSubMarkerControls('center', 0, 0)
	file.subMarkersControls.push(subMarkerControls)

	var subMarkerControls = buildSubMarkerControls('topleft', -deltaX, -deltaZ)
	file.subMarkersControls.push(subMarkerControls)

	var subMarkerControls = buildSubMarkerControls('topright', +deltaX, -deltaZ)
	file.subMarkersControls.push(subMarkerControls)

	var subMarkerControls = buildSubMarkerControls('bottomleft', -deltaX, +deltaZ)
	file.subMarkersControls.push(subMarkerControls)

	var subMarkerControls = buildSubMarkerControls('bottomright', +deltaX, +deltaZ)
	file.subMarkersControls.push(subMarkerControls)

	return file

	//////////////////////////////////////////////////////////////////////////////
	//		Code Separator
	//////////////////////////////////////////////////////////////////////////////

	function buildSubMarkerControls(layout, positionX, positionZ){
		console.log('buildSubMarkerControls', layout, positionX, positionZ)
		// create subMarkersControls
		var subMarkersControls = {
			parameters: {},
			poseMatrix: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeTranslation(positionX,0, positionZ).toArray(),
		}
		// fill the parameters
		if( trackingBackend === 'artoolkit' ){
			layout2MarkerParametersArtoolkit(subMarkersControls.parameters, layout)
		}else console.assert(false)
		// return subMarkersControls
		return subMarkersControls
	}

	function layout2MarkerParametersArtoolkit(parameters, layout){
		// create absoluteBaseURL
		var link = document.createElement('a')
		link.href = _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__["default"].baseURL
		var absoluteBaseURL = link.href

		var layout2PatternUrl = {
			'center' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-hiro.patt'),
			'topleft' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterA.patt'),
			'topright' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterB.patt'),
			'bottomleft' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterC.patt'),
			'bottomright' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterF.patt'),
		}
		console.assert(layout2PatternUrl[layout] !== undefined )
		parameters.type = 'pattern'
		parameters.patternUrl = layout2PatternUrl[layout]
		return
		function convertRelativeUrlToAbsolute(relativeUrl){
			var tmpLink = document.createElement('a');
			tmpLink.href = relativeUrl
			return tmpLink.href
		}
	}
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MarkersAreaUtils);


/***/ }),

/***/ "./three.js/src/new-api/arjs-anchor.js":
/*!*********************************************!*\
  !*** ./three.js/src/new-api/arjs-anchor.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! threexArmarkercontrols */ "./three.js/src/threex/arjs-markercontrols.js");
/* harmony import */ var _threex_threex_armarkerhelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../threex/threex-armarkerhelper */ "./three.js/src/threex/threex-armarkerhelper.js");
/* harmony import */ var _threex_threex_arsmoothedcontrols__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../threex/threex-arsmoothedcontrols */ "./three.js/src/threex/threex-arsmoothedcontrols.js");
/* harmony import */ var _markers_area_arjs_markersareacontrols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../markers-area/arjs-markersareacontrols */ "./three.js/src/markers-area/arjs-markersareacontrols.js");
/* harmony import */ var _markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../markers-area/arjs-markersareautils */ "./three.js/src/markers-area/arjs-markersareautils.js");

 // Alias for dynamic importing





// TODO this is a controls... should i give the object3d here ?
// not according to 'no three.js dependancy'

/**
 * Create an anchor in the real world
 *
 * @param {ARjs.Session} arSession - the session on which we create the anchor
 * @param {Object} markerParameters - parameter of this anchor
 */
const Anchor = function(arSession, markerParameters){
	var _this = this
	var arContext = arSession.arContext
	var scene = arSession.parameters.scene
	var camera = arSession.parameters.camera

	this.arSession = arSession
	this.parameters = markerParameters

	// log to debug
	console.log('ARjs.Anchor -', 'changeMatrixMode:', this.parameters.changeMatrixMode, '/ markersAreaEnabled:', markerParameters.markersAreaEnabled)

	var markerRoot = new three__WEBPACK_IMPORTED_MODULE_0__.Group()
	scene.add(markerRoot)

	// set controlledObject depending on changeMatrixMode
	if( markerParameters.changeMatrixMode === 'modelViewMatrix' ){
		var controlledObject = markerRoot
	}else if( markerParameters.changeMatrixMode === 'cameraTransformMatrix' ){
		var controlledObject = camera
	}else console.assert(false)

	if( markerParameters.markersAreaEnabled === false ){
		var markerControls = new threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__["default"](arContext, controlledObject, markerParameters)
		this.controls = markerControls
	}else{
		// sanity check - MUST be a trackingBackend with markers
		console.assert( arContext.parameters.trackingBackend === 'artoolkit' )

		// honor markers-page-resolution for https://webxr.io/augmented-website
		if( location.hash.substring(1).startsWith('markers-page-resolution=') === true ){
			// get resolutionW/resolutionH from url
			var markerPageResolution = location.hash.substring(1)
			var matches = markerPageResolution.match(/markers-page-resolution=(\d+)x(\d+)/)
			console.assert(matches.length === 3)
			var resolutionW = parseInt(matches[1])
			var resolutionH = parseInt(matches[2])
			var arContext = arSession.arContext
			// generate and store the ARjsMultiMarkerFile
			_markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_5__["default"].storeMarkersAreaFileFromResolution(arContext.parameters.trackingBackend, resolutionW, resolutionH)
		}

		// if there is no ARjsMultiMarkerFile, build a default one
		if( localStorage.getItem('ARjsMultiMarkerFile') === null ){
			_markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_5__["default"].storeDefaultMultiMarkerFile(arContext.parameters.trackingBackend)
		}

		// get multiMarkerFile from localStorage
		console.assert( localStorage.getItem('ARjsMultiMarkerFile') !== null )
		var multiMarkerFile = localStorage.getItem('ARjsMultiMarkerFile')

		// set controlledObject depending on changeMatrixMode
		if( markerParameters.changeMatrixMode === 'modelViewMatrix' ){
			var parent3D = scene
		}else if( markerParameters.changeMatrixMode === 'cameraTransformMatrix' ){
			var parent3D = camera
		}else console.assert(false)

		// build a multiMarkerControls
		var multiMarkerControls = _markers_area_arjs_markersareacontrols__WEBPACK_IMPORTED_MODULE_4__["default"].fromJSON(arContext, parent3D, controlledObject, multiMarkerFile)
		this.controls = multiMarkerControls

		// honor markerParameters.changeMatrixMode
		multiMarkerControls.parameters.changeMatrixMode = markerParameters.changeMatrixMode

// TODO put subMarkerControls visibility into an external file. with 2 handling for three.js and babylon.js
		// create ArMarkerHelper - useful to debug - super three.js specific
		var markerHelpers = []
		multiMarkerControls.subMarkersControls.forEach(function(subMarkerControls){
			// add an helper to visuable each sub-marker
			var markerHelper = new _threex_threex_armarkerhelper__WEBPACK_IMPORTED_MODULE_2__["default"](subMarkerControls)
			markerHelper.object3d.visible = false
			// subMarkerControls.object3d.add( markerHelper.object3d )
			subMarkerControls.object3d.add( markerHelper.object3d )
			// add it to markerHelpers
			markerHelpers.push(markerHelper)
		})
		// define API specific to markersArea
		this.markersArea = {}
		this.markersArea.setSubMarkersVisibility = function(visible){
			markerHelpers.forEach(function(markerHelper){
				markerHelper.object3d.visible = visible
			})
		}
	}

	this.object3d = new three__WEBPACK_IMPORTED_MODULE_0__.Group()

	//////////////////////////////////////////////////////////////////////////////
	//		THREEx.ArSmoothedControls
	//////////////////////////////////////////////////////////////////////////////

	var shouldBeSmoothed = true

	if( shouldBeSmoothed === true ){
		// build a smoothedControls
		var smoothedRoot = new three__WEBPACK_IMPORTED_MODULE_0__.Group()
		scene.add(smoothedRoot)
		var smoothedControls = new _threex_threex_arsmoothedcontrols__WEBPACK_IMPORTED_MODULE_3__["default"](smoothedRoot)
		smoothedRoot.add(this.object3d)
	}else{
		markerRoot.add(this.object3d)
	}


	//////////////////////////////////////////////////////////////////////////////
	//		Code Separator
	//////////////////////////////////////////////////////////////////////////////
	this.update = function(){
		// update _this.object3d.visible
		_this.object3d.visible = _this.object3d.parent.visible

		// console.log('controlledObject.visible', _this.object3d.parent.visible)
		if( smoothedControls !== undefined ){
			// update smoothedControls parameters depending on how many markers are visible in multiMarkerControls
			if( multiMarkerControls !== undefined ){
				multiMarkerControls.updateSmoothedControls(smoothedControls)
			}

			// update smoothedControls
			smoothedControls.update(markerRoot)
		}
	}
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Anchor);

/***/ }),

/***/ "./three.js/src/new-api/arjs-debugui.js":
/*!**********************************************!*\
  !*** ./three.js/src/new-api/arjs-debugui.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SessionDebugUI": () => (/* binding */ SessionDebugUI),
/* harmony export */   "AnchorDebugUI": () => (/* binding */ AnchorDebugUI)
/* harmony export */ });
/* harmony import */ var _markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../markers-area/arjs-markersareautils */ "./three.js/src/markers-area/arjs-markersareautils.js");
/* harmony import */ var _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../threex/arjs-context */ "./three.js/src/threex/arjs-context.js");

 // TODO context build-dependent

/**
 * Create an debug UI for an ARjs.Anchor
 *
 * @param {ARjs.Anchor} arAnchor - the anchor to user
 */
const SessionDebugUI = function (arSession) {
    var trackingBackend = arSession.arContext.parameters.trackingBackend

    this.domElement = document.createElement('div')
    this.domElement.style.color = 'rgba(0,0,0,0.9)'
    this.domElement.style.backgroundColor = 'rgba(127,127,127,0.5)'
    this.domElement.style.display = 'block'
    this.domElement.style.padding = '0.5em'
    this.domElement.style.position = 'fixed'
    this.domElement.style.left = '5px'
    this.domElement.style.bottom = '10px'
    this.domElement.style.textAlign = 'right'

    //////////////////////////////////////////////////////////////////////////////
    //		current-tracking-backend
    //////////////////////////////////////////////////////////////////////////////

    var domElement = document.createElement('span')
    domElement.style.display = 'block'
    domElement.innerHTML = '<b>trackingBackend</b> : ' + trackingBackend
    this.domElement.appendChild(domElement)
}

/**
 * Url of augmented-website service - if === '' then dont include augmented-website link
 * @type {String}
 */
SessionDebugUI.AugmentedWebsiteURL = 'https://webxr.io/augmented-website'

//////////////////////////////////////////////////////////////////////////////
//		AnchorDebugUI
//////////////////////////////////////////////////////////////////////////////

/**
 * Create an debug UI for an ARjs.Anchor
 *
 * @param {ARjs.Anchor} arAnchor - the anchor to user
 */
const AnchorDebugUI = function (arAnchor) {
    var arSession = arAnchor.arSession
    var trackingBackend = arSession.arContext.parameters.trackingBackend

    this.domElement = document.createElement('div')
    this.domElement.style.color = 'rgba(0,0,0,0.9)'
    this.domElement.style.backgroundColor = 'rgba(127,127,127,0.5)'
    this.domElement.style.display = 'inline-block'
    this.domElement.style.padding = '0.5em'
    this.domElement.style.margin = '0.5em'
    this.domElement.style.textAlign = 'left'

    //////////////////////////////////////////////////////////////////////////////
    //		current-tracking-backend
    //////////////////////////////////////////////////////////////////////////////

    var domElement = document.createElement('span')
    domElement.style.display = 'block'
    domElement.style.padding = '0.5em'
    domElement.style.color = 'rgba(0,0,0,0.9)'
    domElement.style.backgroundColor = 'rgba(127,127,127,0.5)'
    domElement.style.position = 'fixed'
    domElement.style.left = '5px'
    domElement.style.bottom = '40px'

    this.domElement.appendChild(domElement)
    domElement.innerHTML = '<b>markersAreaEnabled</b> :' + arAnchor.parameters.markersAreaEnabled

    //////////////////////////////////////////////////////////////////////////////
    //		toggle-marker-helper
    //////////////////////////////////////////////////////////////////////////////

    if (arAnchor.parameters.markersAreaEnabled) {
        var domElement = document.createElement('button')
        domElement.style.display = 'block'
        this.domElement.style.padding = '0.5em'
        this.domElement.style.position = 'fixed'
        this.domElement.style.textAlign = 'left'
        this.domElement.appendChild(domElement)

        domElement.id = 'buttonToggleMarkerHelpers'
        domElement.innerHTML = 'toggle-marker-helper'
        domElement.href = 'javascript:void(0)'

        var subMarkerHelpersVisible = false
        domElement.addEventListener('click', function () {
            subMarkerHelpersVisible = subMarkerHelpersVisible ? false : true
            arAnchor.markersArea.setSubMarkersVisibility(subMarkerHelpersVisible)
        })
    }

    //////////////////////////////////////////////////////////////////////////////
    //		Learn-new-marker-area
    //////////////////////////////////////////////////////////////////////////////

    if (arAnchor.parameters.markersAreaEnabled) {
        var domElement = document.createElement('button')
        domElement.style.display = 'block'
        this.domElement.appendChild(domElement)

        domElement.id = 'buttonMarkersAreaLearner'
        domElement.innerHTML = 'Learn-new-marker-area'
        domElement.href = 'javascript:void(0)'

        domElement.addEventListener('click', function () {
            if (AnchorDebugUI.MarkersAreaLearnerURL !== null) {
                var learnerURL = AnchorDebugUI.MarkersAreaLearnerURL
            } else {
                var learnerURL = _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__["default"].baseURL + 'examples/multi-markers/examples/learner.html'
            }
            _markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_0__["default"].navigateToLearnerPage(learnerURL, trackingBackend)
        })
    }

    //////////////////////////////////////////////////////////////////////////////
    //		Reset-marker-area
    //////////////////////////////////////////////////////////////////////////////

    if (arAnchor.parameters.markersAreaEnabled) {
        var domElement = document.createElement('button')
        domElement.style.display = 'block'
        this.domElement.appendChild(domElement)

        domElement.id = 'buttonMarkersAreaReset'
        domElement.innerHTML = 'Reset-marker-area'
        domElement.href = 'javascript:void(0)'

        domElement.addEventListener('click', function () {
            _markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_0__["default"].storeDefaultMultiMarkerFile(trackingBackend)
            location.reload()
        })
    }
}

/**
 * url for the markers-area learner. if not set, take the default one
 * @type {String}
 */
AnchorDebugUI.MarkersAreaLearnerURL = null




/***/ }),

/***/ "./three.js/src/new-api/arjs-hittesting.js":
/*!*************************************************!*\
  !*** ./three.js/src/new-api/arjs-hittesting.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _threex_threex_hittesting_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../threex/threex-hittesting-plane */ "./three.js/src/threex/threex-hittesting-plane.js");


/**
 * Create an anchor in the real world
 *
 * @param {ARjs.Session} arSession - the session on which we create the anchor
 * @param {Object} markerParameters - parameter of this anchor
 */
const HitTesting = function (arSession) {
    var _this = this
    var arContext = arSession.arContext
    var trackingBackend = arContext.parameters.trackingBackend

    this.enabled = true
    this._arSession = arSession
    this._hitTestingPlane = null
    _this._hitTestingPlane = new _threex_threex_hittesting_plane__WEBPACK_IMPORTED_MODULE_0__["default"](arSession.arSource.domElement)
}

//////////////////////////////////////////////////////////////////////////////
//		update function
//////////////////////////////////////////////////////////////////////////////
/**
 * update
 *
 * @param {THREE.Camera} camera   - the camera to use
 * @param {THREE.Object3D} object3d -
 */
HitTesting.prototype.update = function (camera, pickingRoot, changeMatrixMode) {
    // if it isnt enabled, do nothing
    if (this.enabled === false) return


    if (this._hitTestingPlane !== null) {
        this._hitTestingPlane.update(camera, pickingRoot, changeMatrixMode)
    } else console.assert(false)
}

//////////////////////////////////////////////////////////////////////////////
//		actual hit testing
//////////////////////////////////////////////////////////////////////////////

/**
 * Test the real world for intersections directly from a DomEvent
 *
 * @param {Number} mouseX - position X of the hit [-1, +1]
 * @param {Number} mouseY - position Y of the hit [-1, +1]
 * @return {[HitTesting.Result]} - array of result
 */
HitTesting.prototype.testDomEvent = function (domEvent) {
    var trackingBackend = this._arSession.arContext.parameters.trackingBackend
    var arSource = this._arSession.arSource

    // if it isnt enabled, do nothing
    if (this.enabled === false) return []
    var mouseX = domEvent.clientX / arSource.domElementWidth()
    var mouseY = domEvent.clientY / arSource.domElementHeight()

    return this.test(mouseX, mouseY)
}

/**
 * Test the real world for intersections.
 *
 * @param {Number} mouseX - position X of the hit [0, +1]
 * @param {Number} mouseY - position Y of the hit [0, +1]
 * @return {[HitTesting.Result]} - array of result
 */
HitTesting.prototype.test = function (mouseX, mouseY) {
    var arContext = this._arSession.arContext
    var trackingBackend = arContext.parameters.trackingBackend
    var hitTestResults = []

    // if it isnt enabled, do nothing
    if (this.enabled === false) return []

    var result = this._hitTestingPlane.test(mouseX, mouseY)

    // if no result is found, return now
    if (result === null) return hitTestResults

    // build a HitTesting.Result
    var hitTestResult = new HitTesting.Result(result.position, result.quaternion, result.scale)
    hitTestResults.push(hitTestResult)

    return hitTestResults
}

//////////////////////////////////////////////////////////////////////////////
//		HitTesting.Result
//////////////////////////////////////////////////////////////////////////////
/**
 * Contains the result of HitTesting.test()
 *
 * @param {THREE.Vector3} position - position to use
 * @param {THREE.Quaternion} quaternion - quaternion to use
 * @param {THREE.Vector3} scale - scale
 */
HitTesting.Result = function (position, quaternion, scale) {
    this.position = position
    this.quaternion = quaternion
    this.scale = scale
}

/**
 * Apply to a controlled object3d
 *
 * @param {THREE.Object3D} object3d - the result to apply
 */
HitTesting.Result.prototype.apply = function (object3d) {
    object3d.position.copy(this.position)
    object3d.quaternion.copy(this.quaternion)
    object3d.scale.copy(this.scale)

    object3d.updateMatrix()
}

/**
 * Apply to a controlled object3d
 *
 * @param {THREE.Object3D} object3d - the result to apply
 */
HitTesting.Result.prototype.applyPosition = function (object3d) {
    object3d.position.copy(this.position)

    object3d.updateMatrix()

    return this
}

/**
 * Apply to a controlled object3d
 *
 * @param {THREE.Object3D} object3d - the result to apply
 */
HitTesting.Result.prototype.applyQuaternion = function (object3d) {
    object3d.quaternion.copy(this.quaternion)

    object3d.updateMatrix()

    return this
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HitTesting);


/***/ }),

/***/ "./three.js/src/new-api/arjs-session.js":
/*!**********************************************!*\
  !*** ./three.js/src/new-api/arjs-session.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _threex_arjs_source__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../threex/arjs-source */ "./three.js/src/threex/arjs-source.js");
/* harmony import */ var _threex_arjs_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../threex/arjs-context */ "./three.js/src/threex/arjs-context.js");


 // TODO context build-dependent

/**
 *  * define a Session
 *
 * @param {Object} parameters - parameters for this session
 */
const Session = function(parameters){
	var _this = this
	// handle default parameters
	this.parameters = {
		renderer: null,
		camera: null,
		scene: null,
		sourceParameters: {},
		contextParameters: {},
	}

	//////////////////////////////////////////////////////////////////////////////
	//		setParameters
	//////////////////////////////////////////////////////////////////////////////
	setParameters(parameters)
	function setParameters(parameters){
		if( parameters === undefined )	return
		for( var key in parameters ){
			var newValue = parameters[ key ]

			if( newValue === undefined ){
				console.warn( "THREEx.Session: '" + key + "' parameter is undefined." )
				continue
			}

			var currentValue = _this.parameters[ key ]

			if( currentValue === undefined ){
				console.warn( "THREEx.Session: '" + key + "' is not a property of this material." )
				continue
			}

			_this.parameters[ key ] = newValue
		}
	}
	// sanity check
	console.assert(this.parameters.renderer instanceof three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer)
	console.assert(this.parameters.camera instanceof three__WEBPACK_IMPORTED_MODULE_0__.Camera)
	console.assert(this.parameters.scene instanceof three__WEBPACK_IMPORTED_MODULE_0__.Scene)


	// backward emulation
	Object.defineProperty(this, 'renderer', {get: function(){
		console.warn('use .parameters.renderer renderer')
		return this.parameters.renderer;
	}});
	Object.defineProperty(this, 'camera', {get: function(){
		console.warn('use .parameters.camera instead')
		return this.parameters.camera;
	}});
	Object.defineProperty(this, 'scene', {get: function(){
		console.warn('use .parameters.scene instead')
		return this.parameters.scene;
	}});


	// log the version
	console.log('AR.js', _threex_arjs_context__WEBPACK_IMPORTED_MODULE_2__["default"].REVISION, '- trackingBackend:', parameters.contextParameters.trackingBackend)

	//////////////////////////////////////////////////////////////////////////////
	//		init arSource
	//////////////////////////////////////////////////////////////////////////////
	var arSource = _this.arSource = new _threex_arjs_source__WEBPACK_IMPORTED_MODULE_1__["default"](parameters.sourceParameters)

	arSource.init(function onReady(){
		arSource.onResize(arContext, _this.parameters.renderer, _this.parameters.camera)
	})

	// handle resize
	window.addEventListener('resize', function(){
		arSource.onResize(arContext, _this.parameters.renderer, _this.parameters.camera)
	})

	//////////////////////////////////////////////////////////////////////////////
	//		init arContext
	//////////////////////////////////////////////////////////////////////////////

	// create atToolkitContext
	var arContext = _this.arContext = new _threex_arjs_context__WEBPACK_IMPORTED_MODULE_2__["default"](parameters.contextParameters)

	// initialize it
	_this.arContext.init()

	arContext.addEventListener('initialized', function(event){
		arSource.onResize(arContext, _this.parameters.renderer, _this.parameters.camera)
	})

	//////////////////////////////////////////////////////////////////////////////
	//		update function
	//////////////////////////////////////////////////////////////////////////////
	// update artoolkit on every frame
	this.update = function(){
		if( arSource.ready === false )	return

		arContext.update( arSource.domElement )
	}
}

Session.prototype.onResize = function () {
	this.arSource.onResize(this.arContext, this.parameters.renderer, this.parameters.camera)
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Session);

/***/ }),

/***/ "./three.js/src/new-api/arjs-utils.js":
/*!********************************************!*\
  !*** ./three.js/src/new-api/arjs-utils.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);


const Utils = {};

/**
 * Create a default rendering camera for this trackingBackend. They may be modified later. to fit physical camera parameters
 *
 * @param {string} trackingBackend - the tracking to user
 * @return {THREE.Camera} the created camera
 */
Utils.createDefaultCamera = function (trackingMethod) {
    var trackingBackend = this.parseTrackingMethod(trackingMethod).trackingBackend
    // Create a camera
    if (trackingBackend === 'artoolkit') {
        var camera = new three__WEBPACK_IMPORTED_MODULE_0__.Camera();
    } else console.assert(false, 'unknown trackingBackend: ' + trackingBackend)

    return camera
}

/**
 * parse tracking method
 *
 * @param {String} trackingMethod - the tracking method to parse
 * @return {Object} - various field of the tracking method
 */
Utils.parseTrackingMethod = function (trackingMethod) {

    if (trackingMethod === 'best') {
        trackingMethod = 'area-artoolkit';
    }

    if (trackingMethod.startsWith('area-')) {
        return {
            trackingBackend: trackingMethod.replace('area-', ''),
            markersAreaEnabled: true,
        }
    } else {
        return {
            trackingBackend: trackingMethod,
            markersAreaEnabled: false,
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utils);


/***/ }),

/***/ "./three.js/src/threex/arjs-context.js":
/*!*********************************************!*\
  !*** ./three.js/src/threex/arjs-context.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! threexArmarkercontrols */ "./three.js/src/threex/arjs-markercontrols.js");
/* harmony import */ var jsartoolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsartoolkit */ "../AR.js-github-org/artoolkit5-js/dist/ARToolkit.js");
/* harmony import */ var jsartoolkit__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsartoolkit__WEBPACK_IMPORTED_MODULE_2__);

 // Alias for dynamic importing
 // TODO comment explanation
const { ARController } = (jsartoolkit__WEBPACK_IMPORTED_MODULE_2___default());

const Context = function (parameters) {
    var _this = this

    _this._updatedAt = null

    // handle default parameters
    this.parameters = {
        // AR backend - ['artoolkit']
        trackingBackend: 'artoolkit',
        // debug - true if one should display artoolkit debug canvas, false otherwise
        debug: false,
        // the mode of detection - ['color', 'color_and_matrix', 'mono', 'mono_and_matrix']
        detectionMode: 'mono',
        // type of matrix code - valid iif detectionMode end with 'matrix' - [3x3, 3x3_HAMMING63, 3x3_PARITY65, 4x4, 4x4_BCH_13_9_3, 4x4_BCH_13_5_5]
        matrixCodeType: '3x3',

        // url of the camera parameters
        cameraParametersUrl: Context.baseURL + '../data/data/camera_para.dat',

        // tune the maximum rate of pose detection in the source image
        maxDetectionRate: 60,
        // resolution of at which we detect pose in the source image
        canvasWidth: 640,
        canvasHeight: 480,

        // the patternRatio inside the artoolkit marker - artoolkit only
        patternRatio: 0.5,

        // enable image smoothing or not for canvas copy - default to true
        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled
        imageSmoothingEnabled: false,
    }
    // parameters sanity check
    console.assert(['artoolkit'].indexOf(this.parameters.trackingBackend) !== -1, 'invalid parameter trackingBackend', this.parameters.trackingBackend)
    console.assert(['color', 'color_and_matrix', 'mono', 'mono_and_matrix'].indexOf(this.parameters.detectionMode) !== -1, 'invalid parameter detectionMode', this.parameters.detectionMode)

    this.arController = null;

    _this.initialized = false


    this._arMarkersControls = []

    //////////////////////////////////////////////////////////////////////////////
    //		setParameters
    //////////////////////////////////////////////////////////////////////////////
    setParameters(parameters)
    function setParameters(parameters) {
        if (parameters === undefined) return
        for (var key in parameters) {
            var newValue = parameters[key]

            if (newValue === undefined) {
                console.warn("Context: '" + key + "' parameter is undefined.")
                continue
            }

            var currentValue = _this.parameters[key]

            if (currentValue === undefined) {
                console.warn("Context: '" + key + "' is not a property of this material.")
                continue
            }

            _this.parameters[key] = newValue
        }
    }
}

Context.prototype.dispatchEvent = three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype.dispatchEvent;
Context.prototype.addEventListener = three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype.addEventListener;
Context.prototype.hasEventListener = three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype.hasEventListener;
Context.prototype.removeEventListener = three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype.removeEventListener;

// default to github page
Context.baseURL = 'https://ar-js-org.github.io/AR.js/three.js/'
Context.REVISION = '3.3.3-es6-beta-02'
/**
 * Create a default camera for this trackingBackend
 * @param {string} trackingBackend - the tracking to user
 * @return {THREE.Camera} the created camera
 */
Context.createDefaultCamera = function (trackingBackend) {
    console.assert(false, 'use ARjs.Utils.createDefaultCamera instead')
    // Create a camera
    if (trackingBackend === 'artoolkit') {
        var camera = new three__WEBPACK_IMPORTED_MODULE_0__.Camera();
    } else console.assert(false);
    return camera
}


//////////////////////////////////////////////////////////////////////////////
//		init functions
//////////////////////////////////////////////////////////////////////////////
Context.prototype.init = function (onCompleted) {
    var _this = this
    if (this.parameters.trackingBackend === 'artoolkit') {
        this._initArtoolkit(done);
    } else console.assert(false);
    return

    function done() {
        // dispatch event
        _this.dispatchEvent({
            type: 'initialized'
        });

        _this.initialized = true

        onCompleted && onCompleted()
    }

}
////////////////////////////////////////////////////////////////////////////////
//          update function
////////////////////////////////////////////////////////////////////////////////
Context.prototype.update = function (srcElement) {

    // be sure arController is fully initialized
    if (this.parameters.trackingBackend === 'artoolkit' && this.arController === null) return false;

    // honor this.parameters.maxDetectionRate
    var present = performance.now()
    if (this._updatedAt !== null && present - this._updatedAt < 1000 / this.parameters.maxDetectionRate) {
        return false
    }
    this._updatedAt = present

    var prevVisibleMarkers = []

    // mark all markers to invisible before processing this frame
    this._arMarkersControls.forEach(function (markerControls) {
        if (markerControls.object3d.visible) {
            prevVisibleMarkers.push(markerControls)
        }
        markerControls.object3d.visible = false
    })

    // process this frame
    if (this.parameters.trackingBackend === 'artoolkit') {
        this._updateArtoolkit(srcElement);
    } else {
        console.assert(false);
    }

    // dispatch event
    this.dispatchEvent({
        type: 'sourceProcessed'
    });

    // After frame is processed, check visibility of each marker to determine if it was found or lost
    this._arMarkersControls.forEach(function (markerControls) {
        var wasVisible = prevVisibleMarkers.includes(markerControls);
        var isVisible = markerControls.object3d.visible;

        if (isVisible === true && wasVisible === false) {
            window.dispatchEvent(new CustomEvent('markerFound', {
                detail: markerControls,
            }))
        } else if (isVisible === false && wasVisible === true) {
            window.dispatchEvent(new CustomEvent('markerLost', {
                detail: markerControls,
            }))
        }
    })


    // return true as we processed the frame
    return true;
}

////////////////////////////////////////////////////////////////////////////////
//          Add/Remove markerControls
////////////////////////////////////////////////////////////////////////////////
Context.prototype.addMarker = function (arMarkerControls) {
    console.assert(arMarkerControls instanceof threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__["default"])
    this._arMarkersControls.push(arMarkerControls)
}

Context.prototype.removeMarker = function (arMarkerControls) {
    console.assert(arMarkerControls instanceof threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__["default"])
    var index = this._arMarkersControls.indexOf(arMarkerControls);
    if (index < 0) {
        return;
    }
    this._arMarkersControls.splice(index, 1)
}

//////////////////////////////////////////////////////////////////////////////
//		artoolkit specific
//////////////////////////////////////////////////////////////////////////////
Context.prototype._initArtoolkit = function (onCompleted) {
    var _this = this

    // set this._artoolkitProjectionAxisTransformMatrix to change artoolkit projection matrix axis to match usual webgl one
    this._artoolkitProjectionAxisTransformMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()
    this._artoolkitProjectionAxisTransformMatrix.multiply(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeRotationY(Math.PI))
    this._artoolkitProjectionAxisTransformMatrix.multiply(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeRotationZ(Math.PI))

    // init controller
    ARController.initWithDimensions(_this.parameters.canvasWidth, _this.parameters.canvasHeight, _this.parameters.cameraParametersUrl).then((arController) => {
        _this.arController = arController

        // honor this.parameters.imageSmoothingEnabled
        arController.ctx.mozImageSmoothingEnabled = _this.parameters.imageSmoothingEnabled;
        arController.ctx.webkitImageSmoothingEnabled = _this.parameters.imageSmoothingEnabled;
        arController.ctx.msImageSmoothingEnabled = _this.parameters.imageSmoothingEnabled;
        arController.ctx.imageSmoothingEnabled = _this.parameters.imageSmoothingEnabled;

        // honor this.parameters.debug
        if (_this.parameters.debug === true) {
            arController.debugSetup();
            arController.canvas.style.position = 'absolute'
            arController.canvas.style.top = '0px'
            arController.canvas.style.opacity = '0.6'
            arController.canvas.style.pointerEvents = 'none'
            arController.canvas.style.zIndex = '-1'
        }

        // setPatternDetectionMode
        var detectionModes = {
            'color': arController.artoolkit.AR_TEMPLATE_MATCHING_COLOR,
            'color_and_matrix': arController.artoolkit.AR_TEMPLATE_MATCHING_COLOR_AND_MATRIX,
            'mono': arController.artoolkit.AR_TEMPLATE_MATCHING_MONO,
            'mono_and_matrix': arController.artoolkit.AR_TEMPLATE_MATCHING_MONO_AND_MATRIX,
        }
        var detectionMode = detectionModes[_this.parameters.detectionMode]
        console.assert(detectionMode !== undefined)
        arController.setPatternDetectionMode(detectionMode);

        // setMatrixCodeType
        var matrixCodeTypes = {
            '3x3': arController.artoolkit.AR_MATRIX_CODE_3x3,
            '3x3_HAMMING63': arController.artoolkit.AR_MATRIX_CODE_3x3_HAMMING63,
            '3x3_PARITY65': arController.artoolkit.AR_MATRIX_CODE_3x3_PARITY65,
            '4x4': arController.artoolkit.AR_MATRIX_CODE_4x4,
            '4x4_BCH_13_9_3': arController.artoolkit.AR_MATRIX_CODE_4x4_BCH_13_9_3,
            '4x4_BCH_13_5_5': arController.artoolkit.AR_MATRIX_CODE_4x4_BCH_13_5_5,
        }
        var matrixCodeType = matrixCodeTypes[_this.parameters.matrixCodeType]
        console.assert(matrixCodeType !== undefined)
        arController.setMatrixCodeType(matrixCodeType);

        // set the patternRatio for artoolkit
        arController.setPattRatio(_this.parameters.patternRatio);

        // set thresholding in artoolkit
        // this seems to be the default
        // arController.setThresholdMode(artoolkit.AR_LABELING_THRESH_MODE_MANUAL)
        // adatative consume a LOT of cpu...
        // arController.setThresholdMode(artoolkit.AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE)
        // arController.setThresholdMode(artoolkit.AR_LABELING_THRESH_MODE_AUTO_OTSU)

        // notify
        onCompleted()
    });
    return this
}

/**
 * return the projection matrix
 */
Context.prototype.getProjectionMatrix = function (srcElement) {


    // FIXME rename this function to say it is artoolkit specific - getArtoolkitProjectMatrix
    // keep a backward compatibility with a console.warn

    console.assert(this.parameters.trackingBackend === 'artoolkit')
    console.assert(this.arController, 'arController MUST be initialized to call this function')
    // get projectionMatrixArr from artoolkit
    var projectionMatrixArr = this.arController.getCameraMatrix();
    var projectionMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(projectionMatrixArr)

    // return the result
    return projectionMatrix
}

Context.prototype._updateArtoolkit = function (srcElement) {
    this.arController.process(srcElement)
}

//////////////////////////////////////////////////////////////////////////////
//		dispose function
//////////////////////////////////////////////////////////////////////////////
Context.prototype.dispose = function () {
    this.initialized = false;

    // markers
    this._arMarkersControls.forEach(function (markerControls) {
        console.assert(markerControls instanceof threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__["default"]);
        markerControls.dispose();
    });
    this._arMarkersControls = [];

    // cameraParam
    if (this.arController && this.arController.cameraParam && this.arController.cameraParam.dispose) {
        this.arController.cameraParam.dispose();
    }


    // ARController
    if (this.arController && this.arController.dispose) {
        this.arController.dispose();
    }
    this.arController = null;

    // class properties
    this._artoolkitProjectionAxisTransformMatrix = null;

    // artoolkit
    // NOTE: since the instance of ARToolkit is created globally 
    // we should probably do not call .teardown() ... ?
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Context);

/***/ }),

/***/ "./three.js/src/threex/arjs-markercontrols.js":
/*!****************************************************!*\
  !*** ./three.js/src/threex/arjs-markercontrols.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./threex-arbasecontrols */ "./three.js/src/threex/threex-arbasecontrols.js");
/* harmony import */ var jsartoolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsartoolkit */ "../AR.js-github-org/artoolkit5-js/dist/ARToolkit.js");
/* harmony import */ var jsartoolkit__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsartoolkit__WEBPACK_IMPORTED_MODULE_2__);


 // TODO comment explanation
const { ARToolkit } = (jsartoolkit__WEBPACK_IMPORTED_MODULE_2___default());

const MarkerControls = function(context, object3d, parameters){
	var _this = this

	_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__["default"].call(this, object3d)

	this.context = context
	// handle default parameters
	this.parameters = {
		// size of the marker in meter
		size : 1,
		// type of marker - ['pattern', 'barcode', 'unknown' ]
		type : 'unknown',
		// url of the pattern - IIF type='pattern'
		patternUrl : null,
		// value of the barcode - IIF type='barcode'
		barcodeValue : null,
		// change matrix mode - [modelViewMatrix, cameraTransformMatrix]
		changeMatrixMode : 'modelViewMatrix',
		// minimal confidence in the marke recognition - between [0, 1] - default to 1
		minConfidence: 0.6,
		// turn on/off camera smoothing
		smooth: false,
		// number of matrices to smooth tracking over, more = smoother but slower follow
		smoothCount: 5,
		// distance tolerance for smoothing, if smoothThreshold # of matrices are under tolerance, tracking will stay still
		smoothTolerance: 0.01,
		// threshold for smoothing, will keep still unless enough matrices are over tolerance
		smoothThreshold: 2,
	}

	// sanity check
	var possibleValues = ['pattern', 'barcode', 'unknown']
	console.assert(possibleValues.indexOf(this.parameters.type) !== -1, 'illegal value', this.parameters.type)
	var possibleValues = ['modelViewMatrix', 'cameraTransformMatrix' ]
	console.assert(possibleValues.indexOf(this.parameters.changeMatrixMode) !== -1, 'illegal value', this.parameters.changeMatrixMode)


        // create the marker Root
	this.object3d = object3d
	this.object3d.matrixAutoUpdate = false;
	this.object3d.visible = false

	//////////////////////////////////////////////////////////////////////////////
	//		setParameters
	//////////////////////////////////////////////////////////////////////////////
	setParameters(parameters)
	function setParameters(parameters){
		if( parameters === undefined )	return
		for( var key in parameters ){
			var newValue = parameters[ key ]

			if( newValue === undefined ){
				console.warn( "ArMarkerControls: '" + key + "' parameter is undefined." )
				continue
			}

			var currentValue = _this.parameters[ key ]

			if( currentValue === undefined ){
				console.warn( "ArMarkerControls: '" + key + "' is not a property of this material." )
				continue
			}

			_this.parameters[ key ] = newValue
		}
	}

	if (this.parameters.smooth) {
		this.smoothMatrices = []; // last DEBOUNCE_COUNT modelViewMatrix
	}

	//////////////////////////////////////////////////////////////////////////////
	//		Code Separator
	//////////////////////////////////////////////////////////////////////////////
	// add this marker to artoolkitsystem
	// TODO rename that .addMarkerControls
	context.addMarker(this)

	if( _this.context.parameters.trackingBackend === 'artoolkit' ){
		this._initArtoolkit()
	}else console.assert(false)
}

MarkerControls.prototype = Object.create( _threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__["default"].prototype );
MarkerControls.prototype.constructor = MarkerControls;


//////////////////////////////////////////////////////////////////////////////
//		dispose instance
//////////////////////////////////////////////////////////////////////////////
MarkerControls.prototype.dispose = function(){
	if( this.context && this.context.arController ) {
		this.context.arController.removeEventListener('getMarker', this.onGetMarker);
	}

	this.context.removeMarker(this);
	
	this.object3d = null;
	this.smoothMatrices = [];
}

//////////////////////////////////////////////////////////////////////////////
//		update controls with new modelViewMatrix
//////////////////////////////////////////////////////////////////////////////

/**
 * When you actually got a new modelViewMatrix, you need to perfom a whole bunch
 * of things. it is done here.
 */
MarkerControls.prototype.updateWithModelViewMatrix = function(modelViewMatrix){
	var markerObject3D = this.object3d;

	// mark object as visible
	markerObject3D.visible = true

	if( this.context.parameters.trackingBackend === 'artoolkit' ){
		// apply context._axisTransformMatrix - change artoolkit axis to match usual webgl one
		var tmpMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().copy(this.context._artoolkitProjectionAxisTransformMatrix)
		tmpMatrix.multiply(modelViewMatrix)

		modelViewMatrix.copy(tmpMatrix)
	}else console.assert(false)

	// change axis orientation on marker - artoolkit say Z is normal to the marker - ar.js say Y is normal to the marker
	var markerAxisTransformMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeRotationX(Math.PI/2)
	modelViewMatrix.multiply(markerAxisTransformMatrix)

	var renderReqd = false;

	// change markerObject3D.matrix based on parameters.changeMatrixMode
	if( this.parameters.changeMatrixMode === 'modelViewMatrix' ){
		if (this.parameters.smooth) {
			var sum,
					i, j,
					averages, // average values for matrix over last smoothCount
					exceedsAverageTolerance = 0;

			this.smoothMatrices.push(modelViewMatrix.elements.slice()); // add latest

			if (this.smoothMatrices.length < (this.parameters.smoothCount + 1)) {
				markerObject3D.matrix.copy(modelViewMatrix); // not enough for average
			} else {
				this.smoothMatrices.shift(); // remove oldest entry
				averages = [];

				for (i in modelViewMatrix.elements) { // loop over entries in matrix
					sum = 0;
					for (j in this.smoothMatrices) { // calculate average for this entry
						sum += this.smoothMatrices[j][i];
					}
					averages[i] = sum / this.parameters.smoothCount;
					// check how many elements vary from the average by at least AVERAGE_MATRIX_TOLERANCE
					if (Math.abs(averages[i] - modelViewMatrix.elements[i]) >= this.parameters.smoothTolerance) {
						exceedsAverageTolerance++;
					}
				}

				// if moving (i.e. at least AVERAGE_MATRIX_THRESHOLD entries are over AVERAGE_MATRIX_TOLERANCE)
				if (exceedsAverageTolerance >= this.parameters.smoothThreshold) {
					// then update matrix values to average, otherwise, don't render to minimize jitter
					for (i in modelViewMatrix.elements) {
						modelViewMatrix.elements[i] = averages[i];
					}
					markerObject3D.matrix.copy(modelViewMatrix);
					renderReqd = true; // render required in animation loop
				}
			}
		} else {
			markerObject3D.matrix.copy(modelViewMatrix)
		}
	}else if( this.parameters.changeMatrixMode === 'cameraTransformMatrix' ){
		markerObject3D.matrix.copy(modelViewMatrix).invert()
	}else {
		console.assert(false)
	}

	// decompose - the matrix into .position, .quaternion, .scale
	markerObject3D.matrix.decompose(markerObject3D.position, markerObject3D.quaternion, markerObject3D.scale)

	// dispatchEvent
	this.dispatchEvent( { type: 'markerFound' } );

	return renderReqd;
}

//////////////////////////////////////////////////////////////////////////////
//		utility functions
//////////////////////////////////////////////////////////////////////////////

/**
 * provide a name for a marker
 * - silly heuristic for now
 * - should be improved
 */
MarkerControls.prototype.name = function(){
	var name = ''
	name += this.parameters.type;
	if( this.parameters.type === 'pattern' ){
		var url = this.parameters.patternUrl
		var basename = url.replace(/^.*\//g, '')
		name += ' - ' + basename
	}else if( this.parameters.type === 'barcode' ){
		name += ' - ' + this.parameters.barcodeValue
	}else{
		console.assert(false, 'no .name() implemented for this marker controls')
	}
	return name
}

//////////////////////////////////////////////////////////////////////////////
//		init for Artoolkit
//////////////////////////////////////////////////////////////////////////////
MarkerControls.prototype._initArtoolkit = function(){
	var _this = this

	var artoolkitMarkerId = null

	var delayedInitTimerId = setInterval(function(){
		// check if arController is init
		var arController = _this.context.arController
		if( arController === null )	return
		// stop looping if it is init
		clearInterval(delayedInitTimerId)
		delayedInitTimerId = null
		// launch the _postInitArtoolkit
		postInit()
	}, 1000/50)

	return

	function postInit(){
		// check if arController is init
		var arController = _this.context.arController
		console.assert(arController !== null )

		// start tracking this pattern
		if( _this.parameters.type === 'pattern' ){
	                arController.loadMarker(_this.parameters.patternUrl).then(function(markerId) {
				artoolkitMarkerId = markerId
	                        arController.trackPatternMarkerId(artoolkitMarkerId, _this.parameters.size);
	                });
		}else if( _this.parameters.type === 'barcode' ){
			artoolkitMarkerId = _this.parameters.barcodeValue
			arController.trackBarcodeMarkerId(artoolkitMarkerId, _this.parameters.size);
		}else if( _this.parameters.type === 'unknown' ){
			artoolkitMarkerId = null
		}else{
			console.log(false, 'invalid marker type', _this.parameters.type)
		}

		// listen to the event
		arController.addEventListener('getMarker', onGetMarker)

	}

	function onMarkerFound(event){
		// honor his.parameters.minConfidence
		if( event.data.type === ARToolkit.PATTERN_MARKER && event.data.marker.cfPatt < _this.parameters.minConfidence )	return
		if( event.data.type === ARToolkit.BARCODE_MARKER && event.data.marker.cfMatrix < _this.parameters.minConfidence )	return

		var modelViewMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(event.data.matrix)
		_this.updateWithModelViewMatrix(modelViewMatrix)
	}

	function onGetMarker(event){
		if( event.data.type === ARToolkit.PATTERN_MARKER && _this.parameters.type === 'pattern' ){
			if( artoolkitMarkerId === null )	return
			if( event.data.marker.idPatt === artoolkitMarkerId ) onMarkerFound(event)
		}else if( event.data.type === ARToolkit.BARCODE_MARKER && _this.parameters.type === 'barcode' ){
			// console.log('BARCODE_MARKER idMatrix', event.data.marker.idMatrix, artoolkitMarkerId )
			if( artoolkitMarkerId === null )	return
			if( event.data.marker.idMatrix === artoolkitMarkerId )  onMarkerFound(event)
		}else if( event.data.type === ARToolkit.UNKNOWN_MARKER && _this.parameters.type === 'unknown'){
			onMarkerFound(event)
		}
	}

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MarkerControls);


/***/ }),

/***/ "./three.js/src/threex/arjs-profile.js":
/*!*********************************************!*\
  !*** ./three.js/src/threex/arjs-profile.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _new_api_arjs_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../new-api/arjs-utils */ "./three.js/src/new-api/arjs-utils.js");
/* harmony import */ var _arjs_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arjs-context */ "./three.js/src/threex/arjs-context.js");

 // TODO context build-dependent

/**
 * ArToolkitProfile helps you build parameters for artoolkit
 * - it is fully independent of the rest of the code
 * - all the other classes are still expecting normal parameters
 * - you can use this class to understand how to tune your specific usecase
 * - it is made to help people to build parameters without understanding all the underlying details.
 */
const Profile = function () {
    this.reset()

    this.performance('default')
}

Profile.prototype._guessPerformanceLabel = function () {
    var isMobile = navigator.userAgent.match(/Android/i)
        || navigator.userAgent.match(/webOS/i)
        || navigator.userAgent.match(/iPhone/i)
        || navigator.userAgent.match(/iPad/i)
        || navigator.userAgent.match(/iPod/i)
        || navigator.userAgent.match(/BlackBerry/i)
        || navigator.userAgent.match(/Windows Phone/i)
        ? true : false
    if (isMobile === true) {
        return 'phone-normal'
    }
    return 'desktop-normal'
}

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////

/**
 * reset all parameters
 */
Profile.prototype.reset = function () {
    this.sourceParameters = {
        // to read from the webcam
        sourceType: 'webcam',
    }

    this.contextParameters = {
        cameraParametersUrl: _arjs_context__WEBPACK_IMPORTED_MODULE_1__["default"].baseURL + '../data/data/camera_para.dat', // TODO dependent of build?
        detectionMode: 'mono',
    }
    this.defaultMarkerParameters = {
        type: 'pattern',
        patternUrl: _arjs_context__WEBPACK_IMPORTED_MODULE_1__["default"].baseURL + '../data/data/patt.hiro', // TODO dependent of build?
        changeMatrixMode: 'modelViewMatrix',
    }
    return this
};

//////////////////////////////////////////////////////////////////////////////
//		Performance
//////////////////////////////////////////////////////////////////////////////



Profile.prototype.performance = function (label) {

    if (label === 'default') {
        label = this._guessPerformanceLabel()
    }

    if (label === 'desktop-fast') {
        this.contextParameters.canvasWidth = 640 * 3
        this.contextParameters.canvasHeight = 480 * 3

        this.contextParameters.maxDetectionRate = 30
    } else if (label === 'desktop-normal') {
        this.contextParameters.canvasWidth = 640
        this.contextParameters.canvasHeight = 480

        this.contextParameters.maxDetectionRate = 60
    } else if (label === 'phone-normal') {
        this.contextParameters.canvasWidth = 80 * 4
        this.contextParameters.canvasHeight = 60 * 4

        this.contextParameters.maxDetectionRate = 30
    } else if (label === 'phone-slow') {
        this.contextParameters.canvasWidth = 80 * 3
        this.contextParameters.canvasHeight = 60 * 3

        this.contextParameters.maxDetectionRate = 30
    } else {
        console.assert(false, 'unknonwn label ' + label)
    }
    return this
}

//////////////////////////////////////////////////////////////////////////////
//		Marker
//////////////////////////////////////////////////////////////////////////////


Profile.prototype.defaultMarker = function (trackingBackend) {
    trackingBackend = trackingBackend || this.contextParameters.trackingBackend

    if (trackingBackend === 'artoolkit') {
        this.contextParameters.detectionMode = 'mono'
        this.defaultMarkerParameters.type = 'pattern'
        this.defaultMarkerParameters.patternUrl = _arjs_context__WEBPACK_IMPORTED_MODULE_1__["default"].baseURL + '../data/data/patt.hiro' // TODO dependent of build?
    } else console.assert(false)

    return this
}
//////////////////////////////////////////////////////////////////////////////
//		Source
//////////////////////////////////////////////////////////////////////////////
Profile.prototype.sourceWebcam = function () {
    this.sourceParameters.sourceType = 'webcam'
    delete this.sourceParameters.sourceUrl
    return this
}

Profile.prototype.sourceVideo = function (url) {
    this.sourceParameters.sourceType = 'video'
    this.sourceParameters.sourceUrl = url
    return this
}

Profile.prototype.sourceImage = function (url) {
    this.sourceParameters.sourceType = 'image'
    this.sourceParameters.sourceUrl = url
    return this
}

//////////////////////////////////////////////////////////////////////////////
//		trackingBackend
//////////////////////////////////////////////////////////////////////////////
Profile.prototype.trackingBackend = function (trackingBackend) {
    console.warn('stop profile.trackingBackend() obsolete function. use .trackingMethod instead')
    this.contextParameters.trackingBackend = trackingBackend
    return this
}

//////////////////////////////////////////////////////////////////////////////
//		trackingBackend
//////////////////////////////////////////////////////////////////////////////
Profile.prototype.changeMatrixMode = function (changeMatrixMode) {
    this.defaultMarkerParameters.changeMatrixMode = changeMatrixMode
    return this
}

//////////////////////////////////////////////////////////////////////////////
//		trackingBackend
//////////////////////////////////////////////////////////////////////////////
Profile.prototype.trackingMethod = function (trackingMethod) {
    var data = _new_api_arjs_utils__WEBPACK_IMPORTED_MODULE_0__["default"].parseTrackingMethod(trackingMethod)
    this.defaultMarkerParameters.markersAreaEnabled = data.markersAreaEnabled
    this.contextParameters.trackingBackend = data.trackingBackend
    return this
}

/**
 * check if the profile is valid. Throw an exception is not valid
 */
Profile.prototype.checkIfValid = function () {
    return this
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Profile);


/***/ }),

/***/ "./three.js/src/threex/arjs-source.js":
/*!********************************************!*\
  !*** ./three.js/src/threex/arjs-source.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const Source = function (parameters) {
    var _this = this

    this.ready = false
    this.domElement = null

    // handle default parameters
    this.parameters = {
        // type of source - ['webcam', 'image', 'video']
        sourceType: 'webcam',
        // url of the source - valid if sourceType = image|video
        sourceUrl: null,

        // Device id of the camera to use (optional)
        deviceId: null,

        // resolution of at which we initialize in the source image
        sourceWidth: 640,
        sourceHeight: 480,
        // resolution displayed for the source
        displayWidth: 640,
        displayHeight: 480,
    }
    //////////////////////////////////////////////////////////////////////////////
    //		setParameters
    //////////////////////////////////////////////////////////////////////////////
    setParameters(parameters)
    function setParameters(parameters) {
        if (parameters === undefined) return
        for (var key in parameters) {
            var newValue = parameters[key]

            if (newValue === undefined) {
                console.warn("ArToolkitSource: '" + key + "' parameter is undefined.")
                continue
            }

            var currentValue = _this.parameters[key]

            if (currentValue === undefined) {
                console.warn("ArToolkitSource: '" + key + "' is not a property of this material.")
                continue
            }

            _this.parameters[key] = newValue
        }
    }

    this.onInitialClick = function() {
        if( this.domElement && this.domElement.play ) {
            this.domElement.play().then( () => {});
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////
Source.prototype.init = function (onReady, onError) {
    var _this = this

    if (this.parameters.sourceType === 'image') {
        var domElement = this._initSourceImage(onSourceReady, onError)
    } else if (this.parameters.sourceType === 'video') {
        var domElement = this._initSourceVideo(onSourceReady, onError)
    } else if (this.parameters.sourceType === 'webcam') {
        // var domElement = this._initSourceWebcamOld(onSourceReady)
        var domElement = this._initSourceWebcam(onSourceReady, onError)
    } else {
        console.assert(false)
    }

    // attach
    this.domElement = domElement
    this.domElement.style.position = 'absolute'
    this.domElement.style.top = '0px'
    this.domElement.style.left = '0px'
    this.domElement.style.zIndex = '-2'
    this.domElement.setAttribute('id', 'arjs-video');

    return this
    function onSourceReady() {
        if( !_this.domElement ) {
            return;
        }

        document.body.appendChild(_this.domElement);
        window.dispatchEvent(new CustomEvent('arjs-video-loaded', {
            detail: {
                component: document.querySelector('#arjs-video'),
            },
        }));

        _this.ready = true

        onReady && onReady()
    }
}

////////////////////////////////////////////////////////////////////////////////
//          init image source
////////////////////////////////////////////////////////////////////////////////


Source.prototype._initSourceImage = function (onReady) {
    // TODO make it static
    var domElement = document.createElement('img');
    domElement.src = this.parameters.sourceUrl;

    domElement.width = this.parameters.sourceWidth;
    domElement.height = this.parameters.sourceHeight;
    domElement.style.width = this.parameters.displayWidth + 'px';
    domElement.style.height = this.parameters.displayHeight + 'px';

    domElement.onload = onReady;
    return domElement
}

////////////////////////////////////////////////////////////////////////////////
//          init video source
////////////////////////////////////////////////////////////////////////////////


Source.prototype._initSourceVideo = function (onReady) {
    // TODO make it static
    var domElement = document.createElement('video');
    domElement.src = this.parameters.sourceUrl;

    domElement.style.objectFit = 'initial';

    domElement.autoplay = true;
    domElement.webkitPlaysinline = true;
    domElement.controls = false;
    domElement.loop = true;
    domElement.muted = true;

    // start the video on first click if not started automatically
    document.body.addEventListener('click', this.onInitialClick, {once:true});

    domElement.width = this.parameters.sourceWidth;
    domElement.height = this.parameters.sourceHeight;
    domElement.style.width = this.parameters.displayWidth + 'px';
    domElement.style.height = this.parameters.displayHeight + 'px';

    domElement.onloadeddata = onReady;
    return domElement
}

////////////////////////////////////////////////////////////////////////////////
//          init webcam source
////////////////////////////////////////////////////////////////////////////////

Source.prototype._initSourceWebcam = function (onReady, onError) {
    var _this = this

    // init default value
    onError = onError || function (error) {
        var event = new CustomEvent('camera-error', { error: error });
        window.dispatchEvent(event);

        setTimeout(() => {
            if (!document.getElementById('error-popup')) {
                var errorPopup = document.createElement('div');
                errorPopup.innerHTML = 'Webcam Error\nName: ' + error.name + '\nMessage: ' + error.message
                errorPopup.setAttribute('id', 'error-popup');
                document.body.appendChild(errorPopup);
            }
        }, 1000);
    }

    var domElement = document.createElement('video');
    domElement.setAttribute('autoplay', '');
    domElement.setAttribute('muted', '');
    domElement.setAttribute('playsinline', '');
    domElement.style.width = this.parameters.displayWidth + 'px'
    domElement.style.height = this.parameters.displayHeight + 'px'

    // check API is available
    if (navigator.mediaDevices === undefined
        || navigator.mediaDevices.enumerateDevices === undefined
        || navigator.mediaDevices.getUserMedia === undefined) {
        if (navigator.mediaDevices === undefined) var fctName = 'navigator.mediaDevices'
        else if (navigator.mediaDevices.enumerateDevices === undefined) var fctName = 'navigator.mediaDevices.enumerateDevices'
        else if (navigator.mediaDevices.getUserMedia === undefined) var fctName = 'navigator.mediaDevices.getUserMedia'
        else console.assert(false)
        onError({
            name: '',
            message: 'WebRTC issue-! ' + fctName + ' not present in your browser'
        });
        return null
    }

    // get available devices
    navigator.mediaDevices.enumerateDevices().then(function (devices) {
        var userMediaConstraints = {
            audio: false,
            video: {
                facingMode: 'environment',
                width: {
                    ideal: _this.parameters.sourceWidth,
                    // min: 1024,
                    // max: 1920
                },
                height: {
                    ideal: _this.parameters.sourceHeight,
                    // min: 776,
                    // max: 1080
                }
            }
        };

        if (null !== _this.parameters.deviceId) {
            userMediaConstraints.video.deviceId = {
                exact: _this.parameters.deviceId
            };
        }

        // get a device which satisfy the constraints
        navigator.mediaDevices.getUserMedia(userMediaConstraints).then(function success(stream) {
            // set the .src of the domElement
            domElement.srcObject = stream;

            var event = new CustomEvent('camera-init', { stream: stream });
            window.dispatchEvent(event);

            // start the video on first click if not started automatically
            document.body.addEventListener('click', _this.onInitialClick, {once:true});            

            onReady();
        }).catch(function (error) {
            onError({
                name: error.name,
                message: error.message
            });
        });
    }).catch(function (error) {
        onError({
            message: error.message
        });
    });

    return domElement
}

////////////////////////////////////////////////////////////////////////////////
//          dispose source
////////////////////////////////////////////////////////////////////////////////

Source.prototype.dispose = function () {
    this.ready = false;

    switch (this.parameters.sourceType) {
        case 'image':
            this._disposeSourceImage();
            break;

        case 'video':
            this._disposeSourceVideo();
            break;

        case 'webcam':
            this._disposeSourceWebcam();
            break;
    }

    this.domElement = null;

    document.body.removeEventListener('click', this.onInitialClick, {once:true});            
}	

////////////////////////////////////////////////////////////////////////////////
//          dispose image source
////////////////////////////////////////////////////////////////////////////////

Source.prototype._disposeSourceImage = function () {
    var domElement = document.querySelector('#arjs-video');

    if( !domElement ) {
        return;
    }

    domElement.remove();
}

////////////////////////////////////////////////////////////////////////////////
//          dispose video source
////////////////////////////////////////////////////////////////////////////////

Source.prototype._disposeSourceVideo = function () {
    var domElement = document.querySelector('#arjs-video');
    
    if( !domElement ) {
        return;
    }

    // https://html.spec.whatwg.org/multipage/media.html#best-practices-for-authors-using-media-elements
    domElement.pause();
    domElement.removeAttribute('src'); 
    domElement.load(); 

    domElement.remove();    
}

////////////////////////////////////////////////////////////////////////////////
//          dispose webcam source
////////////////////////////////////////////////////////////////////////////////

Source.prototype._disposeSourceWebcam = function () {
    var domElement = document.querySelector('#arjs-video');

    if( !domElement ) {
        return;
    }

    // https://stackoverflow.com/a/12436772
    if( domElement.srcObject && domElement.srcObject.getTracks ) {
        domElement.srcObject.getTracks().map((track) => track.stop());    
    }	

    domElement.remove();	
}

//////////////////////////////////////////////////////////////////////////////
//		Handle Mobile Torch
//////////////////////////////////////////////////////////////////////////////
Source.prototype.hasMobileTorch = function () {
    var stream = arToolkitSource.domElement.srcObject
    if (stream instanceof MediaStream === false) return false

    if (this._currentTorchStatus === undefined) {
        this._currentTorchStatus = false
    }

    var videoTrack = stream.getVideoTracks()[0];

    // if videoTrack.getCapabilities() doesnt exist, return false now
    if (videoTrack.getCapabilities === undefined) return false

    var capabilities = videoTrack.getCapabilities()

    return capabilities.torch ? true : false
}

/**
 * toggle the flash/torch of the mobile fun if applicable.
 * Great post about it https://www.oberhofer.co/mediastreamtrack-and-its-capabilities/
 */
Source.prototype.toggleMobileTorch = function () {
    // sanity check
    console.assert(this.hasMobileTorch() === true);

    var stream = arToolkitSource.domElement.srcObject;
    if (stream instanceof MediaStream === false) {
        if (!document.getElementById('error-popup')) {
            var errorPopup = document.createElement('div');
            errorPopup.innerHTML = 'enabling mobile torch is available only on webcam';
            errorPopup.setAttribute('id', 'error-popup');
            document.body.appendChild(errorPopup);
        }
        return;
    }

    if (this._currentTorchStatus === undefined) {
        this._currentTorchStatus = false;
    }

    var videoTrack = stream.getVideoTracks()[0];
    var capabilities = videoTrack.getCapabilities();

    if (!capabilities.torch) {
        if (!document.getElementById('error-popup')) {
            var errorPopup = document.createElement('div');
            errorPopup.innerHTML = 'no mobile torch is available on your camera';
            errorPopup.setAttribute('id', 'error-popup');
            document.body.appendChild(errorPopup);
        }
        return;
    }

    this._currentTorchStatus = this._currentTorchStatus === false ? true : false;
    videoTrack.applyConstraints({
        advanced: [{
            torch: this._currentTorchStatus
        }]
    }).catch(function (error) {
        console.log(error)
    });
}

Source.prototype.domElementWidth = function () {
    return parseInt(this.domElement.style.width)
}
Source.prototype.domElementHeight = function () {
    return parseInt(this.domElement.style.height)
}

////////////////////////////////////////////////////////////////////////////////
//          handle resize
////////////////////////////////////////////////////////////////////////////////

Source.prototype.onResizeElement = function () {
    var _this = this
    var screenWidth = window.innerWidth
    var screenHeight = window.innerHeight

    // sanity check
    console.assert(arguments.length === 0)

    // compute sourceWidth, sourceHeight
    if (this.domElement.nodeName === "IMG") {
        var sourceWidth = this.domElement.naturalWidth
        var sourceHeight = this.domElement.naturalHeight
    } else if (this.domElement.nodeName === "VIDEO") {
        var sourceWidth = this.domElement.videoWidth
        var sourceHeight = this.domElement.videoHeight
    } else {
        console.assert(false)
    }

    // compute sourceAspect
    var sourceAspect = sourceWidth / sourceHeight
    // compute screenAspect
    var screenAspect = screenWidth / screenHeight

    // if screenAspect < sourceAspect, then change the width, else change the height
    if (screenAspect < sourceAspect) {
        // compute newWidth and set .width/.marginLeft
        var newWidth = sourceAspect * screenHeight
        this.domElement.style.width = newWidth + 'px'
        this.domElement.style.marginLeft = -(newWidth - screenWidth) / 2 + 'px'

        // init style.height/.marginTop to normal value
        this.domElement.style.height = screenHeight + 'px'
        this.domElement.style.marginTop = '0px'
    } else {
        // compute newHeight and set .height/.marginTop
        var newHeight = 1 / (sourceAspect / screenWidth)
        this.domElement.style.height = newHeight + 'px'
        this.domElement.style.marginTop = -(newHeight - screenHeight) / 2 + 'px'

        // init style.width/.marginLeft to normal value
        this.domElement.style.width = screenWidth + 'px'
        this.domElement.style.marginLeft = '0px'
    }
}
/*
Source.prototype.copyElementSizeTo = function(otherElement){
	otherElement.style.width = this.domElement.style.width
	otherElement.style.height = this.domElement.style.height
	otherElement.style.marginLeft = this.domElement.style.marginLeft
	otherElement.style.marginTop = this.domElement.style.marginTop
}
*/

Source.prototype.copyElementSizeTo = function (otherElement) {

    if (window.innerWidth > window.innerHeight) {
        //landscape
        otherElement.style.width = this.domElement.style.width
        otherElement.style.height = this.domElement.style.height
        otherElement.style.marginLeft = this.domElement.style.marginLeft
        otherElement.style.marginTop = this.domElement.style.marginTop
    }
    else {
        //portrait
        otherElement.style.height = this.domElement.style.height
        otherElement.style.width = (parseInt(otherElement.style.height) * 4 / 3) + "px";
        otherElement.style.marginLeft = ((window.innerWidth - parseInt(otherElement.style.width)) / 2) + "px";
        otherElement.style.marginTop = 0;
    }

}

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////

Source.prototype.copySizeTo = function () {
    console.warn('obsolete function arToolkitSource.copySizeTo. Use arToolkitSource.copyElementSizeTo')
    this.copyElementSizeTo.apply(this, arguments)
}

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////

Source.prototype.onResize = function (arToolkitContext, renderer, camera) {
    if (arguments.length !== 3) {
        console.warn('obsolete function arToolkitSource.onResize. Use arToolkitSource.onResizeElement')
        return this.onResizeElement.apply(this, arguments)
    }

    var trackingBackend = arToolkitContext.parameters.trackingBackend


    // RESIZE DOMELEMENT
    if (trackingBackend === 'artoolkit') {

        this.onResizeElement()

        var isAframe = renderer.domElement.dataset.aframeCanvas ? true : false
        if (isAframe === false) {
            this.copyElementSizeTo(renderer.domElement)
        } else {

        }

        if (arToolkitContext.arController !== null) {
            this.copyElementSizeTo(arToolkitContext.arController.canvas)
        }
    } else console.assert(false, 'unhandled trackingBackend ' + trackingBackend)


    // UPDATE CAMERA
    if (trackingBackend === 'artoolkit') {
        if (arToolkitContext.arController !== null) {
            camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());
        }
    } else console.assert(false, 'unhandled trackingBackend ' + trackingBackend)
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Source);

/***/ }),

/***/ "./three.js/src/threex/threex-arbasecontrols.js":
/*!******************************************************!*\
  !*** ./three.js/src/threex/threex-arbasecontrols.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);


const ArBaseControls = function(object3d) {
	this.id = ArBaseControls.id++

	this.object3d = object3d
	this.object3d.matrixAutoUpdate = false;
	this.object3d.visible = false

	// Events to honor
	// this.dispatchEvent({ type: 'becameVisible' })
	// this.dispatchEvent({ type: 'markerVisible' })	// replace markerFound
	// this.dispatchEvent({ type: 'becameUnVisible' })
}

ArBaseControls.id = 0

ArBaseControls.prototype = Object.create(three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype);

//////////////////////////////////////////////////////////////////////////////
//		Functions
//////////////////////////////////////////////////////////////////////////////
/**
 * error catching function for update()
 */
ArBaseControls.prototype.update = function(){
	console.assert(false, 'you need to implement your own update')
}

/**
 * error catching function for name()
 */
ArBaseControls.prototype.name = function(){
	console.assert(false, 'you need to implement your own .name()')
	return 'Not yet implemented - name()'
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArBaseControls);


/***/ }),

/***/ "./three.js/src/threex/threex-armarkerhelper.js":
/*!******************************************************!*\
  !*** ./three.js/src/threex/threex-armarkerhelper.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);


const ArMarkerHelper = function(markerControls){
	this.object3d = new three__WEBPACK_IMPORTED_MODULE_0__.Group

	var mesh = new three__WEBPACK_IMPORTED_MODULE_0__.AxesHelper()
	this.object3d.add(mesh)

	var text = markerControls.id
	// debugger
	// var text = markerControls.parameters.patternUrl.slice(-1).toUpperCase();

	var canvas = document.createElement( 'canvas' );
	canvas.width =  64;
	canvas.height = 64;

	var context = canvas.getContext( '2d' );
	var texture = new three__WEBPACK_IMPORTED_MODULE_0__.CanvasTexture( canvas );

	// put the text in the sprite
	context.font = '48px monospace';
	context.fillStyle = 'rgba(192,192,255, 0.5)';
	context.fillRect( 0, 0, canvas.width, canvas.height );
	context.fillStyle = 'darkblue';
	context.fillText(text, canvas.width/4, 3*canvas.height/4 )
	texture.needsUpdate = true

	// var geometry = new THREE.CubeGeometry(1, 1, 1)
	var geometry = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(1, 1)
	var material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({
		map: texture,
		transparent: true
	});
	var mesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material)
	mesh.rotation.x = -Math.PI/2

	this.object3d.add(mesh)

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArMarkerHelper);


/***/ }),

/***/ "./three.js/src/threex/threex-arsmoothedcontrols.js":
/*!**********************************************************!*\
  !*** ./three.js/src/threex/threex-arsmoothedcontrols.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./threex-arbasecontrols */ "./three.js/src/threex/threex-arbasecontrols.js");


/**
 * - lerp position/quaternino/scale
 * - minDelayDetected
 * - minDelayUndetected
 * @param {[type]} object3d   [description]
 * @param {[type]} parameters [description]
 */
const ArSmoothedControls = function(object3d, parameters){
	var _this = this
	
	_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_0__["default"].call(this, object3d)
	
	// copy parameters
	this.object3d.visible = false
	
	this._lastLerpStepAt = null
	this._visibleStartedAt = null
	this._unvisibleStartedAt = null

	// handle default parameters
	parameters = parameters || {}
	this.parameters = {
		// lerp coeficient for the position - between [0,1] - default to 1
		lerpPosition: 0.8,
		// lerp coeficient for the quaternion - between [0,1] - default to 1
		lerpQuaternion: 0.2,
		// lerp coeficient for the scale - between [0,1] - default to 1
		lerpScale: 0.7,
		// delay for lerp fixed steps - in seconds - default to 1/120
		lerpStepDelay: 1/60,
		// minimum delay the sub-control must be visible before this controls become visible - default to 0 seconds
		minVisibleDelay: 0.0,
		// minimum delay the sub-control must be unvisible before this controls become unvisible - default to 0 seconds
		minUnvisibleDelay: 0.2,
	}
	
	//////////////////////////////////////////////////////////////////////////////
	//		setParameters
	//////////////////////////////////////////////////////////////////////////////
	setParameters(parameters)
	function setParameters(parameters){
		if( parameters === undefined )	return
		for( var key in parameters ){
			var newValue = parameters[ key ]

			if( newValue === undefined ){
				console.warn( "ArSmoothedControls: '" + key + "' parameter is undefined." )
				continue
			}

			var currentValue = _this.parameters[ key ]

			if( currentValue === undefined ){
				console.warn( "ArSmoothedControls: '" + key + "' is not a property of this material." )
				continue
			}

			_this.parameters[ key ] = newValue
		}
	}
}
	
ArSmoothedControls.prototype = Object.create( _threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_0__["default"].prototype );
ArSmoothedControls.prototype.constructor = ArSmoothedControls;

//////////////////////////////////////////////////////////////////////////////
//		update function
//////////////////////////////////////////////////////////////////////////////

ArSmoothedControls.prototype.update = function(targetObject3d){
	var object3d = this.object3d
	var parameters = this.parameters
	var wasVisible = object3d.visible
	var present = performance.now()/1000


	//////////////////////////////////////////////////////////////////////////////
	//		handle object3d.visible with minVisibleDelay/minUnvisibleDelay
	//////////////////////////////////////////////////////////////////////////////
	if( targetObject3d.visible === false )	this._visibleStartedAt = null
	if( targetObject3d.visible === true )	this._unvisibleStartedAt = null

	if( targetObject3d.visible === true && this._visibleStartedAt === null )	this._visibleStartedAt = present
	if( targetObject3d.visible === false && this._unvisibleStartedAt === null )	this._unvisibleStartedAt = present

	if( wasVisible === false && targetObject3d.visible === true ){
		var visibleFor = present - this._visibleStartedAt
		if( visibleFor >= this.parameters.minVisibleDelay ){
			object3d.visible = true
			snapDirectlyToTarget()
		}
		// console.log('visibleFor', visibleFor)
	}

	if( wasVisible === true && targetObject3d.visible === false ){
		var unvisibleFor = present - this._unvisibleStartedAt
		if( unvisibleFor >= this.parameters.minUnvisibleDelay ){
			object3d.visible = false			
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////
	//		apply lerp on positon/quaternion/scale
	//////////////////////////////////////////////////////////////////////////////

	// apply lerp steps - require fix time steps to behave the same no matter the fps
	if( this._lastLerpStepAt === null ){
		applyOneSlerpStep()
		this._lastLerpStepAt = present
	}else{
		var nStepsToDo = Math.floor( (present - this._lastLerpStepAt)/this.parameters.lerpStepDelay )
		for(var i = 0; i < nStepsToDo; i++){
			applyOneSlerpStep()
			this._lastLerpStepAt += this.parameters.lerpStepDelay
		}
	}

	// disable the lerp by directly copying targetObject3d position/quaternion/scale
	if( false ){}

	// update the matrix
	this.object3d.updateMatrix()

	//////////////////////////////////////////////////////////////////////////////
	//		honor becameVisible/becameUnVisible event
	//////////////////////////////////////////////////////////////////////////////
	// honor becameVisible event
	if( wasVisible === false && object3d.visible === true ){
		this.dispatchEvent({ type: 'becameVisible' })
	}
	// honor becameUnVisible event
	if( wasVisible === true && object3d.visible === false ){
		this.dispatchEvent({ type: 'becameUnVisible' })
	}
	return

	function snapDirectlyToTarget(){
		object3d.position.copy( targetObject3d.position )
		object3d.quaternion.copy( targetObject3d.quaternion )
		object3d.scale.copy( targetObject3d.scale )
	}	
	
	function applyOneSlerpStep(){
		object3d.position.lerp(targetObject3d.position, parameters.lerpPosition)
		object3d.quaternion.slerp(targetObject3d.quaternion, parameters.lerpQuaternion)
		object3d.scale.lerp(targetObject3d.scale, parameters.lerpScale)
	}
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArSmoothedControls);


/***/ }),

/***/ "./three.js/src/threex/threex-hittesting-plane.js":
/*!********************************************************!*\
  !*** ./three.js/src/threex/threex-hittesting-plane.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);


// TODO this is useless - prefere arjs-HitTesting.js

/**
 * - maybe support .onClickFcts in each object3d
 * - seems an easy light layer for clickable object
 * - up to 
 */
const HitTestingPlane = function(sourceElement){
	this._sourceElement = sourceElement

	// create _pickingScene
	this._pickingScene = new three__WEBPACK_IMPORTED_MODULE_0__.Scene
	
	// create _pickingPlane
	var geometry = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(20,20,19,19).rotateX(-Math.PI/2)
	// var geometry = new THREE.PlaneGeometry(20,20).rotateX(-Math.PI/2)
	var material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({
		// opacity: 0.5,
		// transparent: true,
		wireframe: true
	})
	// material.visible = false
	this._pickingPlane = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material)
	this._pickingScene.add(this._pickingPlane)

	// Create pickingCamera
	var fullWidth = parseInt(sourceElement.style.width)
	var fullHeight = parseInt(sourceElement.style.height)
	// TODO hardcoded fov - couch
	this._pickingCamera = new three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera(42, fullWidth / fullHeight, 0.1, 30);	
}

//////////////////////////////////////////////////////////////////////////////
//		update function
//////////////////////////////////////////////////////////////////////////////

HitTestingPlane.prototype.update = function(camera, pickingRoot, changeMatrixMode){

	this.onResize()
	

	if( changeMatrixMode === 'modelViewMatrix' ){
		// set pickingPlane position
		var pickingPlane = this._pickingPlane
		pickingRoot.parent.updateMatrixWorld()
		pickingPlane.matrix.copy(pickingRoot.parent.matrixWorld)
		// set position/quaternion/scale from pickingPlane.matrix
		pickingPlane.matrix.decompose(pickingPlane.position, pickingPlane.quaternion, pickingPlane.scale)
	}else if( changeMatrixMode === 'cameraTransformMatrix' ){
		// set pickingPlane position
		var pickingCamera = this._pickingCamera
		camera.updateMatrixWorld()
		pickingCamera.matrix.copy(camera.matrixWorld)
		// set position/quaternion/scale from pickingCamera.matrix
		pickingCamera.matrix.decompose(pickingCamera.position, pickingCamera.quaternion, pickingCamera.scale)
	}else console.assert(false)


// var position = this._pickingPlane.position
// console.log('pickingPlane position', position.x.toFixed(2), position.y.toFixed(2), position.z.toFixed(2))
// var position = this._pickingCamera.position
// console.log('his._pickingCamera position', position.x.toFixed(2), position.y.toFixed(2), position.z.toFixed(2))
	
}

//////////////////////////////////////////////////////////////////////////////
//		resize camera
//////////////////////////////////////////////////////////////////////////////

HitTestingPlane.prototype.onResize = function(){
	var sourceElement = this._sourceElement
	var pickingCamera = this._pickingCamera
	
// FIXME why using css here ??? not even computed style
// should get the size of the elment directly independantly 
	var fullWidth = parseInt(sourceElement.style.width)
	var fullHeight = parseInt(sourceElement.style.height)
	pickingCamera.aspect = fullWidth / fullHeight

	pickingCamera.updateProjectionMatrix()
}

//////////////////////////////////////////////////////////////////////////////
//		Perform test
//////////////////////////////////////////////////////////////////////////////
HitTestingPlane.prototype.test = function(mouseX, mouseY){
	// convert mouseX, mouseY to [-1, +1]
	mouseX = (mouseX-0.5)*2
	mouseY =-(mouseY-0.5)*2
	
	this._pickingScene.updateMatrixWorld(true)

	// compute intersections between mouseVector3 and pickingPlane
	var raycaster = new three__WEBPACK_IMPORTED_MODULE_0__.Raycaster();
	var mouseVector3 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(mouseX, mouseY, 1);
	raycaster.setFromCamera( mouseVector3, this._pickingCamera )
	var intersects = raycaster.intersectObjects( [this._pickingPlane] )

	if( intersects.length === 0 )	return null

	// set new demoRoot position
	var position = this._pickingPlane.worldToLocal( intersects[0].point.clone() )
	// TODO here do a look at the camera ?
	var quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion
	var scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(1,1,1)//.multiplyScalar(1)
	
	return {
		position : position,
		quaternion : quaternion,
		scale : scale
	}
}

//////////////////////////////////////////////////////////////////////////////
//		render the pickingPlane for debug
//////////////////////////////////////////////////////////////////////////////

HitTestingPlane.prototype.renderDebug = function(renderer){
	// render sceneOrtho
	renderer.render( this._pickingScene, this._pickingCamera )
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HitTestingPlane);


/***/ }),

/***/ "three":
/*!**************************************************************************************!*\
  !*** external {"commonjs":"three","commonjs2":"three","amd":"three","root":"THREE"} ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_three__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!************************************!*\
  !*** ./three.js/src/index-arjs.js ***!
  \************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Anchor": () => (/* reexport safe */ _new_api_arjs_anchor__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "HitTesting": () => (/* reexport safe */ _new_api_arjs_hittesting__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "AnchorDebugUI": () => (/* reexport safe */ _new_api_arjs_debugui__WEBPACK_IMPORTED_MODULE_2__.AnchorDebugUI),
/* harmony export */   "SessionDebugUI": () => (/* reexport safe */ _new_api_arjs_debugui__WEBPACK_IMPORTED_MODULE_2__.SessionDebugUI),
/* harmony export */   "Session": () => (/* reexport safe */ _new_api_arjs_session__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "Utils": () => (/* reexport safe */ _new_api_arjs_utils__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "Context": () => (/* reexport safe */ _threex_arjs_context__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "Profile": () => (/* reexport safe */ _threex_arjs_profile__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "Source": () => (/* reexport safe */ _threex_arjs_source__WEBPACK_IMPORTED_MODULE_7__["default"])
/* harmony export */ });
/* harmony import */ var _new_api_arjs_anchor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./new-api/arjs-anchor */ "./three.js/src/new-api/arjs-anchor.js");
/* harmony import */ var _new_api_arjs_hittesting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./new-api/arjs-hittesting */ "./three.js/src/new-api/arjs-hittesting.js");
/* harmony import */ var _new_api_arjs_debugui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./new-api/arjs-debugui */ "./three.js/src/new-api/arjs-debugui.js");
/* harmony import */ var _new_api_arjs_session__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./new-api/arjs-session */ "./three.js/src/new-api/arjs-session.js");
/* harmony import */ var _new_api_arjs_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./new-api/arjs-utils */ "./three.js/src/new-api/arjs-utils.js");
/* harmony import */ var _threex_arjs_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./threex/arjs-context */ "./three.js/src/threex/arjs-context.js");
/* harmony import */ var _threex_arjs_profile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./threex/arjs-profile */ "./three.js/src/threex/arjs-profile.js");
/* harmony import */ var _threex_arjs_source__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./threex/arjs-source */ "./three.js/src/threex/arjs-source.js");











})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,